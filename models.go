package nsxt30policy

type defaultStruct struct {
	DisplayName       string `json:"display_name"`
	LastMooifiedTime  int64  `json:"_last_modified_time"`
	CreatedUser       string `json:"_create_user"`
	ParentPath        string `json:"parent_path"`
	Tags              []Tag  `json:"tags"`
	Reference         string `json:"reference"`
	MarkedForDeletion bool   `json:"marked_for_delete"`
	ID                string `json:"id"`
	SystemOwned       bool   `json:"_system_owned"`
	ResourceType      string `json:"resource_type"`
	Overridden        bool   `json:"overridden"`
	Path              string `json:"path"`
}

// Represents the space in which the policy is being defined.
type AbstractSpace struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The connectivity strategy is deprecated. Use default layer3 rule, /infra/domains/default/security-policies/default-layer3-security-policy/rules/default-layer3-rule. This field indicates the default connectivity policy for the infra or tenant space WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rules are added.
	ConnectivityStrategy string `json:"connectivity_strategy,omitempty"`
}

type AcceptableComponentVersion struct {
	// List of component versions
	AcceptableVersions []string `json:"acceptable_versions"`
	// Node type
	ComponentType string `json:"component_type"`
}

type AcceptableComponentVersionList struct {
	// Acceptable version whitelist for different components
	Results []AcceptableComponentVersion `json:"results"`
}

// Reaction Action is the action to take when the stipulated criteria specified in the event exist over the source. Some example actions include: - Notify Admin (or VMC's SRE) via email. - Populate a specific label with the IPSec VPN Session. - Remove the IPSec VPN Session from a specific label.
type Action struct {
	// Reaction Action resource type.
	ResourceType string `json:"resource_type"`
}

// Resources managed during restore process
type ActionableResource struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// A resource reference on which actions can be performed
	IpAddress string `json:"ip_address,omitempty"`
}

type ActionableResourceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List results
	Results []ActionableResource `json:"results"`
}

// An identity source service that runs Microsoft Active Directory. The service allows selected user accounts defined in Active Directory to log into and access NSX-T.
type ActiveDirectoryIdentitySource struct {
	// The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer `json:"ldap_servers,omitempty"`
	// The name of the authentication domain. When users log into NSX using an identity of the form \"user@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName   string `json:"domain_name"`
	ResourceType string `json:"resource_type"`
	// The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn string `json:"base_dn"`
}

type AdvanceClusterRestoreInput struct {
	// Unique id of an instruction (as returned by the GET /restore/status call) for which input is to be provided
	Id string `json:"id,omitempty"`
	// List of resources for which the instruction is applicable.
	Resources []SelectableResourceReference `json:"resources"`
}

type AdvanceClusterRestoreRequest struct {
	// List of instructions and their associated data
	Data []AdvanceClusterRestoreInput `json:"data"`
}

// Aggregate of DNS forwarder statistics across enforcement points.
type AggregateDnsForwarderStatistics struct {
	// List of DNS forwarder statistics per enforcement point.
	StatisticsPerEnforcementPoint []DnsForwarderStatisticsPerEnforcementPoint `json:"statistics_per_enforcement_point,omitempty"`
	// String path of the DNS forwarder intent.
	IntentPath string `json:"intent_path"`
}

// Aggregate of DNS forwarder status across enforcement points.
type AggregateDnsForwarderStatus struct {
	// List of DNS forwarder status per enforcement point.
	StatusPerEnforcementPoint []DnsForwarderStatusPerEnforcementPoint `json:"status_per_enforcement_point,omitempty"`
	// String path of the DNS forwarder intent.
	IntentPath string `json:"intent_path"`
}

// Aggregate of IPSec VPN Session Statistics across Enforcement Points.
type AggregateIpSecVpnSessionStatistics struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of IPSec VPN Session Statistics per Enforcement Point.
	Results []IpSecVpnSessionStatisticsPerEp `json:"results,omitempty"`
}

// Aggregate of IPSec VPN Session Status across Enforcement Points.
type AggregateIpSecVpnSessionStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of IPSec VPN Session Status per Enforcement Point.
	Results []IpSecVpnSessionStatusPerEp `json:"results,omitempty"`
}

// Aggregate of L2Vpn peer config across Enforcement Points.
type AggregateL2VpnPeerConfig struct {
	// List of L2Vpn peer config per Enforcement Point.
	L2vpnPeerConfigPerEnforcementPoint []L2VpnPeerConfigPerEnforcementPoint `json:"l2vpn_peer_config_per_enforcement_point,omitempty"`
	// Policy path referencing the L2Vpn.
	L2vpnPath string `json:"l2vpn_path"`
}

// Aggregate of L2VPN Session peer config across Enforcement Points.
type AggregateL2VpnSessionPeerConfig struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of L2VPN Session peer config per Enforcement Point.
	Results []L2VpnSessionPeerConfigPerEp `json:"results,omitempty"`
}

// Aggregate of L2Vpn session remote mac across enforcement points.
type AggregateL2VpnSessionRemoteMac struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of L2Vpn Session remote mac
	L2vpnSessionRemoteMacs []L2VpnSessionRemoteMacPerEp `json:"l2vpn_session_remote_macs,omitempty"`
}

// Aggregate of L2VPN Session Statistics across Enforcement Points.
type AggregateL2VpnSessionStatistics struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of L2VPN Session Statistics per Enforcement Point.
	Results []L2VpnSessionStatisticsPerEp `json:"results,omitempty"`
}

// Aggregate of L2VPN Session Status across Enforcement Points.
type AggregateL2VpnSessionStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// List of L2VPN Session Status per Enforcement Point.
	Results []L2VpnSessionStatusPerEp `json:"results,omitempty"`
}

// Aggregate of L2Vpn Statistics across Enforcement Points.
type AggregateL2VpnStatistics struct {
	// List of L2Vpn Statistics per Enforcement Point.
	L2vpnStatisticsPerEnforcementPoint []L2VpnStatisticsPerEnforcementPoint `json:"l2vpn_statistics_per_enforcement_point,omitempty"`
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path"`
}

// Aggregate of L3Vpn Statistics across Enforcement Points.
type AggregateL3VpnStatistics struct {
	// List of L3Vpn Statistics per Enforcement Point.
	L3vpnStatisticsPerEnforcementPoint []L3VpnStatisticsPerEnforcementPoint `json:"l3vpn_statistics_per_enforcement_point,omitempty"`
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path"`
}

// Aggregate of LBNodeUsageSummary across Enforcement Points.
type AggregateLbNodeUsageSummary struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBNodeUsageSummary list results.
	Results []LbNodeUsageSummary `json:"results,omitempty"`
}

// Paged Collection of LBPoolStatisticsPerEP
type AggregateLbPoolStatistics struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBPoolStatisticsPerEP list results.
	Results []LbPoolStatisticsPerEp `json:"results,omitempty"`
}

// Paged Collection of LBPoolStatusPerEP
type AggregateLbPoolStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBPoolStatusPerEP list results.
	Results []LbPoolStatusPerEp `json:"results,omitempty"`
}

// Paged Collection of LBServiceStatisticsPerEP
type AggregateLbServiceStatistics struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBServiceStatisticsPerEP list results.
	Results []LbServiceStatisticsPerEp `json:"results,omitempty"`
}

// Paged Collection of LBServiceStatusPerEP
type AggregateLbServiceStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBServiceStatusPerEP list results.
	Results []LbServiceStatusPerEp `json:"results,omitempty"`
}

// Aggregate of LBServiceUsagePerEP across Enforcement Points.
type AggregateLbServiceUsage struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBServiceUsagePerEP list results.
	Results []LbServiceUsagePerEp `json:"results,omitempty"`
}

// Paged Collection of LBVirtualServerStatisticsPerEP
type AggregateLbVirtualServerStatistics struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBVirtualServerStatisticsPerEP list results.
	Results []LbVirtualServerStatisticsPerEp `json:"results,omitempty"`
}

// Paged Collection of LBVirtualServerStatusPerEP
type AggregateLbVirtualServerStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
	// LBVirtualServerStatusPerEP list results.
	Results []LbVirtualServerStatusPerEp `json:"results,omitempty"`
}

// Aggregate of DNS forwarder nslookup answer across enforcement points.
type AggregatePolicyDnsAnswer struct {
	// List of DNS forwarder nslookup answer per enforcement point.
	DnsAnswerPerEnforcementPoint []PolicyDnsAnswerPerEnforcementPoint `json:"dns_answer_per_enforcement_point,omitempty"`
	// String path of the DNS forwarder intent.
	IntentPath string `json:"intent_path"`
}

// Aggregate of PolicyRuntimeInfoPerEP across Enforcement Points.
type AggregatePolicyRuntimeInfo struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath string `json:"intent_path,omitempty"`
}

type AggregatedDataCounter struct {
	TxBytes   *DataCounter `json:"tx_bytes,omitempty"`
	RxPackets *DataCounter `json:"rx_packets,omitempty"`
	TxPackets *DataCounter `json:"tx_packets,omitempty"`
	RxBytes   *DataCounter `json:"rx_bytes,omitempty"`
}

type AggregatedDataCounterEx struct {
	TxBytes                  *DataCounter              `json:"tx_bytes,omitempty"`
	RxPackets                *DataCounter              `json:"rx_packets,omitempty"`
	TxPackets                *DataCounter              `json:"tx_packets,omitempty"`
	RxBytes                  *DataCounter              `json:"rx_bytes,omitempty"`
	MacLearning              *MacLearningCounters      `json:"mac_learning,omitempty"`
	DroppedBySecurityPackets *PacketsDroppedBySecurity `json:"dropped_by_security_packets,omitempty"`
}

type AggregatedLogicalRouterPortCounters struct {
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64                      `json:"last_update_timestamp,omitempty"`
	Rx                  *LogicalRouterPortCounters `json:"rx,omitempty"`
	Tx                  *LogicalRouterPortCounters `json:"tx,omitempty"`
}

// An ServiceEntry that represents an ALG protocol
type AlgTypeServiceEntry struct {
	ResourceType string `json:"resource_type"`
	// The Application Layer Gateway (ALG) protocol. Please note, protocol NBNS_BROADCAST and NBDG_BROADCAST are  deprecated. Please use UDP protocol and create L4 Port Set type of service instead.
	Alg string `json:"alg"`
	// The destination_port cannot be empty and must be a single value.
	DestinationPorts []string `json:"destination_ports"`
	SourcePorts      []string `json:"source_ports,omitempty"`
}

// Detailed information about an API Error
type ApiError struct {
	// The module name where the error occurred
	ModuleName string `json:"module_name,omitempty"`
	// A description of the error
	ErrorMessage string `json:"error_message,omitempty"`
	// A numeric error code
	ErrorCode int64 `json:"error_code,omitempty"`
	// Further details about the error
	Details string `json:"details,omitempty"`
	// Additional data about the error
	ErrorData *interface{} `json:"error_data,omitempty"`
	// Other errors related to this error
	RelatedErrors []RelatedApiError `json:"related_errors,omitempty"`
}

// API Request Body is an Event Source that represents an API request body that is being reveived as part of an API. Supported Request Bodies are those received as part of a PATCH/PUT/POST request.
type ApiRequestBody struct {
	// Event Source resource type.
	ResourceType string `json:"resource_type"`
	// Regex path representing a regex expression on resources. This regex is used to identify the request body(ies) that is/are the source of the Event. For instance: specifying \"Lb* | /infra/tier-0s/vmc/ipsec-vpn-services/default\" as a source means that ANY resource starting with Lb or ANY resource with \"/infra/tier-0s/vmc/ipsec-vpn-services/default\" as path would be the source of the event in question.
	ResourcePointer string `json:"resource_pointer"`
}

// Application is a collection of Tiers where every tier shares common Security and networking requirements. Application API exposes self service model of consumption.
type Application struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path of the sites
	Sites []string `json:"sites,omitempty"`
}

// Networking and Security policy for Application.
type ApplicationService struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Application Service template id using which Application Service will be created. This will be available under the application service templates.
	ServiceTemplateId string `json:"service_template_id"`
	// Property containing attributes for Policy Application Service.
	Attributes []ApplicationServiceAttribute `json:"attributes,omitempty"`
}

// Policy Application Service data holder
type ApplicationServiceAttribute struct {
	KeyValue *KeyValuePair `json:"key_value,omitempty"`
}

// A 'tier' is a set of workloads that share common networking and security services. Tiers provide a specific function for an application and are thus a collection of compute with their associated services.
type ApplicationTier struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This represents the subnet that is associated with tier. If this is specified, size property is ignored.
	IpRange string `json:"ip_range,omitempty"`
	// There are three kinds of Access Types supported for an Application. Public  - Tier is accessible from external networks and its IP is picked up from public IP           addresses from VHC configuration unless specified explicitly by user. Private - Tier is accessbile only within the application and its IP is picked up from           private IP addresses from VHC configuration unless specified explicitly by user. Shared  - Tier is accessible within the scope of VHC and its IP is picked up from private           IP addresses from VHC configuration unless specified explicitly by user.
	AccessType string `json:"access_type,omitempty"`
	// ONE  - 1       XXS - 8 XS   - 16        S - 32 M    - 64        L - 128 XL   - 256     XXL - 512 XXXL - 1024
	Size string `json:"size,omitempty"`
}

type ArpHeader struct {
	// This field specifies the nature of the Arp message being sent.
	OpCode string `json:"op_code"`
	// This field specifies the IP address of the sender. If omitted, the src_ip is set to 0.0.0.0.
	SrcIp string `json:"src_ip,omitempty"`
	// The destination IP address
	DstIp string `json:"dst_ip"`
}

// Contains ARP snooping related configuration.
type ArpSnoopingConfig struct {
	// Number of arp snooped IP addresses Indicates the number of arp snooped IP addresses to be remembered per LogicalPort. Decreasing this value, will retain the latest bindings from the existing list of address bindings. Increasing this value will retain existing bindings and also learn any new address bindings discovered on the port until the new limit is reached.
	ArpBindingLimit int32 `json:"arp_binding_limit,omitempty"`
	// Indicates whether ARP snooping is enabled
	ArpSnoopingEnabled bool `json:"arp_snooping_enabled,omitempty"`
}

// Attribute specific to a partner. There attributes are passed on to the partner appliance and is opaque to the NSX Manager. The Attributes used by the partner applicance.
type Attribute struct {
	// Read only Attribute cannot be overdidden by service instance/deployment.
	ReadOnly bool `json:"read_only,omitempty"`
	// Attribute Type can be of any of the allowed enum type.
	AttributeType string `json:"attribute_type,omitempty"`
	// Attribute display name string value.
	DisplayName string `json:"display_name,omitempty"`
	// Attribute value string value.
	Value string `json:"value,omitempty"`
	// Attribute key string value.
	Key string `json:"key"`
}

// Contains type specific properties of generic realized entity
type AttributeVal struct {
	// List of attribute values
	Values []string `json:"values,omitempty"`
	// If attribute has a single value or collection of values
	Multivalue bool `json:"multivalue,omitempty"`
	// Attribute key
	Key string `json:"key,omitempty"`
	// Datatype of the property
	DataType string `json:"data_type,omitempty"`
}

// Represents X and Y axes of a graph. For a multi-graph, the same axes are shared by all the graphs.
type Axes struct {
	XLabel *Label `json:"x_label,omitempty"`
	YLabel *Label `json:"y_label,omitempty"`
}

// Configuration for taking manual/automated backup
type BackupConfiguration struct {
	RemoteFileServer *RemoteFileServer `json:"remote_file_server"`
	// true if automated backup is enabled
	BackupEnabled bool `json:"backup_enabled,omitempty"`
	// Passphrase used to encrypt backup files. The passphrase specified must be at least 8 characters in length and must contain at least one lowercase, one uppercase, one numeric character and one special character (any other non-space character).
	Passphrase     string          `json:"passphrase,omitempty"`
	BackupSchedule *BackupSchedule `json:"backup_schedule,omitempty"`
	// A number of seconds after a last backup, that needs to pass, before a topology change will trigger a generation of a new cluster/node backups. If parameter is not provided, then changes in a topology will not trigger a generation of cluster/node backups.
	AfterInventoryUpdateInterval int64 `json:"after_inventory_update_interval,omitempty"`
	// The minimum number of seconds between each upload of the inventory summary to backup server.
	InventorySummaryInterval int64 `json:"inventory_summary_interval,omitempty"`
}

// Past backup operation details
type BackupOperationHistory struct {
	// Statuses of previous inventory backups
	InventoryBackupStatuses []BackupOperationStatus `json:"inventory_backup_statuses,omitempty"`
	// Statuses of previous cluser backups
	ClusterBackupStatuses []BackupOperationStatus `json:"cluster_backup_statuses,omitempty"`
	// Statuses of previous node backups
	NodeBackupStatuses []BackupOperationStatus `json:"node_backup_statuses,omitempty"`
}

// Backup operation status
type BackupOperationStatus struct {
	// Unique identifier of a backup
	BackupId string `json:"backup_id"`
	// Time when operation was ended
	EndTime int64 `json:"end_time,omitempty"`
	// True if backup is successfully completed, else false
	Success bool `json:"success"`
	// Time when operation was started
	StartTime int64 `json:"start_time,omitempty"`
	// Error code details
	ErrorMessage string `json:"error_message,omitempty"`
	// Error code
	ErrorCode string `json:"error_code,omitempty"`
}

// Data for a single backup/restore card
type BackupOverview struct {
	// List of timestamps of backed-up cluster files
	Results                      []ClusterBackupInfo           `json:"results,omitempty"`
	CurrentBackupOperationStatus *CurrentBackupOperationStatus `json:"current_backup_operation_status"`
	BackupOperationHistory       *BackupOperationHistory       `json:"backup_operation_history"`
	BackupConfig                 *BackupConfiguration          `json:"backup_config"`
	RestoreStatus                *ClusterRestoreStatus         `json:"restore_status"`
}

// Abstract base type for Weekly or Interval Backup Schedule
type BackupSchedule struct {
	// Schedule type
	ResourceType string `json:"resource_type"`
}

// Consolidated Realized Status Per Enforcement Point.
type BaseConsolidatedStatusPerEnforcementPoint struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// The site where this enforcement point resides.
	SitePath           string              `json:"site_path,omitempty"`
	ConsolidatedStatus *ConsolidatedStatus `json:"consolidated_status,omitempty"`
	ResourceType       string              `json:"resource_type"`
	// Enforcement Point Id.
	EnforcementPointId string `json:"enforcement_point_id,omitempty"`
}

// Represents an endpoint which will be used as subject in rule. It is a polymorphic type object which can be either of the types - 1. Virtual 2. Logical We have 2 separate objects representing these 2 types. VirtualEndPoint for Virtual type and ServiceInstanceEndpoint for Logical.
type BaseEndpoint struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IPs where either inbound or outbound traffic is to be redirected.
	TargetIps    []IpInfo `json:"target_ips"`
	ResourceType string   `json:"resource_type"`
}

// Represents an instance of partner Service and its configuration.
type BasePolicyServiceInstance struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Unique name of Partner Service in the Marketplace
	PartnerServiceName string `json:"partner_service_name"`
	// Transport to be used while deploying Service-VM.
	TransportType string `json:"transport_type,omitempty"`
	// Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode string `json:"deployment_mode,omitempty"`
}

// A rule indicates the action to be performed for various types of traffic flowing between workload groups.
type BaseRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol string `json:"ip_protocol,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string `json:"profiles,omitempty"`
	// This is a unique 4 byte positive number that is assigned by the system.  This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on.
	RuleId int64 `json:"rule_id,omitempty"`
	// A flag to indicate whether rule is a default rule.
	IsDefault bool `json:"is_default,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded bool `json:"destinations_excluded,omitempty"`
	// This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded bool `json:"sources_excluded,omitempty"`
}

// Paged Collection of Rules
type BaseRuleListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
}

// Tier-0 interface configuration for external connectivity.
type BaseTier0Interface struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet `json:"subnets"`
}

// A set of operations to be performed in a single batch
type BatchRequest struct {
	Requests []BatchRequestItem `json:"requests,omitempty"`
	// Flag to decide if we will continue processing subsequent requests in case of current error for atomic = false.
	ContinueOnError bool `json:"continue_on_error,omitempty"`
}

// A single request within a batch of operations
type BatchRequestItem struct {
	Body *interface{} `json:"body,omitempty"`
	// relative uri (path and args), of the call including resource id (if this is a POST/DELETE), exclude hostname and port and prefix, exploded form of parameters
	Uri string `json:"uri"`
	// http method type
	Method string `json:"method"`
}

// The reponse to a batch operation
type BatchResponse struct {
	// Indicates if any of the APIs failed
	HasErrors bool `json:"has_errors,omitempty"`
	// Optional flag indicating that all items were rolled back even if succeeded initially
	RolledBack bool `json:"rolled_back,omitempty"`
	// Bulk list results
	Results []BatchResponseItem `json:"results"`
}

// A single respose in a list of batched responses
type BatchResponseItem struct {
	// object returned by api
	Body *interface{} `json:"body,omitempty"`
	// The headers returned by the API call
	Headers *interface{} `json:"headers,omitempty"`
	// http status code
	Code int64 `json:"code"`
}

// Bidirectional Forwarding Detection configuration for BGP peers
type BfdProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Time interval between heartbeat packets in milliseconds.
	Interval int32 `json:"interval,omitempty"`
	// Declare dead multiple. Number of times heartbeat packet is missed before BFD declares the neighbor is down.
	Multiple int32 `json:"multiple,omitempty"`
}

// Paged Collection of BfdProfile.
type BfdProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Bfd Profile list results.
	Results []BfdProfile `json:"results"`
}

type BgpAddressFamily struct {
	// Count of out prefixes
	OutPrefixCount int64 `json:"out_prefix_count,omitempty"`
	// BGP address family type
	Type_ string `json:"type,omitempty"`
	// Count of in prefixes
	InPrefixCount int64 `json:"in_prefix_count,omitempty"`
}

// BFD configuration for BGP peers
type BgpBfdConfig struct {
	// Declare dead multiple. Number of times heartbeat packet is missed before BFD declares the neighbor is down.
	Multiple int32 `json:"multiple,omitempty"`
	// Time interval between heartbeat packets in milliseconds.
	Interval int32 `json:"interval,omitempty"`
	// Flag to enable BFD cofiguration.
	Enabled bool `json:"enabled,omitempty"`
}

// Configuration field to hold BGP restart mode and timer.
type BgpGracefulRestartConfig struct {
	// If mode is DISABLE, then graceful restart and helper modes are disabled. If mode is GR_AND_HELPER, then both graceful restart and helper modes are enabled. If mode is HELPER_ONLY, then helper mode is enabled. HELPER_ONLY mode is the ability for a BGP speaker to indicate its ability to preserve forwarding state during BGP restart. GRACEFUL_RESTART mode is the ability of a BGP speaker to advertise its restart to its peers.
	Mode  string                   `json:"mode,omitempty"`
	Timer *BgpGracefulRestartTimer `json:"timer,omitempty"`
}

// Configuration field to hold BGP restart timers
type BgpGracefulRestartTimer struct {
	// Maximum time taken (in seconds) for a BGP session to be established after a restart. This can be used to speed up routing convergence by its peer in case the BGP speaker does not come back up after a restart. If the session is not re-established within this timer,  the receiving speaker will delete all the stale routes from that peer.
	RestartTimer int64 `json:"restart_timer,omitempty"`
	// Maximum time (in seconds) before stale routes are removed from the RIB (Routing Information Base) when BGP restarts.
	StaleRouteTimer int64 `json:"stale_route_timer,omitempty"`
}

// Contains information necessary to configure a BGP neighbor.
type BgpNeighborConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Specify path of prefix-list or route map to filter routes for OUT direction. When not specified, a built-in prefix-list named 'prefixlist-out-default' is automatically applied. This property is deprecated, use route_filtering instead. Specifying different values for both properties will result in error.
	OutRouteFilters []string `json:"out_route_filters,omitempty"`
	// If mode is DISABLE, then graceful restart and helper modes are disabled. If mode is GR_AND_HELPER, then both graceful restart and helper modes are enabled. If mode is HELPER_ONLY, then helper mode is enabled. HELPER_ONLY mode is the ability for a BGP speaker to indicate its ability to preserve forwarding state during BGP restart. GRACEFUL_RESTART mode is the ability of a BGP speaker to advertise its restart to its peers.
	GracefulRestartMode string        `json:"graceful_restart_mode,omitempty"`
	Bfd                 *BgpBfdConfig `json:"bfd,omitempty"`
	// Interval (in seconds) between keep alive messages sent to peer.
	KeepAliveTime int32 `json:"keep_alive_time,omitempty"`
	// Maximum number of hops allowed to reach BGP neighbor.
	MaximumHopLimit int32 `json:"maximum_hop_limit,omitempty"`
	// Wait time in seconds before declaring peer dead.
	HoldDownTime int32 `json:"hold_down_time,omitempty"`
	// Specify path of prefix-list or route map to filter routes for IN direction. This property is deprecated, use route_filtering instead. Specifying different values for both properties will result in error.
	InRouteFilters []string `json:"in_route_filters,omitempty"`
	// 4 Byte ASN of the neighbor in ASPLAIN Format
	RemoteAsNum string `json:"remote_as_num"`
	// Enable address families and route filtering in each direction.
	RouteFiltering []BgpRouteFiltering `json:"route_filtering,omitempty"`
	// Source addresses should belong to Tier0 external or loopback interface IP Addresses . BGP peering is formed from all these addresses. This property is mandatory when maximum_hop_limit is greater than 1.
	SourceAddresses []string `json:"source_addresses,omitempty"`
	// Specify password for BGP neighbor authentication. Empty string (\"\") clears existing password.
	Password string `json:"password,omitempty"`
	// Flag to enable allowas_in option for BGP neighbor
	AllowAsIn bool `json:"allow_as_in,omitempty"`
	// Neighbor IP Address
	NeighborAddress string `json:"neighbor_address"`
}

// Paged collection of BGP Neighbor Configs
type BgpNeighborConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// BGP neighbor configs list results
	Results []BgpNeighborConfig `json:"results"`
}

// BGP neighbor learned/advertised route details.
type BgpNeighborRouteDetailsCsvRecord struct {
	// BGP Multi Exit Discriminator attribute.
	Med int64 `json:"med,omitempty"`
	// CIDR network address.
	Network string `json:"network,omitempty"`
	// BGP Weight attribute.
	Weight int64 `json:"weight,omitempty"`
	// Transport node id
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// BGP AS path attribute.
	AsPath string `json:"as_path,omitempty"`
	// Next hop IP address.
	NextHop string `json:"next_hop,omitempty"`
	// Logical router id
	LogicalRouterId string `json:"logical_router_id,omitempty"`
	// BGP Local Preference attribute.
	LocalPref int64 `json:"local_pref,omitempty"`
	// BGP neighbor source address.
	SourceAddress string `json:"source_address,omitempty"`
	// BGP neighbor id
	NeighborId string `json:"neighbor_id,omitempty"`
	// BGP neighbor peer IP address.
	NeighborAddress string `json:"neighbor_address,omitempty"`
}

type BgpNeighborRouteDetailsInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string                             `json:"file_name,omitempty"`
	Results  []BgpNeighborRouteDetailsCsvRecord `json:"results,omitempty"`
}

// BGP neighbor learned/advertised route details.
type BgpNeighborRoutes struct {
	// BGP neighbor policy path
	NeighborPath string `json:"neighbor_path,omitempty"`
	// Array of BGP neighbor route details per edge node.
	EgdeNodeRoutes []RoutesPerTransportNode `json:"egde_node_routes,omitempty"`
	// Enforcement point policy path
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

type BgpNeighborRoutesListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of Bgp neighbor routes.
	Results []BgpNeighborRoutes `json:"results,omitempty"`
}

// Enable address_families and route filtering in each direction
type BgpRouteFiltering struct {
	// Specify path of prefix-list or route map to filter routes for OUT direction. When not specified, a built-in prefix-list named 'prefixlist-out-default' is automatically applied.
	OutRouteFilters []string `json:"out_route_filters,omitempty"`
	// Specify path of prefix-list or route map to filter routes for IN direction.
	InRouteFilters []string `json:"in_route_filters,omitempty"`
	// Flag to enable address family.
	Enabled bool `json:"enabled,omitempty"`
	// Address family type. If not configured, this property automatically derived for IPv4 & IPv6 peer configuration.
	AddressFamily string `json:"address_family,omitempty"`
	// Maximum number of routes for the address family.
	MaximumRoutes int32 `json:"maximum_routes,omitempty"`
}

// Contains BGP routing configuration.
type BgpRoutingConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to enable inter SR IBGP configuration. When not specified, inter SR IBGP is automatically enabled if Tier-0 is created in ACTIVE_ACTIVE ha_mode.
	InterSrIbgp bool `json:"inter_sr_ibgp,omitempty"`
	// Specify BGP AS number for Tier-0 to advertize to BGP peers. AS number can be specified in ASPLAIN (e.g., \"65546\") or ASDOT (e.g., \"1.10\") format. Empty string disables BGP feature. It is required by normal tier0 but not required in vrf tier0.
	LocalAsNum string `json:"local_as_num,omitempty"`
	// Flag to enable graceful restart. This field is deprecated, please use graceful_restart_config parameter for graceful restart configuration. If both parameters are set and consistent with each other (i.e. graceful_restart=false and graceful_restart_mode=HELPER_ONLY OR graceful_restart=true and graceful_restart_mode=GR_AND_HELPER) then this is allowed, but if inconsistent with each other then this is not allowed and validation error will be thrown.
	GracefulRestart bool `json:"graceful_restart,omitempty"`
	// List of routes to be aggregated.
	RouteAggregations []RouteAggregationEntry `json:"route_aggregations,omitempty"`
	// Flag to enable BGP configuration. Disabling will stop feature and BGP peering.
	Enabled               bool                      `json:"enabled,omitempty"`
	GracefulRestartConfig *BgpGracefulRestartConfig `json:"graceful_restart_config,omitempty"`
	// Flag to enable BGP multipath relax option.
	MultipathRelax bool `json:"multipath_relax,omitempty"`
	// Flag to enable ECMP.
	Ecmp bool `json:"ecmp,omitempty"`
}

type BinaryPacketData struct {
	// A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed bool `json:"routed,omitempty"`
	// transport type of the traceflow packet
	TransportType string `json:"transport_type,omitempty"`
	// Packet configuration
	ResourceType string `json:"resource_type"`
	// If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message.  The frame will be zero padded to the requested size.
	FrameSize int64 `json:"frame_size,omitempty"`
	// Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload must contain all headers (Ethernet, IP, etc). Note that VLAN is not supported in the logical space. Hence, payload must not contain 802.1Q headers.
	Payload string `json:"payload,omitempty"`
}

// configuration parameters for Bridge Profile
type BridgeProfileConfig struct {
	// The name of the switching uplink teaming policy for the bridge endpoint. This name corresponds to one fot he switching uplink teaming policy names listed in teh transport zone. When this property is not specified, the teaming policy is assigned by MP.
	UplinkTeamingPolicyName string `json:"uplink_teaming_policy_name,omitempty"`
	// VLAN specification for bridge endpoint. Either VLAN ID or VLAN ranges can be specified. Not both.
	VlanIds []string `json:"vlan_ids,omitempty"`
	// Same bridge profile can be configured on different segments. Each bridge profile on a segment must unique.
	BridgeProfilePath string `json:"bridge_profile_path"`
	// VLAN transport zone should belong to the enforcment-point as the transport zone specified in the segment.
	VlanTransportZonePath string `json:"vlan_transport_zone_path"`
}

// Represents an instance of partner's service whose wiring will be done by partner itself. As partner does all the wiring, we call it as Byod - Bring your own device.
type ByodPolicyServiceInstance struct {
	// Unique name of Partner Service in the Marketplace
	PartnerServiceName string `json:"partner_service_name"`
	// Transport to be used while deploying Service-VM.
	TransportType string `json:"transport_type,omitempty"`
	// Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode string `json:"deployment_mode,omitempty"`
}

// Collection of only Byod SI objects
type ByodPolicyServiceInstanceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Byod Service instance list results
	Results []ByodPolicyServiceInstance `json:"results"`
}

// Child wrapper object for Application, used in hierarchical API
type ChildApplication struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool         `json:"marked_for_delete,omitempty"`
	Application     *Application `json:"Application"`
}

// Child wrapper object for ApplicationService, used in hierarchical API
type ChildApplicationService struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	ApplicationService *ApplicationService `json:"ApplicationService"`
}

// Child wrapper object for ApplicationTier, used in hierarchical API
type ChildApplicationTier struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	ApplicationTier *ApplicationTier `json:"ApplicationTier"`
}

// Child wrapper for BfdProfile, used in hierarchical API.
type ChildBfdProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	BfdProfile      *BfdProfile `json:"BfdProfile"`
}

// Child wrapper object for BgpNeighborConfig, used in hierarchical API.
type ChildBgpNeighborConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	BgpNeighborConfig *BgpNeighborConfig `json:"BgpNeighborConfig"`
}

// Child wrapper object for BgpRoutingConfig, used in hierarchical API.
type ChildBgpRoutingConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	BgpRoutingConfig *BgpRoutingConfig `json:"BgpRoutingConfig"`
}

// Child wrapper object for ByodPolicyServiceInstance used in hierarchical API.
type ChildByodPolicyServiceInstance struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete           bool                       `json:"marked_for_delete,omitempty"`
	ByodPolicyServiceInstance *ByodPolicyServiceInstance `json:"ByodPolicyServiceInstance"`
}

// Child wrapper object for CommunicationEntry, used in hierarchical API This type is deprecated. Use the type ChildRule instead.
type ChildCommunicationEntry struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	CommunicationEntry *CommunicationEntry `json:"CommunicationEntry"`
}

// Child wrapper object for CommunicationMap, used in hierarchical API This type is deprecated. Use the type ChildSecurityPolicy instead.
type ChildCommunicationMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	CommunicationMap *CommunicationMap `json:"CommunicationMap"`
}

// Child wrapper object for CommunityList, used in hierarchical API
type ChildCommunityList struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	CommunityList   *CommunityList `json:"CommunityList"`
}

// Wrapper object for ComputeClusterIdfwConfiguration
type ChildComputeClusterIdfwConfiguration struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                 bool                             `json:"marked_for_delete,omitempty"`
	ComputeClusterIdfwConfiguration *ComputeClusterIdfwConfiguration `json:"ComputeClusterIdfwConfiguration"`
}

// Child wrapper object for Constraint, used in hierarchical API
type ChildConstraint struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	Constraint      *Constraint `json:"Constraint"`
}

// Child wrapper object for DeploymentZone, used in hierarchical API
type ChildDeploymentZone struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	DeploymentZone  *DeploymentZone `json:"DeploymentZone"`
}

// Wrapper object for FirewallConfiguration
type ChildDfwFirewallConfiguration struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete          bool                      `json:"marked_for_delete,omitempty"`
	DfwFirewallConfiguration *DfwFirewallConfiguration `json:"DfwFirewallConfiguration"`
}

// Child wrapper object for DhcpRelayConfig, used in hierarchical API
type ChildDhcpRelayConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	DhcpRelayConfig *DhcpRelayConfig `json:"DhcpRelayConfig"`
}

// Child wrapper object for DhcpServerConfig, used in hierarchical API
type ChildDhcpServerConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	DhcpServerConfig *DhcpServerConfig `json:"DhcpServerConfig"`
}

// Child wrapper for DhcpStaticBindingConfig, used in hierarchical API.
type ChildDhcpStaticBindingConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	DhcpStaticBindingConfig *DhcpStaticBindingConfig `json:"DhcpStaticBindingConfig"`
}

// Child wrapper object for DnsSecurityProfile, used in hierarchical API
type ChildDnsSecurityProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	DnsSecurityProfile *DnsSecurityProfile `json:"DnsSecurityProfile"`
}

// Child wrapper obejct for DnsSecurityProfileBindingMap used in hierarchical API
type ChildDnsSecurityProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete              bool                          `json:"marked_for_delete,omitempty"`
	DnsSecurityProfileBindingMap *DnsSecurityProfileBindingMap `json:"DnsSecurityProfileBindingMap"`
}

// Child wrapper object for domain, used in hierarchical API.
type ChildDomain struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool    `json:"marked_for_delete,omitempty"`
	Domain          *Domain `json:"Domain"`
}

// Child wrapper object for DomainDeploymentMap, used in hierarchical API.
type ChildDomainDeploymentMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	DomainDeploymentMap *DomainDeploymentMap `json:"DomainDeploymentMap"`
}

// Child wrapper object for EndpointPolicy used in hierarchical API.
type ChildEndpointPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	EndpointPolicy  *EndpointPolicy `json:"EndpointPolicy"`
}

// Child wrapper object for EndpointRule used in hierarchical API.
type ChildEndpointRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	EndpointRule    *EndpointRule `json:"EndpointRule"`
}

// Child wrapper object for EnforcementPoint, used in hierarchical API.
type ChildEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	EnforcementPoint *EnforcementPoint `json:"EnforcementPoint"`
}

// Child wrapper object for EvpnConfig, used in hierarchical API.
type ChildEvpnConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	EvpnConfig      *EvpnConfig `json:"EvpnConfig"`
}

// Child wrapper object for EvpnTunnelEndpointConfig, used in hierarchical API.
type ChildEvpnTunnelEndpointConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete          bool                      `json:"marked_for_delete,omitempty"`
	EvpnTunnelEndpointConfig *EvpnTunnelEndpointConfig `json:"EvpnTunnelEndpointConfig"`
}

// Child wrapper for FirewallIdentityStore, used in hierarchical API.
type ChildFirewallIdentityStore struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	FirewallIdentityStore *FirewallIdentityStore `json:"FirewallIdentityStore"`
}

// Child wrapper object for FloodProtectionProfile, used in hierarchical API
type ChildFloodProtectionProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete        bool                    `json:"marked_for_delete,omitempty"`
	FloodProtectionProfile *FloodProtectionProfile `json:"FloodProtectionProfile"`
}

// Child wrapper object for FloodProtectionProfileBindingMap, used in hierarchical API
type ChildFloodProtectionProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                  bool                              `json:"marked_for_delete,omitempty"`
	FloodProtectionProfileBindingMap *FloodProtectionProfileBindingMap `json:"FloodProtectionProfileBindingMap"`
}

// Child wrapper object for ForwardingPolicy used in Hierarchical API.
type ChildForwardingPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	ForwardingPolicy *ForwardingPolicy `json:"ForwardingPolicy"`
}

// Child wrapper object for ForwardingRule used in Hierarchical API.
type ChildForwardingRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	ForwardingRule  *ForwardingRule `json:"ForwardingRule"`
}

// Child wrapper object for GatewayPolicy, used in hierarchical API
type ChildGatewayPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	GatewayPolicy   *GatewayPolicy `json:"GatewayPolicy"`
}

// Child wrapper for GatewayQosProfile, used in hierarchical API.
type ChildGatewayQosProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool               `json:"marked_for_delete,omitempty"`
	QosProfile      *GatewayQosProfile `json:"QosProfile"`
}

// Child wrapper object for GlobalConfig, used in hierarchical API
type ChildGlobalConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	GlobalConfig    *GlobalConfig `json:"GlobalConfig"`
}

// Child wrapper object for Global Manager, used in hierarchical API.
type ChildGlobalManager struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	GlobalManager   *GlobalManager `json:"GlobalManager"`
}

// Child wrapper object for group, used in hierarchical API.
type ChildGroup struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	Group           *Group `json:"Group"`
}

// Child wrapper obejct for GroupDiscoveryProfileBindingMap used in hierarchical API
type ChildGroupDiscoveryProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                 bool                             `json:"marked_for_delete,omitempty"`
	GroupDiscoveryProfileBindingMap *GroupDiscoveryProfileBindingMap `json:"GroupDiscoveryProfileBindingMap"`
}

// Child wrapper object for GroupMonitoringProfileBindingMap, used in hierarchical API
type ChildGroupMonitoringProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                  bool                              `json:"marked_for_delete,omitempty"`
	GroupMonitoringProfileBindingMap *GroupMonitoringProfileBindingMap `json:"GroupMonitoringProfileBindingMap"`
}

// Child wrapper object for IdsClusterConfig, used in hierarchical API
type ChildIdsClusterConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	IdsClusterConfig *IdsClusterConfig `json:"IdsClusterConfig"`
}

// Child wrapper object for IdsProfile, used in hierarchical API
type ChildIdsProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	IdsProfile      *IdsProfile `json:"IdsProfile"`
}

// Child wrapper object for IdsRule, used in hierarchical API
type ChildIdsRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool     `json:"marked_for_delete,omitempty"`
	IdsRule         *IdsRule `json:"IdsRule"`
}

// Child wrapper object for IdsSecurityPolicy, used in hierarchical API
type ChildIdsSecurityPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	IdsSecurityPolicy *IdsSecurityPolicy `json:"IdsSecurityPolicy"`
}

// Child wrapper object for IdsSignature, used in hierarchical API
type ChildIdsSignature struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	IdsSignature    *IdsSignature `json:"IdsSignature"`
}

// Child wrapper object for IdsStandaloneHostConfig, used in hierarchical API
type ChildIdsStandaloneHostConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	IdsStandaloneHostConfig *IdsStandaloneHostConfig `json:"IdsStandaloneHostConfig"`
}

// Child wrapper object for IpAddressAllocation, used in hierarchical API
type ChildIpAddressAllocation struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	IpAddressAllocation *IpAddressAllocation `json:"IpAddressAllocation"`
}

// Child wrapper object for IpAddressBlock, used in hierarchical API
type ChildIpAddressBlock struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	IpAddressBlock  *IpAddressBlock `json:"IpAddressBlock"`
}

// Child wrapper object for IpAddressPool, used in hierarchical API
type ChildIpAddressPool struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	IpAddressPool   *IpAddressPool `json:"IpAddressPool"`
}

// Child wrapper object for IpAddressPoolSubnet, used in hierarchical API
type ChildIpAddressPoolSubnet struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	IpAddressPoolSubnet *IpAddressPoolSubnet `json:"IpAddressPoolSubnet"`
}

// Child wrapper object for IPDiscoveryProfile, used in hierarchical API
type ChildIpDiscoveryProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	IPDiscoveryProfile *IpDiscoveryProfile `json:"IPDiscoveryProfile"`
}

// Child wrapper object for IPSecVpnDpdProfile, used in hierarchical API.
type ChildIpSecVpnDpdProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	IPSecVpnDpdProfile *IpSecVpnDpdProfile `json:"IPSecVpnDpdProfile"`
}

// Child wrapper object for IPSecVpnIkeProfile, used in hierarchical API.
type ChildIpSecVpnIkeProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	IPSecVpnIkeProfile *IpSecVpnIkeProfile `json:"IPSecVpnIkeProfile"`
}

// Child wrapper object for IPSecVpnLocalEndpoint, used in hierarchical API.
type ChildIpSecVpnLocalEndpoint struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	IPSecVpnLocalEndpoint *IpSecVpnLocalEndpoint `json:"IPSecVpnLocalEndpoint"`
}

// Child wrapper object for IPSecVpnService, used in hierarchical API.
type ChildIpSecVpnService struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	IPSecVpnService *IpSecVpnService `json:"IPSecVpnService"`
}

// Child wrapper object for IPSecVpnSession, used in hierarchical API.
type ChildIpSecVpnSession struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	IPSecVpnSession *IpSecVpnSession `json:"IPSecVpnSession"`
}

// Child wrapper object for IPSecVpnTunnelProfile, used in hierarchical API.
type ChildIpSecVpnTunnelProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	IPSecVpnTunnelProfile *IpSecVpnTunnelProfile `json:"IPSecVpnTunnelProfile"`
}

// Child wrapper object for IPFIXDFWCollectorProfile, used in hierarchical API
type ChildIpfixdfwCollectorProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete          bool                      `json:"marked_for_delete,omitempty"`
	IPFIXDFWCollectorProfile *IpfixdfwCollectorProfile `json:"IPFIXDFWCollectorProfile"`
}

// Child wrapper object for IPFIXDFWProfile, used in hierarchical API
type ChildIpfixdfwProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	IPFIXDFWProfile *IpfixdfwProfile `json:"IPFIXDFWProfile"`
}

// Child wrapper object for IPFIXL2CollectorProfile, used in hierarchical API
type ChildIpfixl2CollectorProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	IPFIXL2CollectorProfile *Ipfixl2CollectorProfile `json:"IPFIXL2CollectorProfile"`
}

// Child wrapper object for IPFIXL2Profile, used in hierarchical API
type ChildIpfixl2Profile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	IPFIXL2Profile  *Ipfixl2Profile `json:"IPFIXL2Profile"`
}

// Child wrapper object for Ipv6DadProfile, used in hierarchical API
type ChildIpv6DadProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	Ipv6DadProfile  *Ipv6DadProfile `json:"Ipv6DadProfile"`
}

// Child wrapper object for Ipv6NdraProfile, used in hierarchical API
type ChildIpv6NdraProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	Ipv6NdraProfile *Ipv6NdraProfile `json:"Ipv6NdraProfile"`
}

// Child wrapper object for L2BridgeEndpointProfile, used in hierarchical API
type ChildL2BridgeEndpointProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	L2BridgeEndpointProfile *L2BridgeEndpointProfile `json:"L2BridgeEndpointProfile"`
}

// Child wrapper object for L2Vpn, used in hierarchical API.
type ChildL2Vpn struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	L2Vpn           *L2Vpn `json:"L2Vpn"`
}

// Child wrapper object for L2VpnContext, used in hierarchical API.
type ChildL2VpnContext struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	L2VpnContext    *L2VpnContext `json:"L2VpnContext"`
}

// Child wrapper object for L2VPNService, used in hierarchical API.
type ChildL2VpnService struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	L2VPNService    *L2VpnService `json:"L2VPNService"`
}

// Child wrapper object for L2VPNSession, used in hierarchical API.
type ChildL2VpnSession struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	L2VPNSession    *L2VpnSession `json:"L2VPNSession"`
}

// Child wrapper object for L3Vpn, used in hierarchical API.
type ChildL3Vpn struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	L3Vpn           *L3Vpn `json:"L3Vpn"`
}

// Child wrapper object for L3VpnContext, used in hierarchical API.
type ChildL3VpnContext struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	L3VpnContext    *L3VpnContext `json:"L3VpnContext"`
}

// Child wrapper for LBAppProfile, used in hierarchical API.
type ChildLbAppProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	LBAppProfile    *LbAppProfile `json:"LBAppProfile"`
}

// Child wrapper for LBClientSslProfile, used in hierarchical API.
type ChildLbClientSslProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	LBClientSslProfile *LbClientSslProfile `json:"LBClientSslProfile"`
}

// Child wrapper for LBMonitorProfile, used in hierarchical API.
type ChildLbMonitorProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	LBMonitorProfile *LbMonitorProfile `json:"LBMonitorProfile"`
}

// Child wrapper for LBPersistenceProfile, used in hierarchical API.
type ChildLbPersistenceProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete      bool                  `json:"marked_for_delete,omitempty"`
	LBPersistenceProfile *LbPersistenceProfile `json:"LBPersistenceProfile"`
}

// Child wrapper for LBPool, used in hierarchical API.
type ChildLbPool struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool    `json:"marked_for_delete,omitempty"`
	LBPool          *LbPool `json:"LBPool"`
}

// Child wrapper for LBServerSslProfile, used in hierarchical API.
type ChildLbServerSslProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	LBServerSslProfile *LbServerSslProfile `json:"LBServerSslProfile"`
}

// Child wrapper for LBService, used in hierarchical API.
type ChildLbService struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool       `json:"marked_for_delete,omitempty"`
	LBService       *LbService `json:"LBService"`
}

// Child wrapper for LBVirtualServer, used in hierarchical API.
type ChildLbVirtualServer struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	LBVirtualServer *LbVirtualServer `json:"LBVirtualServer"`
}

// Child wrapper object for LocaleServices, used in hierarchical API
type ChildLocaleServices struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	LocaleServices  *LocaleServices `json:"LocaleServices"`
}

// Child wrapper object for MacDiscoveryProfile, used in hierarchical API
type ChildMacDiscoveryProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	MacDiscoveryProfile *MacDiscoveryProfile `json:"MacDiscoveryProfile"`
}

// Wrapper object for MetadataProxyConfig
type ChildMetadataProxyConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	MetadataProxyConfig *MetadataProxyConfig `json:"MetadataProxyConfig"`
}

// Represents an object on the desired state
type ChildPolicyConfigResource struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id           string `json:"id,omitempty"`
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// Child wrapper object for PolicyContextProfile, used in hierarchical API
type ChildPolicyContextProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete      bool                  `json:"marked_for_delete,omitempty"`
	PolicyContextProfile *PolicyContextProfile `json:"PolicyContextProfile"`
}

// Child wrapper object for PolicyDnsForwarder, used in hierarchical API
type ChildPolicyDnsForwarder struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	PolicyDnsForwarder *PolicyDnsForwarder `json:"PolicyDnsForwarder"`
}

// Child wrapper object for PolicyDnsForwarderZone, used in hierarchical API
type ChildPolicyDnsForwarderZone struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete        bool                    `json:"marked_for_delete,omitempty"`
	PolicyDnsForwarderZone *PolicyDnsForwarderZone `json:"PolicyDnsForwarderZone"`
}

// Child wrapper object for PolicyEdgeCluster, used in hierarchical API.
type ChildPolicyEdgeCluster struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	PolicyEdgeCluster *PolicyEdgeCluster `json:"PolicyEdgeCluster"`
}

// Child wrapper object for PolicyEdgeNode, used in hierarchical API.
type ChildPolicyEdgeNode struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	PolicyEdgeNode  *PolicyEdgeNode `json:"PolicyEdgeNode"`
}

// Wrapper object for PolicyExcludeList
type ChildPolicyExcludeList struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	PolicyExcludeList *PolicyExcludeList `json:"PolicyExcludeList"`
}

// Child wrapper object for PolicyFirewallCpuMemThresholdsProfile, used in hierarchical API.
type ChildPolicyFirewallCpuMemThresholdsProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                       bool                                   `json:"marked_for_delete,omitempty"`
	PolicyFirewallCpuMemThresholdsProfile *PolicyFirewallCpuMemThresholdsProfile `json:"PolicyFirewallCpuMemThresholdsProfile"`
}

// Child wrapper object for PolicyFirewallCPUMemThresholdsProfileBindingMap, used in hierarchical API.
type ChildPolicyFirewallCpuMemThresholdsProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                                 bool                                             `json:"marked_for_delete,omitempty"`
	PolicyFirewallCPUMemThresholdsProfileBindingMap *PolicyFirewallCpuMemThresholdsProfileBindingMap `json:"PolicyFirewallCPUMemThresholdsProfileBindingMap"`
}

// Child wrapper object for PolicyFirewallFloodProtectionProfileBindingMap, used in hierarchical API
type ChildPolicyFirewallFloodProtectionProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                                bool                                            `json:"marked_for_delete,omitempty"`
	PolicyFirewallFloodProtectionProfileBindingMap *PolicyFirewallFloodProtectionProfileBindingMap `json:"PolicyFirewallFloodProtectionProfileBindingMap"`
}

// Child wrapper object for PolicyFirewallScheduler, used in hierarchical API
type ChildPolicyFirewallScheduler struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	PolicyFirewallScheduler *PolicyFirewallScheduler `json:"PolicyFirewallScheduler"`
}

// Child wrapper object for PolicyFirewallSessionTimerProfile, used in hierarchical API
type ChildPolicyFirewallSessionTimerProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                   bool                               `json:"marked_for_delete,omitempty"`
	PolicyFirewallSessionTimerProfile *PolicyFirewallSessionTimerProfile `json:"PolicyFirewallSessionTimerProfile"`
}

// Child wrapper object for PolicyFirewallSessionTimerProfileBindingMap, used in hierarchical API
type ChildPolicyFirewallSessionTimerProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                             bool                                         `json:"marked_for_delete,omitempty"`
	PolicyFirewallSessionTimerProfileBindingMap *PolicyFirewallSessionTimerProfileBindingMap `json:"PolicyFirewallSessionTimerProfileBindingMap"`
}

// Child wrapper object for PolicyGroupReference, used in hierarchical API
type ChildPolicyGroupReference struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete      bool                  `json:"marked_for_delete,omitempty"`
	PolicyGroupReference *PolicyGroupReference `json:"PolicyGroupReference"`
}

// Child wrapper object for PolicyIgmpProfile used in hierarchical API.
type ChildPolicyIgmpProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	PolicyIgmpProfile *PolicyIgmpProfile `json:"PolicyIgmpProfile"`
}

// Child wrapper object for PolicyLabel, used in hierarchical API
type ChildPolicyLabel struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool         `json:"marked_for_delete,omitempty"`
	PolicyLabel     *PolicyLabel `json:"PolicyLabel"`
}

// Child wrapper for PolicyLbMonitorProfile, used in hierarchical API
type ChildPolicyLbMonitorProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete        bool                    `json:"marked_for_delete,omitempty"`
	PolicyLbMonitorProfile *PolicyLbMonitorProfile `json:"PolicyLbMonitorProfile"`
}

// Child wrapper for PolicyLbPersistenceProfile, used in hierarchical API
type ChildPolicyLbPersistenceProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete            bool                        `json:"marked_for_delete,omitempty"`
	PolicyLbPersistenceProfile *PolicyLbPersistenceProfile `json:"PolicyLbPersistenceProfile"`
}

// Child wrapper for PolicyLbPoolAccess, used in hierarchical API
type ChildPolicyLbPoolAccess struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	PolicyLbPoolAccess *PolicyLbPoolAccess `json:"PolicyLbPoolAccess"`
}

// Child wrapper for PolicyLbRule, used in hierarchical API
type ChildPolicyLbRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	PolicyLbRule    *PolicyLbRule `json:"PolicyLbRule"`
}

// Child wrapper for PolicyLbVirtualServer, used in hierarchical API
type ChildPolicyLbVirtualServer struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	PolicyLbVirtualServer *PolicyLbVirtualServer `json:"PolicyLbVirtualServer"`
}

// Child wrapper object for PolicyMulticastConfig used in hierarchical API.
type ChildPolicyMulticastConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	PolicyMulticastConfig *PolicyMulticastConfig `json:"PolicyMulticastConfig"`
}

// Child wrapper object for PolicyNat, used in hierarchical API
type ChildPolicyNat struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool       `json:"marked_for_delete,omitempty"`
	PolicyNat       *PolicyNat `json:"PolicyNat"`
}

// Child wrapper object for PolicyNatRule, used in hierarchical API
type ChildPolicyNatRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	PolicyNatRule   *PolicyNatRule `json:"PolicyNatRule"`
}

// Child wrapper object for PolicyPimProfile used in hierarchical API.
type ChildPolicyPimProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	PolicyPimProfile *PolicyPimProfile `json:"PolicyPimProfile"`
}

// Child wrapper object for PolicyServiceInstance used in hierarchical API.
type ChildPolicyServiceChain struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	PolicyServiceChain *PolicyServiceChain `json:"PolicyServiceChain"`
}

// Child wrapper object for PolicyServiceInstance used in hierarchical API.
type ChildPolicyServiceInstance struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete       bool                   `json:"marked_for_delete,omitempty"`
	PolicyServiceInstance *PolicyServiceInstance `json:"PolicyServiceInstance"`
}

// Child wrapper object for PolicyServiceProfile used in hierarchical API.
type ChildPolicyServiceProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete      bool                  `json:"marked_for_delete,omitempty"`
	PolicyServiceProfile *PolicyServiceProfile `json:"PolicyServiceProfile"`
}

// Child wrapper object for PolicyTransportZone, used in hierarchical API.
type ChildPolicyTransportZone struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	PolicyTransportZone *PolicyTransportZone `json:"PolicyTransportZone"`
}

// Child wrapper object for PolicyUrlCategorizationConfig, used in hierarchical API
type ChildPolicyUrlCategorizationConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete               bool                           `json:"marked_for_delete,omitempty"`
	PolicyUrlCategorizationConfig *PolicyUrlCategorizationConfig `json:"PolicyUrlCategorizationConfig"`
}

// Child wrapper object for PortDiscoveryProfileBindingMap, used in hierarchical API
type ChildPortDiscoveryProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                bool                            `json:"marked_for_delete,omitempty"`
	PortDiscoveryProfileBindingMap *PortDiscoveryProfileBindingMap `json:"PortDiscoveryProfileBindingMap"`
}

// Child wrapper object for PortMirroringProfile, used in hierarchical API
type ChildPortMirroringProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete      bool                  `json:"marked_for_delete,omitempty"`
	PortMirroringProfile *PortMirroringProfile `json:"PortMirroringProfile"`
}

// Child wrapper object for PortMonitoringProfileBindingMap, used in hierarchical API
type ChildPortMonitoringProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                 bool                             `json:"marked_for_delete,omitempty"`
	PortMonitoringProfileBindingMap *PortMonitoringProfileBindingMap `json:"PortMonitoringProfileBindingMap"`
}

// Child wrapper object for PortQoSProfileBindingMap, used in hierarchical API
type ChildPortQoSProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete          bool                      `json:"marked_for_delete,omitempty"`
	PortQoSProfileBindingMap *PortQoSProfileBindingMap `json:"PortQoSProfileBindingMap"`
}

// Child wrapper object for PortSecurityProfileBindingMap, used in hierarchical API
type ChildPortSecurityProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete               bool                           `json:"marked_for_delete,omitempty"`
	PortSecurityProfileBindingMap *PortSecurityProfileBindingMap `json:"PortSecurityProfileBindingMap"`
}

// Child wrapper object for PrefixList, used in hierarchical API.
type ChildPrefixList struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	PrefixList      *PrefixList `json:"PrefixList"`
}

// Child wrapper object for QoSProfile, used in hierarchical API
type ChildQoSProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool        `json:"marked_for_delete,omitempty"`
	QoSProfile      *QoSProfile `json:"QoSProfile"`
}

// Child wrapper object for Reaction used in hierarchical API.
type ChildReaction struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool      `json:"marked_for_delete,omitempty"`
	Reaction        *Reaction `json:"Reaction"`
}

// Child wrapper object for RedirectionPolicy used in Hierarchical API.
type ChildRedirectionPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	RedirectionPolicy *RedirectionPolicy `json:"RedirectionPolicy"`
}

// Child wrapper object for ChildRedirectionRule used in Hierarchical API.
type ChildRedirectionRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	RedirectionRule *RedirectionRule `json:"RedirectionRule"`
}

// Represents a reference to ChildPolicyConfigResource in the hierarchical API. resource_type, id and target_type are mandatory fields.
type ChildResourceReference struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// The target type of this reference
	TargetType string `json:"target_type"`
}

// Child wrapper object for Rule, used in hierarchical API
type ChildRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool  `json:"marked_for_delete,omitempty"`
	Rule            *Rule `json:"Rule"`
}

// Child wrapper object for SecurityPolicy, used in hierarchical API
type ChildSecurityPolicy struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	SecurityPolicy  *SecurityPolicy `json:"SecurityPolicy"`
}

// Child wrapper object for SecurityZone, used in hierarchical API
type ChildSecurityZone struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	SecurityZone    *SecurityZone `json:"SecurityZone"`
}

// Child wrapper object for SecurityZoneBinding, used in hierarchical API
type ChildSecurityZoneBinding struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete     bool                 `json:"marked_for_delete,omitempty"`
	SecurityZoneBinding *SecurityZoneBinding `json:"SecurityZoneBinding"`
}

// Child wrapper object for SecurityZoneRule, used in hierarchical API This type is deprecated. Use the type ChildRule instead.
type ChildSecurityZoneRule struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	SecurityZoneRule *SecurityZoneRule `json:"SecurityZoneRule"`
}

// Child wrapper object for Segment, used in hierarchical API.
type ChildSegment struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool     `json:"marked_for_delete,omitempty"`
	Segment         *Segment `json:"Segment"`
}

// Child wrapper object for SegmentDiscoveryProfileBindingMap, used in hierarchical API
type ChildSegmentDiscoveryProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                   bool                               `json:"marked_for_delete,omitempty"`
	SegmentDiscoveryProfileBindingMap *SegmentDiscoveryProfileBindingMap `json:"SegmentDiscoveryProfileBindingMap"`
}

// Child wrapper object for SegmentMonitoringProfileBindingMap, used in hierarchical API
type ChildSegmentMonitoringProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                    bool                                `json:"marked_for_delete,omitempty"`
	SegmentMonitoringProfileBindingMap *SegmentMonitoringProfileBindingMap `json:"SegmentMonitoringProfileBindingMap"`
}

// Child wrapper object for SegmentPort, used in hierarchical API
type ChildSegmentPort struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool         `json:"marked_for_delete,omitempty"`
	SegmentPort     *SegmentPort `json:"SegmentPort"`
}

// Child wrapper object for SegmentQoSProfileBindingMap, used in hierarchical API
type ChildSegmentQoSProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete             bool                         `json:"marked_for_delete,omitempty"`
	SegmentQoSProfileBindingMap *SegmentQoSProfileBindingMap `json:"SegmentQoSProfileBindingMap"`
}

// Child wrapper object for SegmentSecurityProfile, used in hierarchical API
type ChildSegmentSecurityProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete        bool                    `json:"marked_for_delete,omitempty"`
	SegmentSecurityProfile *SegmentSecurityProfile `json:"SegmentSecurityProfile"`
}

// Child wrapper object for SegmentSecurityProfileBindingMap, used in hierarchical API
type ChildSegmentSecurityProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                  bool                              `json:"marked_for_delete,omitempty"`
	SegmentSecurityProfileBindingMap *SegmentSecurityProfileBindingMap `json:"SegmentSecurityProfileBindingMap"`
}

// Child wrapper object for Service, used in hierarchical API.
type ChildService struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool     `json:"marked_for_delete,omitempty"`
	Service         *Service `json:"Service"`
}

// Child wrapper object for ServiceEntry, used in hierarchical API.
type ChildServiceEntry struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	ServiceEntry    *ServiceEntry `json:"ServiceEntry"`
	Service         *ServiceEntry `json:"Service,omitempty"`
}

// Child wrapper object for ServiceInstanceEndpoint used in hierarchical API.
type ChildServiceInstanceEndpoint struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete         bool                     `json:"marked_for_delete,omitempty"`
	ServiceInstanceEndpoint *ServiceInstanceEndpoint `json:"ServiceInstanceEndpoint"`
}

// Child wrapper object for ServiceInterface, used in hierarchical API.
type ChildServiceInterface struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	ServiceInterface *ServiceInterface `json:"ServiceInterface"`
}

// Child wrapper object for ServiceReference used in hierarchical API.
type ChildServiceReference struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete  bool              `json:"marked_for_delete,omitempty"`
	ServiceReference *ServiceReference `json:"ServiceReference"`
}

// Child wrapper object for ServiceSegment, used in hierarchical API
type ChildServiceSegment struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	ServiceSegment  *ServiceSegment `json:"ServiceSegment"`
}

// Child wrapper object for SessionTimerProfileBindingMap, used in hierarchical API
type ChildSessionTimerProfileBindingMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete               bool                           `json:"marked_for_delete,omitempty"`
	SessionTimerProfileBindingMap *SessionTimerProfileBindingMap `json:"SessionTimerProfileBindingMap"`
}

// Child wrapper object for Site, used in hierarchical API.
type ChildSite struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool  `json:"marked_for_delete,omitempty"`
	Site            *Site `json:"Site"`
}

// Child wrapper object for SpoofGuardProfile, used in hierarchical API
type ChildSpoofGuardProfile struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete   bool               `json:"marked_for_delete,omitempty"`
	SpoofGuardProfile *SpoofGuardProfile `json:"SpoofGuardProfile"`
}

// Child wrapper for SslTrustObjectData, used in hierarchical API
type ChildSslTrustObjectData struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	SslTrustObjectData *SslTrustObjectData `json:"SslTrustObjectData"`
}

// Wrapper object for StandaloneHostIdfwConfiguration
type ChildStandaloneHostIdfwConfiguration struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete                 bool                             `json:"marked_for_delete,omitempty"`
	StandaloneHostIdfwConfiguration *StandaloneHostIdfwConfiguration `json:"StandaloneHostIdfwConfiguration"`
}

// Child wrapper object for StaticARPConfig, used in hierarchical API.
type ChildStaticArpConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	StaticARPConfig *StaticArpConfig `json:"StaticARPConfig"`
}

// Child wrapper for StaticRouteBfdPeer, used in hierarchical API.
type ChildStaticRouteBfdPeer struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool                `json:"marked_for_delete,omitempty"`
	BfdPeer         *StaticRouteBfdPeer `json:"BfdPeer"`
}

// Child wrapper object for StaticRoutes, used in hierarchical API.
type ChildStaticRoutes struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	StaticRoutes    *StaticRoutes `json:"StaticRoutes"`
}

// Child wrapper object for Tier-0, used in hierarchical API.
type ChildTier0 struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	Tier0           *Tier0 `json:"Tier0"`
}

// Child wrapper object for Tier0DeploymentMap, used in hierarchical API.
type ChildTier0DeploymentMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	Tier0DeploymentMap *Tier0DeploymentMap `json:"Tier0DeploymentMap"`
}

// Child wrapper object for Tier0Interface, used in hierarchical API.
type ChildTier0Interface struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	Tier0Interface  *Tier0Interface `json:"Tier0Interface"`
}

// Child wrapper object for Tier0RouteMap, used in hierarchical API
type ChildTier0RouteMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	Tier0RouteMap   *Tier0RouteMap `json:"Tier0RouteMap"`
}

// Child wrapper object for Tier-1 , used in hierarchical API.
type ChildTier1 struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	Tier1           *Tier1 `json:"Tier1"`
}

// Child wrapper object for Tier1DeploymentMap, used in hierarchical API.
type ChildTier1DeploymentMap struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete    bool                `json:"marked_for_delete,omitempty"`
	Tier1DeploymentMap *Tier1DeploymentMap `json:"Tier1DeploymentMap"`
}

// Child wrapper object for Tier1Interface, used in hierarchical API.
type ChildTier1Interface struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	Tier1Interface  *Tier1Interface `json:"Tier1Interface"`
}

// Child wrapper for TlsCertificate, used in hierarchical API.
type ChildTlsCertificate struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool            `json:"marked_for_delete,omitempty"`
	TlsCertificate  *TlsCertificate `json:"TlsCertificate"`
}

// Child wrapper for TlsCrl, used in hierarchical API.
type ChildTlsCrl struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool    `json:"marked_for_delete,omitempty"`
	TlsCrl          *TlsCrl `json:"TlsCrl"`
}

// Child wrapper for TlsTrustData, used in hierarchical API.
type ChildTlsTrustData struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	TlsTrustData    *TlsTrustData `json:"TlsTrustData"`
}

// Child wrapper for TraceflowConfig, used in hierarchical API
type ChildTraceflowConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	TraceflowConfig *TraceflowConfig `json:"TraceflowConfig"`
}

// Child wrapper object for VHC, used in hierarchical API
type ChildVhc struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	Vhc             *Vhc `json:"Vhc"`
}

// Child wrapper object for VhcDnsConfig, used in hierarchical API
type ChildVhcDnsConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	VhcDnsConfig    *VhcDnsConfig `json:"VhcDnsConfig"`
}

// Child wrapper object for VirtualEndpoint used in hierarchical API.
type ChildVirtualEndpoint struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool             `json:"marked_for_delete,omitempty"`
	VirtualEndpoint *VirtualEndpoint `json:"VirtualEndpoint"`
}

// Child wrapper object for VniPoolConfig, used in hierarchical API.
type ChildVniPoolConfig struct {
	ResourceType string `json:"resource_type"`
	// If this field is set to true, delete operation is triggered on the intent tree. This resource along with its all children in intent tree will be deleted. This is a cascade delete and should only be used if intent object along with its all children are to be deleted. This does not support deletion of single non-leaf node within the tree and should be used carefully.
	MarkedForDelete bool           `json:"marked_for_delete,omitempty"`
	VniPoolConfig   *VniPoolConfig `json:"VniPoolConfig"`
}

// DHCP classless static route option.
type ClasslessStaticRoute struct {
	// IP address of next hop of the route.
	NextHop string `json:"next_hop"`
	// Destination network in CIDR format.
	Network string `json:"network"`
}

// Stores the information about cloud native service instance.
type CloudNativeServiceInstance struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Type of cloud native service.
	ServiceType string             `json:"service_type,omitempty"`
	Source      *ResourceReference `json:"source,omitempty"`
	// Id of service instance fetched from public cloud.
	ExternalId string `json:"external_id,omitempty"`
}

// Cluster backup details
type ClusterBackupInfo struct {
	// timestamp of the cluster backup file
	Timestamp int64 `json:"timestamp,omitempty"`
	// ID of the node from which the backup was taken
	NodeId string `json:"node_id,omitempty"`
	// IP address or FQDN of the node from which the backup was taken
	IpAddress string `json:"ip_address,omitempty"`
	// Type of restore allowed
	RestoreType []string `json:"restore_type,omitempty"`
}

type ClusterBackupInfoListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of timestamps of backed-up cluster files
	Results []ClusterBackupInfo `json:"results,omitempty"`
}

// Cluster restore status
type ClusterRestoreStatus struct {
	Status *GlobalRestoreStatus `json:"status,omitempty"`
	Step   *RestoreStep         `json:"step,omitempty"`
	// The list of allowed endpoints, based on the current state of the restore process
	Endpoints []ResourceLink `json:"endpoints,omitempty"`
	// Total number of steps in the entire restore process
	TotalSteps int64 `json:"total_steps,omitempty"`
	// Timestamp when restore was started in epoch millisecond
	RestoreStartTime int64 `json:"restore_start_time,omitempty"`
	// Timestamp when restore was completed in epoch millisecond
	RestoreEndTime int64 `json:"restore_end_time,omitempty"`
	// Timestamp when backup was initiated in epoch millisecond
	BackupTimestamp int64 `json:"backup_timestamp,omitempty"`
	// Unique id for backup request
	Id string `json:"id,omitempty"`
	// Instructions for users to reconcile Restore operations
	Instructions []InstructionInfo `json:"instructions,omitempty"`
}

// Represents a column of the Grid
type ColumnItem struct {
	// Sorting on column is based on the sort_key. sort_key represents the field in the output data on which sort is requested.
	SortKey string `json:"sort_key,omitempty"`
	// Data type of the field.
	Type_ string `json:"type"`
	// Multi-line text to be shown on tooltip while hovering over a cell in the grid.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
	Label   *Label    `json:"label"`
	// Field from which values of the column will be derived.
	Field string `json:"field"`
	// If true, the value of the column are sorted in ascending order. Otherwise, in descending order.
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// If set to true, hides the column
	Hidden bool `json:"hidden,omitempty"`
	// Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.
	Navigation string `json:"navigation,omitempty"`
	// Identifies the column and used for fetching content upon an user click or drilldown. If column identifier is not provided, the column's data will not participate in searches and drilldowns.
	ColumnIdentifier string `json:"column_identifier,omitempty"`
	// Render configuration to be applied, if any.
	RenderConfiguration []RenderConfiguration `json:"render_configuration,omitempty"`
}

// A communication entry indicates the action to be performed for various types of traffic flowing between workload groups. This type is deprecated. Use the type Rule instead.
type CommunicationEntry struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains.In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// The action to be applied to all the services.
	Action string `json:"action,omitempty"`
	// The list of policy paths where the communication entry is applied Edge/LR/T0/T1/LRP/CGW/MGW/etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between multiple CommunicationEntries under CommunicationMap for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple communication entries with the same sequence number then their order is not deterministic. If a specific order of communication entry is desired, then one has to specify unique sequence numbers or use the POST request on the communication entry entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
}

// This type is deprecated. Use the type RuleListResult instead.
type CommunicationEntryListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// CommunicationEntry list results
	Results []CommunicationEntry `json:"results"`
}

// Parameters to let the admin specify a relative position of a communication map or communication entry w.r.t to another one. This type is deprecated. Use the type RuleInsertParameters instead.
type CommunicationInsertParameters struct {
	// The communication map/communication entry path if operation is 'insert_after' or 'insert_before'
	AnchorPath string `json:"anchor_path,omitempty"`
	// Operation
	Operation string `json:"operation,omitempty"`
}

// Ordered list of CommunicationEntries. This object is created by default along with the Domain. This type is deprecated. Use the type SecurityPolicy instead.
type CommunicationMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// CommunicationEntries that are a part of this CommunicationMap
	CommunicationEntries []CommunicationEntry `json:"communication_entries,omitempty"`
	// - Distributed Firewall - Policy framework for Distributed Firewall provides four pre-defined categories for classifying a communication map. They are \"Emergency\", \"Infrastructure\", \"Environment\" and \"Application\". Amongst the layer 3 communication maps,there is a pre-determined order in which the policy framework manages the priority of these communication maps. Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a communication  map into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four layer 3 categories.
	Category string `json:"category,omitempty"`
	// This field is used to resolve conflicts between communication maps across domains. In order to change the precedence of a communication map one can fire a POST request on the communication map entity with a query parameter action=revise The precedence field will reflect the value of the computed precedence upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several communication maps, the only way to set the precedence is to explicitly specify the precedence number for each communication map. If no precedence is specified in the payload, a value of 0 is assigned by default. If there are multiple communication maps with the same precedence then their order is not deterministic. If a specific order of communication map is desired, then one has to specify a unique precedence or use the POST request on the communication map entity with a query parameter action=revise to let the framework assign a precedence
	Precedence int32 `json:"precedence,omitempty"`
}

// This type is deprecated. Use the type SecurityPolicyListResult instead.
type CommunicationMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// CommunicationMap list results
	Results []CommunicationMap `json:"results"`
}

// Community list for BGP routing configuration
type CommunityList struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of BGP community entries. Both standard and large communities are supported. Standard community format: aa:nn where aa and nn must be within the range [1 - 65536]. Large BGP Community format: aa:bb:nn where aa (Global Administrator), bb  (Local Data Part 1) and nn (Local Data Part 2) must be within the range [1 - 4294967295]. In additon to numbered communites (e.g. 3356:2040), predefined communities (NO_EXPORT, NO_ADVERTISE, NO_EXPORT_SUBCONFED) are supported.
	Communities []string `json:"communities"`
}

// Paged collection of CommunityLists
type CommunityListListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// CommunityList results
	Results []CommunityList `json:"results"`
}

// Match criteria based on a community list
type CommunityMatchCriteria struct {
	// Match operator for community list entries. Not valid when a regular expression is specified for criteria.
	MatchOperator string `json:"match_operator,omitempty"`
	// Match criteria specified as a community list path or a regular expression.
	Criteria string `json:"criteria"`
}

// Idfw configuration for enable/disable idfw on cluster level.
type ComputeClusterIdfwConfiguration struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool                     `json:"marked_for_delete,omitempty"`
	Member          *PolicyResourceReference `json:"member"`
	// If set to true, idfw is enabled for this cluster
	ClusterIdfwEnabled bool `json:"cluster_idfw_enabled"`
}

// Paged collection of compute cluster idfw configuration
type ComputeClusterIdfwConfigurationListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Compute cluster wise identity firewall configuration list results
	Results []ComputeClusterIdfwConfiguration `json:"results"`
}

type ComputeCollection struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Id of the compute manager from where this Compute Collection was discovered
	OriginId string `json:"origin_id,omitempty"`
	// Key-Value map of additional specific properties of compute collection in the Compute Manager
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// External ID of the ComputeCollection in the source Compute manager, e.g. mo-ref in VC
	ExternalId string `json:"external_id,omitempty"`
	// Id of the owner of compute collection in the Compute Manager
	OwnerId string `json:"owner_id,omitempty"`
	// ComputeCollection type like VC_Cluster. Here the Compute Manager type prefix would help in differentiating similar named Compute Collection types from different Compute Managers
	OriginType string `json:"origin_type,omitempty"`
	// Local Id of the compute collection in the Compute Manager
	CmLocalId string `json:"cm_local_id,omitempty"`
}

// Represents the leaf level condition. Evaluation of the condition expression will be case insensitive.
type Condition struct {
	ResourceType string `json:"resource_type"`
	// operator
	Operator string `json:"operator"`
	// Value
	Value string `json:"value"`
	// Key
	Key string `json:"key"`
	// Group member type
	MemberType string `json:"member_type"`
}

// Represents the leaf level expression to restrict the target attribute value based on the set of existing values. Generally, used in combination with RelatedAttributeConditionalExpression to constraint the values related to another attribute on the same resource. This object is always used in conjunction with some exression. Example - {   \"condition\" : {       \"operator\":\"INCLUDES\",       \"rhs_value\": [\"/infra/domains/mgw/groups/VCENTER\", \"/infra/domains/mgw/groups/SRM\", \"/infra/domains/mgw/groups/NSX\"],       \"value_constraint\": {           \"resource_type\": \"ValueConstraintExpression\",           \"operator\":\"EXCLUDES\",           \"values\":[\"/infra/domains/mgw/groups/VCENTER\", \"/infra/domains/mgw/groups/SRM\", \"/infra/domains/mgw/groups/NSX\"]   } }
type ConditionalValueConstraintExpression struct {
	// Set operation to constraint values.
	Operator        string                     `json:"operator"`
	ValueConstraint *ValueConstraintExpression `json:"value_constraint"`
	// List of values.
	RhsValue []string `json:"rhs_value"`
}

// Describes status of configuration of an entity
type ConfigurationState struct {
	// Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State string `json:"state,omitempty"`
	// Array of configuration state of various sub systems
	Details []ConfigurationStateElement `json:"details,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
}

// Describes status of configuration of an entity
type ConfigurationStateElement struct {
	// URI of backing resource on sub system
	SubSystemAddress string `json:"sub_system_address,omitempty"`
	// State of configuration on this sub system
	State string `json:"state,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Name of backing resource on sub system
	SubSystemName string `json:"sub_system_name,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
	// Type of backing resource on sub system
	SubSystemType string `json:"sub_system_type,omitempty"`
	// Identifier of backing resource on sub system
	SubSystemId string `json:"sub_system_id,omitempty"`
}

// Represents the operators AND or OR.
type ConjunctionOperator struct {
	ResourceType string `json:"resource_type"`
	// Conjunction Operator Node
	ConjunctionOperator string `json:"conjunction_operator"`
}

// Advanced configuration for Policy connectivity
type ConnectivityAdvancedConfig struct {
	// Connectivity configuration to manually connect (ON) or disconnect (OFF) a logical entity from network topology. Only valid for Tier1 Segment.
	Connectivity string `json:"connectivity,omitempty"`
}

// Consolidated Realized Status of an intent object across enforcement points.
type ConsolidatedRealizedStatus struct {
	// Intent path of object, forward slashes must be escaped using %2F.
	IntentPath         string              `json:"intent_path,omitempty"`
	ConsolidatedStatus *ConsolidatedStatus `json:"consolidated_status,omitempty"`
	// List of Consolidated Realized Status per enforcement point.
	ConsolidatedStatusPerEnforcementPoint []ConsolidatedStatusPerEnforcementPoint `json:"consolidated_status_per_enforcement_point,omitempty"`
}

// Consolidated Status of an intent object. Status Consolidation of an intent happens at multiple levels: - Per Enforcement Point: calculation of the consolidated status is performed using all realized entities that the intent objet maps to on a specific enforcement point. - Across Enforcement Points: calculation of the consolidated status is performend aggregating the consolidated status from each enforcement point.
type ConsolidatedStatus struct {
	// Consolidated Realized Status of an intent object.
	ConsolidatedStatus string `json:"consolidated_status,omitempty"`
}

// Detailed Realized Status of an intent object on an NSX-T type of enforcement point.
type ConsolidatedStatusNsxT struct {
	EnforcedStatus *EnforcedStatusDetailsNsxT `json:"enforced_status,omitempty"`
}

// Consolidated Realized Status Per Enforcement Point.
type ConsolidatedStatusPerEnforcementPoint struct {
	// The site where this enforcement point resides.
	SitePath           string              `json:"site_path,omitempty"`
	ConsolidatedStatus *ConsolidatedStatus `json:"consolidated_status,omitempty"`
	ResourceType       string              `json:"resource_type"`
	// Enforcement Point Id.
	EnforcementPointId string `json:"enforcement_point_id,omitempty"`
}

// Constant Field Value.
type ConstantFieldValue struct {
	// Field Setting Value resource type.
	ResourceType string `json:"resource_type"`
	// Constant Value that the field must be set to.
	Constant *interface{} `json:"constant,omitempty"`
}

// Constraint object to constraint any attribute on a resource based on specified expression. Example- Restrict the allowed services in Edge Communication Entry to list of  services, if the destinationGroups contain vCenter. {   \"target\":{      \"target_resource_type\":\"CommunicationEntry\",      \"attribute\":\"services\",      \"path_prefix\":\"/infra/domains/vmc-domain/edge-communication-maps/default/communication-entries\"   }   \"constraint_expression\":{     \"related_attribute\":{       \"attribute\":\"destinationGroups\"     }     \"condition\":{       \"operator\":\"INCLUDES\",       \"rhs_value\":{\"vCenter\"}       \"value_constraint\":{           \"operator\":\"ALLOW\",           \"values\":{\"/ref/services/HTTPS\", \"/ref/services/HTTOP\", ...}      }     }   } }
type Constraint struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// User friendly message to be shown to users upon violation.
	Message              string                `json:"message,omitempty"`
	ConstraintExpression *ConstraintExpression `json:"constraint_expression"`
	Target               *ConstraintTarget     `json:"target"`
}

// All the types of the expression extend from this abstract class. This is present for extensibility.
type ConstraintExpression struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id           string `json:"id,omitempty"`
	ResourceType string `json:"resource_type"`
}

// Paged Collection of Constraints
type ConstraintListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Constraint list results
	Results []Constraint `json:"results"`
}

// Resource attribute on which constraint should be applied. Example - sourceGroups attribute of Edge CommunicationEntry to be   restricted, is given as:   {      \"target_resource_type\":\"CommunicationEntry\",      \"attribute\":\"sourceGroups\",      \"path_prefix\":\"/infra/domains/vmc-domain/edge-communication-maps/default/communication-entries\"   }
type ConstraintTarget struct {
	// Attribute name of the target entity.
	Attribute string `json:"attribute,omitempty"`
	// Path prefix of the entity to apply constraint. This is required to further disambiguiate if multiple policy entities share the same resource type. Example - Edge FW and DFW use the same resource type CommunicationMap, CommunicationEntry, Group, etc.
	PathPrefix string `json:"path_prefix,omitempty"`
	// Resource type of the target entity.
	TargetResourceType string `json:"target_resource_type"`
}

// Container application within a project.
type ContainerApplication struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Status of the container application.
	Status string `json:"status,omitempty"`
	// Network status of container application.
	NetworkStatus string `json:"network_status,omitempty"`
	// Identifier of the container cluster this container application belongs to.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// Array of additional specific properties of container application in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// Identifier of the container application on container cluster e.g. PCF app id, k8s service id.
	ExternalId string `json:"external_id"`
	// Identifier of the project which this container application belongs to.
	ContainerProjectId string `json:"container_project_id,omitempty"`
	// List of network errors related to container application.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
}

// Container application instance within a project.
type ContainerApplicationInstance struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Status of the container application instance.
	Status string `json:"status,omitempty"`
	// Network status of container application instance.
	NetworkStatus string `json:"network_status,omitempty"`
	// Identifier of the container cluster this application instance belongs to.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// Cluster node id where application instance is running.
	ClusterNodeId string `json:"cluster_node_id,omitempty"`
	// Identifier of the container application instance on container cluster.
	ExternalId string `json:"external_id"`
	// Array of additional specific properties of container application instance in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// List of identifiers of the container application.
	ContainerApplicationIds []string `json:"container_application_ids,omitempty"`
	// Identifier of the container project which this container application instance belongs to.
	ContainerProjectId string `json:"container_project_id,omitempty"`
	// List of network errors related to container application instance.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
}

// Details of container cluster.
type ContainerCluster struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Network status of container cluster.
	NetworkStatus  string                       `json:"network_status,omitempty"`
	Infrastructure *ContainerInfrastructureInfo `json:"infrastructure,omitempty"`
	// Type of the container cluster. In case of creating container cluster first time, it is expected to pass the valid cluster-type. In case of update, if there is no change in cluster-type, then this field can be omitted in the request.
	ClusterType string `json:"cluster_type,omitempty"`
	// Array of additional specific properties of container cluster in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// External identifier of the container cluster.
	ExternalId string `json:"external_id,omitempty"`
	// List of network errors related to container cluster.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
}

// Details of container cluster node i.e. container host.
type ContainerClusterNode struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Network status of container cluster node.
	NetworkStatus string `json:"network_status,omitempty"`
	// External identifier of the container cluster.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// List of IP addresses of container cluster node.
	IpAddresses []string `json:"ip_addresses,omitempty"`
	// Array of additional specific properties of container cluster node in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// External identifier of the container cluster node in K8S/PAS.
	ExternalId string `json:"external_id"`
	// List of network errors related to container cluster node.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
}

// Represents a container to group widgets that belong to a common category or have a common purpose.
type ContainerConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// If not specified, creates an empty container.
	Widgets []WidgetItem `json:"widgets,omitempty"`
	Layout  *Layout      `json:"layout,omitempty"`
	// Labels for the container.
	Labels []Label `json:"labels,omitempty"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string  `json:"navigation,omitempty"`
	Header     *Header `json:"header,omitempty"`
}

// Details of infrastructure hosting the container cluster e.g. vSphere, AWS, VMC etc..
type ContainerInfrastructureInfo struct {
	// Type of the infrastructure.
	InfraType string `json:"infra_type"`
}

// Details of Container Ingress Policy.
type ContainerIngressPolicy struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Network status of container ingress.
	NetworkStatus string `json:"network_status,omitempty"`
	// Identifier of the container cluster this ingress policy belongs to.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// List of identifiers of the container application , on which ingress policy is applied. e.g. IDs of all services on which the ingress is applied in kubernetes.
	ContainerApplicationIds []string `json:"container_application_ids,omitempty"`
	// Array of additional specific properties of container ingress in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// Identifier of the container ingress policy.
	ExternalId string `json:"external_id"`
	// Identifier of the project which this container ingress belongs to.
	ContainerProjectId string `json:"container_project_id,omitempty"`
	// List of network errors related to container ingress.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
	// Container ingress policy specification.
	Spec string `json:"spec,omitempty"`
}

// Network policy applied to container.
type ContainerNetworkPolicy struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Network status of container network policy.
	NetworkStatus string `json:"network_status,omitempty"`
	// Identifier of the container cluster this network policy belongs to.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// Type e.g. Network Policy, ASG.
	PolicyType string `json:"policy_type,omitempty"`
	// Array of additional specific properties of container network policy in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// Identifier of the container network policy.
	ExternalId string `json:"external_id"`
	// Identifier of the project which this network policy belongs to.
	ContainerProjectId string `json:"container_project_id,omitempty"`
	// List of network errors related to container network policy.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
	// Container network policy specification.
	Spec string `json:"spec,omitempty"`
}

// Details of org/namespace within a container cluster.
type ContainerProject struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// Network status of container project.
	NetworkStatus string `json:"network_status,omitempty"`
	// Identifier of the container cluster to which this project/namespace belongs.
	ContainerClusterId string `json:"container_cluster_id,omitempty"`
	// Array of additional specific properties of container project in key-value format.
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// External identifier of the container project.
	ExternalId string `json:"external_id"`
	// List of network errors related to container project.
	NetworkErrors []NetworkError `json:"network_errors,omitempty"`
}

// Event Criterion is the logical evaluations by which the event may be deemed fulfilled. All the evaluations must be met in order for the criterion to be met (implicit AND).
type Criterion struct {
	// Criterion Evaluations.
	Evaluations []Evaluation `json:"evaluations"`
}

// Base type for CSV result.
type CsvListResult struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string `json:"file_name,omitempty"`
}

// Base type for CSV records.
type CsvRecord struct {
}

// Current backup operation status
type CurrentBackupOperationStatus struct {
	// Current step of operation
	CurrentStep string `json:"current_step,omitempty"`
	// Unique identifier of current backup
	BackupId string `json:"backup_id,omitempty"`
	// Additional human-readable status information about current step
	CurrentStepMessage string `json:"current_step_message,omitempty"`
	// Time when operation is expected to end
	EndTime int64 `json:"end_time,omitempty"`
	// Type of operation that is in progress. Returns none if no operation is in progress, in which case none of the other fields will be set.
	OperationType string `json:"operation_type"`
	// Time when operation was started
	StartTime int64 `json:"start_time,omitempty"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type CustomPolicyLbPersistenceProfile struct {
	ResourceType string `json:"resource_type"`
	// Persistence shared setting indicates that all PolicyLbVirtualServers that consume this PolicyLbPersistenceProfile should share the same persistence mechanism when enabled.  Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first.  When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistenct type, the persistence table will be shared across virtual servers.
	PersistenceShared bool `json:"persistence_shared,omitempty"`
	// This field indicates the persistence method used for the PolicyLbVirtualServer. - COOKIE persistence allows related client connections, identified by the same cookie in HTTP requests [Refer to HTTP Cookie for details on HTTP cookies], to be redirected to the same server. Load balancer does not maintain any persistence table for cookie persistence. Instead, it encodes the necessary information in the HTTP cookie value sent to client and relies on the client to store it and send it back in subsequent related HTTP requests. Hence there is no limit on the number of cookie persistence entries that can be supported. - SOURCE_IP persistence ensures all connections from a client (identified by IP address) are sent to the same backend server for a specified period. - This object is not required and without creation of this object the virtual server persistence is disabled by default
	Persistence string `json:"persistence"`
}

// Virtual server acts as a facade to an application, receives all client connections over a specified protocol and distributes them among the backend servers.  This custom type allows for more complex settings than the simplified PolicyLbVirtualServer types.  This object allows for complex configurations for PolicyLbVirtualServers of all types. All HTTP specific inputs will be rejected when combined with TPC or UDP protocols.
type CustomPolicyLbVirtualServer struct {
	// Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader bool `json:"insert_client_ip_header,omitempty"`
	// The setting is used when load balancer acts as an SSL server and terminating the client SSL connection.  A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultClientSslCertificateId string `json:"default_client_ssl_certificate_id,omitempty"`
	// As the custom type allows for more complex settings than the simplified PolicyLbVirtualServer types, also specify the desired protocol for receiving all client connections.
	AppProtocol string `json:"app_protocol"`
	// Security settings representing various security settings when the VirtualServer acts as an SSL server - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317
	ClientSslSettings string `json:"client_ssl_settings,omitempty"`
	// To support client authentication (load balancer acting as a client authenticating to the backend server), server_ssl_certificate_id can be specified.  When supplied, the backend server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified. This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP.
	ServerAuthCaCertificateIds []string `json:"server_auth_ca_certificate_ids,omitempty"`
	// Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. The setting is used when load balancer acts as an SSL server and terminating the client SSL connection
	ClientSslCertificateIds []string `json:"client_ssl_certificate_ids,omitempty"`
	// Indicates whether to enable server side SSL.  Server side SSL will be enabled when a specific security setting is selected. The selected security setting or profile represents various configurations related to SSL when the VirtualServer acts as a client connecting over SSL to the backend server.  This setting is only applicable for L7 protocols and will be rejected in combination with TCP or UDP. - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317 - DISABLED
	ServerSslSettings string `json:"server_ssl_settings,omitempty"`
}

// Represents configuration for custom widget. For this widget the data source is not applicable. It defines ui identifer to identify UI component and render it on dashboard view. This configuration can only be used for system owned widgets.
type CustomWidgetConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// User defined component selector to be rendered inside view/container.
	UiComponentIdentifier string `json:"ui_component_identifier,omitempty"`
}

// Credential info to connect to a CVX type of enforcement point.
type CvxConnectionInfo struct {
	// Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress string `json:"enforcement_point_address"`
	// Resource Type of Enforcement Point Connection Info.
	ResourceType string `json:"resource_type"`
	// Username.
	Username string `json:"username,omitempty"`
	// Password.
	Password string `json:"password,omitempty"`
	// Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint string `json:"thumbprint,omitempty"`
}

type DataCounter struct {
	// The total packets or bytes
	Total int64 `json:"total"`
	// The multicast and broadcast packets or bytes
	MulticastBroadcast int64 `json:"multicast_broadcast,omitempty"`
	// The dropped packets or bytes
	Dropped int64 `json:"dropped,omitempty"`
}

type DataSourceParameters struct {
	// The data source, either realtime or cached. If not provided, cached data is returned.
	Source string `json:"source,omitempty"`
}

// An instance of a datasource configuration.
type Datasource struct {
	// Name of a datasource instance.
	DisplayName string `json:"display_name"`
	// Array of urls relative to the datasource configuration. For example, api/v1/fabric/nodes is a relative url of nsx-manager instance.
	Urls []UrlAlias `json:"urls"`
}

// An instance of a datasource configuration.
type DefaultFilterValue struct {
	// Filter alias.
	Alias string `json:"alias"`
	// Filter default value.
	Value string `json:"value"`
}

// Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX.
type DeploymentTemplate struct {
	// List of attributes specific to a partner for which the service is created. There attributes are passed on to the partner appliance and is opaque to the NSX Manager.
	Attributes []Attribute `json:"attributes,omitempty"`
	// Deployment Template name.
	Name string `json:"name,omitempty"`
}

// Logical grouping of enforcement points. This is a deprecated type. DeploymentZone has been renamed to Site. Use Site.
type DeploymentZone struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Logical grouping of enforcement points
	EnforcementPoints []EnforcementPoint `json:"enforcement_points,omitempty"`
}

// Paged Collection of Deployment Zones. This is a deprecated type. DeploymentZone has been renamed to Site. Use SiteListResult.
type DeploymentZoneListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Deployment Zones
	Results []DeploymentZone `json:"results"`
}

// DFW Firewall related configurations
type DfwFirewallConfiguration struct {
	// To disable auto drafts, set it to true. By default, auto drafts are enabled.
	DisableAutoDrafts bool   `json:"disable_auto_drafts,omitempty"`
	ResourceType      string `json:"resource_type"`
	// If set to true, Firewall is enabled.
	EnableFirewall bool `json:"enable_firewall,omitempty"`
	// If set to true, identity firewall is enabled.
	IdfwEnabled bool `json:"idfw_enabled,omitempty"`
}

type DhcpHeader struct {
	// This is used to specify the general type of message. A client sending request to a server uses an op code of BOOTREQUEST, while a server replying uses an op code of BOOTREPLY.
	OpCode string `json:"op_code,omitempty"`
}

type DhcpIpPoolUsage struct {
	// allocated percentage. COULD BE INACCURATE, REFERENCE ONLY.
	AllocatedPercentage int64 `json:"allocated_percentage"`
	// pool size
	PoolSize int64 `json:"pool_size"`
	// allocated number. COULD BE INACCURATE, REFERENCE ONLY.
	AllocatedNumber int64 `json:"allocated_number"`
	// uuid of dhcp ip pool
	DhcpIpPoolId string `json:"dhcp_ip_pool_id"`
}

type DhcpLeasePerIp struct {
	// subnet of client network
	Subnet string `json:"subnet,omitempty"`
	// lease time of the ip address, in seconds
	LeaseTime string `json:"lease_time,omitempty"`
	// mac address of client
	MacAddress string `json:"mac_address"`
	// expire time of the lease
	ExpireTime string `json:"expire_time,omitempty"`
	// start time of lease
	StartTime string `json:"start_time"`
	// ip address of client
	IpAddress string `json:"ip_address"`
}

type DhcpLeases struct {
	// timestamp of the lease info
	Timestamp int64 `json:"timestamp,omitempty"`
	// The lease info list of the server
	Leases []DhcpLeasePerIp `json:"leases,omitempty"`
	// dhcp server uuid
	DhcpServerId string `json:"dhcp_server_id,omitempty"`
}

type DhcpLeasesResult struct {
	// timestamp of the lease info
	Timestamp int64 `json:"timestamp,omitempty"`
	// The lease info list of the server
	Leases []DhcpLeasePerIp `json:"leases,omitempty"`
	// dhcp server uuid
	DhcpServerId string `json:"dhcp_server_id,omitempty"`
	// Policy path to Segment, Tier0 or Tier1 gateway where DHCP server is attached.
	ConnectivityPath string `json:"connectivity_path,omitempty"`
}

// DHCP option 121 to define classless static route.
type DhcpOption121 struct {
	// Classless static route of DHCP option 121.
	StaticRoutes []ClasslessStaticRoute `json:"static_routes"`
}

// DHCP relay configuration. Please note, the realized-state of this entity returned by the \"GET /policy/api/v1/infra/realized-state/realized-entity\" with this entity policy-path is irrelevant with the application status of this entity. Please do not rely on this returned realized-state to determine how this dhcp-relay-config was applied. The dhcp realization information was reflected in the realization states of the referencing Segment or T0/T1 gateway.
type DhcpRelayConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// DHCP server IP addresses for DHCP relay configuration. Both IPv4 and IPv6 addresses are supported.
	ServerAddresses []string `json:"server_addresses"`
}

// Paged collection of DhcpRelayConfigs
type DhcpRelayConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// DhcpRelayConfig results
	Results []DhcpRelayConfig `json:"results"`
}

// DHCP server configuration. Please note, the realized-state of this entity returned by the \"GET /policy/api/v1/infra/realized-state/realized-entity\" with this entity policy-path is irrelevant with the application status of this entity. Please do not rely on this returned realized-state to determine how this dhcp-server-config was applied. The dhcp realization information was reflected in the realization states of the referencing Segment or T0/T1 gateway.
type DhcpServerConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// DHCP server address in CIDR format. Both IPv4 and IPv6 address families are supported. Prefix length should be less than or equal to 30 for IPv4 address family and less than or equal to 126 for IPv6. When not specified, IPv4 value is auto-assigned to 100.96.0.1/30. Ignored when this object is configured at a Segment.
	ServerAddresses []string `json:"server_addresses,omitempty"`
	// Policy paths to edge nodes on which the DHCP servers run. The first edge node is assigned as active edge, and second one as stanby edge. If only one edge node is specified, the DHCP servers will run without HA support. When this property is not specified, edge nodes are auto-assigned during realization of the DHCP server.
	PreferredEdgePaths []string `json:"preferred_edge_paths,omitempty"`
	// DHCP server address in CIDR format. Prefix length should be less than or equal to 30. DHCP server is deployed as DHCP relay service. This property is deprecated, use server_addresses instead. Both properties cannot be specified together with different new values.
	ServerAddress string `json:"server_address,omitempty"`
	// Edge cluster path. Auto assigned if only one edge cluster is configured on enforcement-point. Modifying edge cluster will reallocate DHCP server to the new edge cluster. Please note that re-allocating edge-cluster will result in losing of all exisitng DHCP lease information. Change edge cluster only when losing DHCP leases is not a real problem, e.g. cross-site migration or failover and all client hosts will be reboot and get new IP addresses.
	EdgeClusterPath string `json:"edge_cluster_path,omitempty"`
	// IP address lease time in seconds.
	LeaseTime int64 `json:"lease_time,omitempty"`
}

// Paged collection of DhcpServerConfigs
type DhcpServerConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// DhcpServerConfig results
	Results []DhcpServerConfig `json:"results"`
}

type DhcpServerState struct {
	// Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State string `json:"state,omitempty"`
	// Array of configuration state of various sub systems
	Details []ConfigurationStateElement `json:"details,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
}

type DhcpServerStatistics struct {
	// The total number of DHCP errors
	Errors int64 `json:"errors"`
	// The total number of DHCP RELEASE packets
	Releases int64 `json:"releases"`
	// The total number of DHCP INFORM packets
	Informs int64 `json:"informs"`
	// The total number of DHCP DECLINE packets
	Declines int64 `json:"declines"`
	// dhcp server uuid
	DhcpServerId string `json:"dhcp_server_id"`
	// The total number of DHCP NACK packets
	Nacks int64 `json:"nacks"`
	// The total number of DHCP OFFER packets
	Offers int64 `json:"offers"`
	// The total number of DHCP DISCOVER packets
	Discovers int64 `json:"discovers"`
	// The total number of DHCP ACK packets
	Acks int64 `json:"acks"`
	// timestamp of the statistics
	Timestamp int64 `json:"timestamp"`
	// The total number of DHCP REQUEST packets
	Requests int64 `json:"requests"`
	// The DHCP ip pool usage statistics
	IpPoolStats []DhcpIpPoolUsage `json:"ip_pool_stats,omitempty"`
}

type DhcpServerStatus struct {
	// Error message, if available
	ErrorMessage string `json:"error_message,omitempty"`
	// UP means the dhcp service is working fine on both active transport-node and stand-by transport-node (if have), hence fail-over can work at this time if there is failure happens on one of the transport-node; DOWN means the dhcp service is down on both active transport-node and stand-by node (if have), hence the dhcp-service will not repsonse any dhcp request; Error means error happens on transport-node(s) or no status is reported from transport-node(s). The dhcp service may be working (or not working); NO_STANDBY means dhcp service is working in one of the transport node while not in the other transport-node (if have). Hence if the dhcp service in the working transport-node is down, fail-over will not happen and the dhcp service will go down.
	ServiceStatus string `json:"service_status"`
	// uuid of stand_by transport node. null if non-HA mode
	StandByNode string `json:"stand_by_node,omitempty"`
	// uuid of active transport node
	ActiveNode string `json:"active_node"`
}

// DHCP IPv4 and IPv6 static bindings are extended from this abstract class.
type DhcpStaticBindingConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	ResourceType    string `json:"resource_type"`
}

type DhcpStaticBindingConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of DhcpStaticBindingConfig
	Results []DhcpStaticBindingConfig `json:"results"`
}

type DhcpStaticBindingState struct {
	// Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State string `json:"state,omitempty"`
	// Array of configuration state of various sub systems
	Details []ConfigurationStateElement `json:"details,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
}

type DhcpStatistics struct {
	// The total number of DHCP errors
	Errors int64 `json:"errors"`
	// The total number of DHCP RELEASE packets
	Releases int64 `json:"releases"`
	// The total number of DHCP INFORM packets
	Informs int64 `json:"informs"`
	// The total number of DHCP DECLINE packets
	Declines int64 `json:"declines"`
	// dhcp server uuid
	DhcpServerId string `json:"dhcp_server_id"`
	// The total number of DHCP NACK packets
	Nacks int64 `json:"nacks"`
	// The total number of DHCP OFFER packets
	Offers int64 `json:"offers"`
	// The total number of DHCP DISCOVER packets
	Discovers int64 `json:"discovers"`
	// The total number of DHCP ACK packets
	Acks int64 `json:"acks"`
	// timestamp of the statistics
	Timestamp int64 `json:"timestamp"`
	// The total number of DHCP REQUEST packets
	Requests int64 `json:"requests"`
	// The DHCP ip pool usage statistics
	IpPoolStats []DhcpIpPoolUsage `json:"ip_pool_stats,omitempty"`
}

// DHCP options for IPv4 server.
type DhcpV4Options struct {
	Option121 *DhcpOption121 `json:"option121,omitempty"`
	// To define DHCP options other than option 121 in generic format. Please note, only the following options can be defined in generic format. Those other options will be accepted without validation but will not take effect. --------------------------   Code    Name --------------------------     2   Time Offset     6   Domain Name Server     13  Boot File Size     19  Forward On/Off     26  MTU Interface     28  Broadcast Address     35  ARP Timeout     40  NIS Domain     41  NIS Servers     42  NTP Servers     44  NETBIOS Name Srv     45  NETBIOS Dist Srv     46  NETBIOS Node Type     47  NETBIOS Scope     58  Renewal Time     59  Rebinding Time     64  NIS+-Domain-Name     65  NIS+-Server-Addr     66  TFTP Server-Name (used by PXE)     67  Bootfile-Name (used by PXE)     93  PXE: Client system architecture     94  PXE: Client NDI     97  PXE: UUID/UNDI     117 Name Service Search     119 Domain Search     150 TFTP server address (used by PXE)     175 Etherboot     209 PXE Configuration File     210 PXE Path Prefix     211 PXE Reboot Time
	Others []GenericDhcpOption `json:"others,omitempty"`
}

// DHCP IPv4 static bindings are configured for each segment.
type DhcpV4StaticBindingConfig struct {
	ResourceType string `json:"resource_type"`
	// When not specified, gateway address is auto-assigned from segment configuration.
	GatewayAddress string `json:"gateway_address,omitempty"`
	// Hostname to assign to the host.
	HostName string `json:"host_name,omitempty"`
	// MAC address of the host.
	MacAddress string `json:"mac_address"`
	// DHCP lease time in seconds.
	LeaseTime int64 `json:"lease_time,omitempty"`
	// IP assigned to host. The IP address must belong to the subnet, if any, configured on Segment.
	IpAddress string         `json:"ip_address"`
	Options   *DhcpV4Options `json:"options,omitempty"`
}

// DHCP options for IPv6 server.
type DhcpV6Options struct {
}

// DHCP IPv6 static bindings are configured for each segment.
type DhcpV6StaticBindingConfig struct {
	ResourceType string `json:"resource_type"`
	// SNTP server IP addresses.
	SntpServers []string `json:"sntp_servers,omitempty"`
	// Preferred time, in seconds. If this value is not provided, the value of lease_time*0.8 will be used.
	PreferredTime int64 `json:"preferred_time,omitempty"`
	// Lease time, in seconds.
	LeaseTime int64 `json:"lease_time,omitempty"`
	// The MAC address of the client host. Either client-duid or mac-address, but not both.
	MacAddress string `json:"mac_address"`
	// When not specified, no ip address will be assigned to client host.
	IpAddresses []string `json:"ip_addresses,omitempty"`
	// When not specified, no DNS nameserver will be set to client host.
	DnsNameservers []string `json:"dns_nameservers,omitempty"`
	// When not specified, no domain name will be assigned to client host.
	DomainNames []string `json:"domain_names,omitempty"`
}

type Dhcpv6Header struct {
	// This is used to specify the DHCP v6 message. To request the assignment of one or more IPv6 addresses, a client first locates a DHCP server and then requests the assignment of addresses and other configuration information from the server. The client sends a Solicit message to the All_DHCP_Relay_Agents_and_Servers address to find available DHCP servers. Any server that can meet the client's requirements responds with an Advertise message. The client then chooses one of the servers and sends a Request message to the server asking for confirmed assignment of addresses and other configuration information. The server responds with a Reply message that contains the confirmed addresses and configuration. SOLICIT - A client sends a Solicit message to locate servers. ADVERTISE - A server sends and Advertise message to indicate that it is available. REQUEST - A client sends a Request message to request configuration parameters. REPLY - A server sends a Reply message containing assigned addresses and configuration parameters.
	MsgType string `json:"msg_type,omitempty"`
}

type DiscoveredNode struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// The stateless property describes whether host persists its state across reboot or not. If state persists, value is set as false otherwise true.
	Stateless bool `json:"stateless,omitempty"`
	// External id of the compute collection to which this node belongs
	ParentComputeCollection string `json:"parent_compute_collection,omitempty"`
	// Certificate of the discovered node
	Certificate string `json:"certificate,omitempty"`
	// Id of the compute manager from where this node was discovered
	OriginId string `json:"origin_id,omitempty"`
	// IP Addresses of the the discovered node.
	IpAddresses []string `json:"ip_addresses,omitempty"`
	// Hardware Id is generated using system hardware info. It is used to retrieve fabric node of the esx.
	HardwareId string `json:"hardware_id,omitempty"`
	// OS version of the discovered node
	OsVersion string `json:"os_version,omitempty"`
	// Discovered Node type like Host
	NodeType string `json:"node_type,omitempty"`
	// OS type of the discovered node
	OsType string `json:"os_type,omitempty"`
	// Key-Value map of additional specific properties of discovered node in the Compute Manager
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// External id of the discovered node, ex. a mo-ref from VC
	ExternalId string `json:"external_id,omitempty"`
	// Local Id of the discovered node in the Compute Manager
	CmLocalId string `json:"cm_local_id,omitempty"`
}

// Base class for resources that are discovered and automatically updated
type DiscoveredResource struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
}

// Base Discovery Profile Binding Map
type DiscoveryProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

type DistributedFloodProtectionProfile struct {
	// If this field is empty, firewall will not set a limit to active ICMP connections.
	IcmpActiveFlowLimit int64 `json:"icmp_active_flow_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to half open TCP connections.
	TcpHalfOpenConnLimit int64 `json:"tcp_half_open_conn_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to active UDP connections.
	UdpActiveFlowLimit int64 `json:"udp_active_flow_limit,omitempty"`
	// GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string `json:"resource_type"`
	// If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections.
	OtherActiveConnLimit int64 `json:"other_active_conn_limit,omitempty"`
	// If set to true, rst spoofing will be enabled. Flag is used only for distributed firewall profiles.
	EnableRstSpoofing bool `json:"enable_rst_spoofing,omitempty"`
	// If set to true, sync cache will be enabled. Flag is used only for distributed firewall profiles.
	EnableSyncache bool `json:"enable_syncache,omitempty"`
}

// Distributed virtual portgroup on a VC
type DistributedVirtualPortgroup struct {
	// External id of the virtual portgroup
	ExternalId string `json:"external_id,omitempty"`
	// Portgroup type like DistributedVirtualPortgroup
	OriginType string `json:"origin_type,omitempty"`
	// Id of the portgroup, eg. a mo-ref from VC.
	CmLocalId string `json:"cm_local_id,omitempty"`
	// This parameters reflects the managed entity status of the portgroup as reported by VC.
	OverallStatus string `json:"overall_status,omitempty"`
	// For distributed virtual portgroup, backing type is standard. For logical switch portgroup, the backing type is set to nsx.
	BackingType string `json:"backing_type,omitempty"`
	// Generated UUID of the portgroup
	Key string `json:"key,omitempty"`
}

// DistributedVirtualSwitch on a VC
type DistributedVirtualSwitch struct {
	// ID of the virtual switch in compute manager
	CmLocalId string `json:"cm_local_id,omitempty"`
	// External id of the virtual switch
	ExternalId string `json:"external_id,omitempty"`
	// Switch type like VmwareDistributedVirtualSwitch
	OriginType string `json:"origin_type,omitempty"`
	// ID of the compute manager where this virtual switch is discovered.
	OriginId string `json:"origin_id,omitempty"`
	// Array of discovered nodes connected to this switch.
	DiscoveredNodes []DiscoveredNode             `json:"discovered_nodes,omitempty"`
	UplinkPortgroup *DistributedVirtualPortgroup `json:"uplink_portgroup,omitempty"`
	// UUID of the switch
	Uuid string `json:"uuid,omitempty"`
	// Key-Value map of additional properties of switch
	OriginProperties []KeyValuePair `json:"origin_properties,omitempty"`
	// It contains information about VMware specific multiple dynamic LACP groups.
	LacpGroupConfigs []LacpGroupConfigInfo `json:"lacp_group_configs,omitempty"`
	// The uniform name of uplink ports on each host.
	UplinkPortNames []string `json:"uplink_port_names,omitempty"`
}

// DNS forwarder statistics per enforcement point.
type DnsForwarderStatisticsPerEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// DNS forwarder status per enforcement point.
type DnsForwarderStatusPerEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the status is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

type DnsHeader struct {
	// This is used to specify the type of the address. V4 - The address provided is an IPv4 domain name/IP address, the Type in query or response will be A V6 - The address provided is an IPv6 domain name/IP address, the Type in query or response will be AAAA
	AddressType string `json:"address_type,omitempty"`
	// Specifies the message type whether it is a query or a response.
	MessageType string `json:"message_type,omitempty"`
	// This is used to define what is being asked or responded.
	Address string `json:"address,omitempty"`
}

// Used to configure DNS security profile
type DnsSecurityProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Time to live for DNS cache entry in seconds. Valid TTL values are between 3600 to 864000. However, this field accepts values between 0 through 864000. We define TTL type based on the value of TTL as follows: TTL 0 - cached entry never expires. TTL 1 to 3599 - invalid input and error is thrown TTL 3600 to 864000 - ttl is set to user input TTL field not set by user - TTL type is 'AUTO' and ttl value is set from DNS response packet.  User defined TTL value is used only when it is betweeen 3600 to 864000.
	Ttl int64 `json:"ttl,omitempty"`
}

// This entity will be used to establish association between DNS security profile and Group. With this entity, user can specify intent for applying DNS security profile profile to particular Group.
type DnsSecurityProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
	// Sequence number used to resolve conflicts betweeen two profiles applied on the same group. Lower sequence number takes higher precedence. Two binding maps applied to the same profile must have the same sequence number. User defined sequence numbers range from 1 through 100,000. System defined sequence numbers range from 100,001 through 200,000.
	SequenceNumber int64 `json:"sequence_number,omitempty"`
}

// Paged collection of DNS Security Profile Binding Map
type DnsSecurityProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// DNS Security Profile Binding Map List Results
	Results []DnsSecurityProfileBindingMap `json:"results,omitempty"`
}

// Paged Collection of DnsSecurityProfile
type DnsSecurityProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// DnsSecurityProfile list results
	Results []DnsSecurityProfile `json:"results"`
}

// Domain.
type Domain struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// Binding of domain to the enforcement point.
type DomainDeploymentMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path of enforcement point on which domain shall be enforced.
	EnforcementPointPath string `json:"enforcement_point_path"`
}

// Paged collection of Domain Deployment Map.
type DomainDeploymentMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Domain Deployment Map list result.
	Results []DomainDeploymentMap `json:"results"`
}

// Paged Collection of Domains
type DomainListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Domain list results
	Results []Domain `json:"results"`
}

// Represents configuration of a Donut
type DonutConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Expression to retrieve count to be shown on Donut.
	Count string `json:"count,omitempty"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
	// If true, displays the count of entities in the donut
	DisplayCount bool `json:"display_count,omitempty"`
	// Sections
	Sections []DonutSection `json:"sections"`
	Label    *Label         `json:"label,omitempty"`
}

// Represents an entity or portion to be plotted on a donut or stats chart.
type DonutPart struct {
	// A numerical value that represents the portion or entity of the donut or stats chart.
	Field string `json:"field"`
	// If true, legend will be shown only if the data for the part is available. This is applicable only if legends are specified in widget configuration.
	HideEmptyLegend bool `json:"hide_empty_legend,omitempty"`
	// If the condition is met then the part will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	Label       *Label `json:"label,omitempty"`
	// Hyperlink of the specified UI page that provides details. If drilldown_id is provided, then navigation cannot be used.
	Navigation string `json:"navigation,omitempty"`
	// Multi-line text to be shown on tooltip while hovering over the portion.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
	// Additional rendering or conditional evaluation of the field values to be performed, if any.
	RenderConfiguration []RenderConfiguration `json:"render_configuration,omitempty"`
}

// Represents high level logical grouping of portions or segments of a donut / stats chart.
type DonutSection struct {
	// Field of the root of the api result set for forming parts.
	RowListField string `json:"row_list_field,omitempty"`
	// Array of portions or parts of the donut or stats chart.
	Parts []DonutPart `json:"parts"`
	// If true, the section will be appled as template for forming parts. Only one part will be formed from each element of 'row_list_field'.
	Template bool `json:"template,omitempty"`
}

// Represents configuration for dropdown filter widget.
type DropdownFilterWidgetConfiguration struct {
	// Alias to be used when emitting filter value.
	Alias string `json:"alias,omitempty"`
	// Expression to specify default value of filter.
	DefaultValue string `json:"default_value,omitempty"`
	// Additional static items to be added in dropdown filter. Example can be 'ALL'.
	StaticFilters []StaticFilter `json:"static_filters,omitempty"`
	DropdownItem  *DropdownItem  `json:"dropdown_item"`
	// If the condition is met then the static filter will be added. If no condition is provided, then the static filters will be applied unconditionally.
	StaticFilterCondition string `json:"static_filter_condition,omitempty"`
	// Placeholder message to be displayed in dropdown filter.
	PlaceholderMsg string `json:"placeholder_msg,omitempty"`
}

// Dropdown item definition
type DropdownItem struct {
	// An expression that represents the items of the dropdown filter.
	Field string `json:"field"`
	// expression to extract display name to be shown in the drop down.
	DisplayName string `json:"display_name,omitempty"`
	// Value of filter inside dropdown filter.
	Value string `json:"value"`
}

// Contains dupliacte IP detection related discovery options.
type DuplicateIpDetectionOptions struct {
	// Indicates whether duplicate IP detection should be enabled
	DuplicateIpDetectionEnabled bool `json:"duplicate_ip_detection_enabled,omitempty"`
}

// This contains fields that captures state of Trackable entities. Edge and VPN state entities extend this object.
type EdgeConfigurationState struct {
	// Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State string `json:"state,omitempty"`
	// Array of configuration state of various sub systems
	Details []ConfigurationStateElement `json:"details,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
	// Request identifier of the API which modified the entity.
	PendingChangeList []string `json:"pending_change_list,omitempty"`
}

// A shaper that specifies egress rate properties in Mb/s
type EgressRateLimiter struct {
	Enabled bool `json:"enabled"`
	// Type rate limiter
	ResourceType string `json:"resource_type"`
	// Peak bandwidth in Mb/s
	PeakBandwidth int32 `json:"peak_bandwidth,omitempty"`
	// Average bandwidth in Mb/s
	AverageBandwidth int32 `json:"average_bandwidth,omitempty"`
	// Burst size in bytes
	BurstSize int32 `json:"burst_size,omitempty"`
}

// Ordered list of Endpoint Rules ordered by sequence number of the entries. The maximum number of policies is 25.
type EndpointPolicy struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Endpoint Rules that are a part of this EndpointPolicy
	EndpointRules []EndpointRule `json:"endpoint_rules,omitempty"`
	// This field is used to resolve conflicts between maps across domains.
	SequenceNumber int32 `json:"sequence_number,omitempty"`
}

// Paged Collection of Groups
type EndpointPolicyListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Guest Introspection Map list results
	Results []EndpointPolicy `json:"results"`
}

// Endpoint Rule comes from user configuration. User configures Endpoint Rule to specify what services are applied on the groups.
type EndpointRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The policy paths of service profiles are listed here. It pecifies what services are applied on the group. Currently only one is allowed.
	ServiceProfiles []string `json:"service_profiles"`
	// We need paths as duplicate names may exist for groups under different domains. In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	Groups []string `json:"groups"`
	// This field is used to resolve conflicts between multiple entries under EndpointPolicy. It will be system default value when not specified by user.
	SequenceNumber int32 `json:"sequence_number,omitempty"`
}

// Paged Collection of Endpoint Rules
type EndpointRuleListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Endpoint Rule list results
	Results []EndpointRule `json:"results"`
}

// Detailed Realized Status of an intent object on an NSX-T type of enforcement point. This is a detailed view of the Realized Status of an intent object from an NSX-T enforcement point perspective.
type EnforcedStatusDetailsNsxT struct {
	PendingChangesInfo *PendingChangesInfoNsxT `json:"pending_changes_info,omitempty"`
	EnforcedStatusInfo *EnforcedStatusInfoNsxT `json:"enforced_status_info,omitempty"`
}

// Information about the realized status of the intent object on an NSX-T type of enforcement point. Some very recent changes may be excluded when preparing this information, which is indicated by Pending Changes Info. In addition to the realized status across all scopes, this information holds details about enforced realized status per scope.
type EnforcedStatusInfoNsxT struct {
	EnforcedStatus *EnforcedStatusNsxT `json:"enforced_status,omitempty"`
	// List of Enforced Realized Status per Scope.
	EnforcedStatusPerScope []EnforcedStatusPerScopeNsxT `json:"enforced_status_per_scope,omitempty"`
}

// NSX-T Enforced Status.
type EnforcedStatusNsxT struct {
	// Enforced Realized Status.
	Status string `json:"status,omitempty"`
	// Status Message conveying hints depending on the status value.
	StatusMessage string `json:"status_message,omitempty"`
}

// NSX-T Detailed Realized Status Per Scope.
type EnforcedStatusPerScopeNsxT struct {
	// Enforced Realized Status Per Scope Resource Type.
	ResourceType string `json:"resource_type"`
}

// Detailed Realized Status Per Transport Node.
type EnforcedStatusPerTransportNode struct {
	EnforcedStatus *EnforcedStatusNsxT `json:"enforced_status,omitempty"`
	// Policy Path referencing the transport node.
	Path string `json:"path,omitempty"`
	// UUID identifying uniquely the Transport Node.
	NsxId string `json:"nsx_id,omitempty"`
	// Display name of the transport node.
	DisplayName string `json:"display_name,omitempty"`
}

// Enforcement point is the endpoint where policy configurations are applied.
type EnforcementPoint struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool                            `json:"marked_for_delete,omitempty"`
	ConnectionInfo  *EnforcementPointConnectionInfo `json:"connection_info"`
	// Version of the Enforcement point.
	Version string `json:"version,omitempty"`
	// Auto enforce flag suggests whether the policy objects shall be automatically enforced on this enforcement point or not. When this flag is set to true, all policy objects will be automatically enforced on this enforcement point. If this flag is set to false, user shall rely on the usual means of realization, i.e., deployment maps.
	AutoEnforce bool `json:"auto_enforce,omitempty"`
}

// Contains information required to connect to enforcement point.
type EnforcementPointConnectionInfo struct {
	// Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress string `json:"enforcement_point_address"`
	// Resource Type of Enforcement Point Connection Info.
	ResourceType string `json:"resource_type"`
}

// Paged collection of enforcement points.
type EnforcementPointListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Enforcement Point list Results.
	Results []EnforcementPoint `json:"results"`
}

// Represents the leaf level constraint to restrict the number instances of an entity type can be created. This is useful in restricting number of CGWs or MGWs or Providers that can created in a system.
type EntityInstanceCountConstraintExpression struct {
	ResourceType string `json:"resource_type"`
	// Operations supported '<' and '<='.
	Operator string `json:"operator"`
	// Instance count.
	Count int64 `json:"count"`
}

// Metadata related to a given error_id
type ErrorResolverInfo struct {
	// The error id for which metadata information is needed
	ErrorId int64 `json:"error_id"`
	// Indicates whether there is a resolver associated with the error or not
	ResolverPresent bool                       `json:"resolver_present"`
	UserMetadata    *ErrorResolverUserMetadata `json:"user_metadata,omitempty"`
}

// Collection of all registered ErrorResolverInfo
type ErrorResolverInfoList struct {
	// ErrorResolverInfo list
	Results []ErrorResolverInfo `json:"results"`
}

// Error along with its metadata
type ErrorResolverMetadata struct {
	// The error id as reported by the entity where the error occurred.
	ErrorId        int64                        `json:"error_id"`
	SystemMetadata *ErrorResolverSystemMetadata `json:"system_metadata,omitempty"`
	// The entity/node UUID where the error has occurred.
	EntityId     string                     `json:"entity_id"`
	UserMetadata *ErrorResolverUserMetadata `json:"user_metadata,omitempty"`
}

// List of errors with their metadata
type ErrorResolverMetadataList struct {
	// List of errors with their corresponding metadata.
	Errors []ErrorResolverMetadata `json:"errors"`
}

// Metadata fetched from an external system like Syslog or LogInsight.
type ErrorResolverSystemMetadata struct {
	// The value fetched from another system
	Value string `json:"value,omitempty"`
}

// Corresponds to one property entered by the user
type ErrorResolverUserInputData struct {
	// The datatype of the given property. Useful for data validation
	DataType string `json:"data_type"`
	// Name of the property supplied by the user
	PropertyName string `json:"property_name"`
	// The value associated with the above property
	PropertyValue string `json:"property_value,omitempty"`
}

// User supplied metadata needed for resolving errors
type ErrorResolverUserMetadata struct {
	// List of user supplied input data.
	UserInputList []ErrorResolverUserInputData `json:"user_input_list,omitempty"`
}

// A ServiceEntry that represents an ethertype protocol
type EtherTypeServiceEntry struct {
	ResourceType string `json:"resource_type"`
	// Type of the encapsulated protocol
	EtherType int64 `json:"ether_type"`
}

type EthernetHeader struct {
	// The destination MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	DstMac string `json:"dst_mac,omitempty"`
	// This field defaults to IPv4.
	EthType int64 `json:"eth_type,omitempty"`
	// The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	SrcMac string `json:"src_mac,omitempty"`
}

// Indicate the status of End User License Agreement acceptance
type EulaAcceptance struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Acceptance status of End User License Agreement
	Acceptance bool `json:"acceptance"`
}

// End User License Agreement content
type EulaContent struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Content of End User License Agreement
	Content string `json:"content,omitempty"`
}

// Criterion Evaluation is the basic logical condition to evaluate whether the event could be potentially met.
type Evaluation struct {
	// Criterion Evaluation resource type.
	ResourceType string `json:"resource_type"`
}

// The Event is the criterion or criteria applied to the source and, when met, prompt Policy to run the action. All Reaction Events are constructed with reference to the object, the \"source\", that is logically deemed to be the object upon which the Event in question initially occurred upon. Some example events include: - New object was created. - Change in realization state. - Specific API is called.
type Event struct {
	Source *Source `json:"source"`
	// Criteria applied to the source and, if satisfied, would trigger the action. Criteria is composed of criterions. In order for the Criteria to be met, only one of the criterion must be fulfilled (implicit OR).
	Criteria []Criterion `json:"criteria,omitempty"`
}

// Evpn Configuration.
type EvpnConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete     bool             `json:"marked_for_delete,omitempty"`
	EncapsulationMethod *EvpnEncapConfig `json:"encapsulation_method,omitempty"`
	// EVPN service mode
	Mode string `json:"mode,omitempty"`
}

// Encapsulation method for EVPN.
type EvpnEncapConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// vni pool path
	VniPoolPath string `json:"vni_pool_path,omitempty"`
}

// Evpn Tunnel Endpoint Configuration.
type EvpnTunnelEndpointConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// MTU
	Mtu int32 `json:"mtu,omitempty"`
	// edge path
	EdgePath string `json:"edge_path"`
	// local addresses
	LocalAddresses []string `json:"local_addresses"`
}

// Collection of Evpn Tunnel Endpoint Configuration.
type EvpnTunnelEndpointConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Evpn Tunnel Endpoint Configuration list results
	Results []EvpnTunnelEndpointConfig `json:"results"`
}

// All the nodes of the expression extend from this abstract class. This is present for extensibility.
type Expression struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	ResourceType    string `json:"resource_type"`
}

// Represents external ID expressions in the form of an array, to support addition of objects like virtual interfaces, virtual machines, CloudNativeServiceInstance PhysicalServer to a group.
type ExternalIdExpression struct {
	ResourceType string `json:"resource_type"`
	// This array can consist of one or more external IDs for the specified member type.
	ExternalIds []string `json:"external_ids"`
	// External ID member type
	MemberType string `json:"member_type"`
}

// Feature Permission
type FeaturePermission struct {
	// Is execute recommended
	IsExecuteRecommended bool `json:"is_execute_recommended,omitempty"`
	// Feature Name
	FeatureName string `json:"feature_name,omitempty"`
	// Permission
	Permission string `json:"permission"`
	// Is internal
	IsInternal bool `json:"is_internal,omitempty"`
	// Feature Id
	Feature string `json:"feature"`
	// Feature Description
	FeatureDescription string `json:"feature_description,omitempty"`
}

type FederationComponentUpgradeStatus struct {
	// Upgrade status of component
	Status string `json:"status,omitempty"`
	// Target component version
	TargetVersion string `json:"target_version,omitempty"`
	// Details about the upgrade status
	Details string `json:"details,omitempty"`
	// Component type for the upgrade status
	ComponentType string `json:"component_type,omitempty"`
	// Indicator of upgrade progress in percentage
	PercentComplete float64 `json:"percent_complete,omitempty"`
	// Mapping of current versions of nodes and counts of nodes at the respective versions.
	CurrentVersionNodeSummary []FederationNodeSummary `json:"current_version_node_summary,omitempty"`
}

// Global Manager federation configuration. This configuration is distributed to all Sites participating in federation.
type FederationConfig struct {
	// Federation configurations of all Sites
	SiteConfig []SiteFederationConfig `json:"site_config,omitempty"`
}

// Additional configuration required for federation.
type FederationConnectivityConfig struct {
	// Global id for by Layer3 services for federation usecases.
	GlobalOverlayId int64 `json:"global_overlay_id,omitempty"`
}

// Additional gateway configuration required for federation
type FederationGatewayConfig struct {
	// Global id for by Layer3 services for federation usecases.
	GlobalOverlayId int64 `json:"global_overlay_id,omitempty"`
	// Indicies for cross site allocation for edge cluster and its members referred by gateway.
	SiteAllocationIndices []SiteAllocationIndexForEdge `json:"site_allocation_indices,omitempty"`
	// Global UUID for transit segment id to be used by Layer2 services for federation usecases.
	TransitSegmentId string `json:"transit_segment_id,omitempty"`
}

type FederationNodeSummary struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Number of nodes of the type and at the component version.
	NodeCount int32 `json:"node_count,omitempty"`
	// Component version
	Version string `json:"version,omitempty"`
}

// Provides upgrade summary for a specific site.
type FederationUpgradeSummary struct {
	// This is NSX target version for the site, if it is undergoing upgrade.
	TargetVersion string `json:"target_version,omitempty"`
	// Type of this site.
	SiteType string `json:"site_type,omitempty"`
	// Indicates the time when the site was upgraded.
	LastUpgradeTimestamp string `json:"last_upgrade_timestamp,omitempty"`
	// List of component statuses
	ComponentStatus []FederationComponentUpgradeStatus `json:"component_status,omitempty"`
	// This is the Site Manager generated UUID for every NSX deployment.
	SiteId string `json:"site_id,omitempty"`
	// Status of upgrade
	OverallUpgradeStatus string `json:"overall_upgrade_status,omitempty"`
	// Name of the global manager if present.
	GpmName string `json:"gpm_name,omitempty"`
	// IP address of the site.
	SiteIp string `json:"site_ip,omitempty"`
	// This is NSX version for the site.
	CurrentVersion string `json:"current_version,omitempty"`
	// Unique identifier of this resource.
	Id string `json:"id,omitempty"`
	// Name of the site.
	Name string `json:"name,omitempty"`
}

// Paged Collection of site upgrade information
type FederationUpgradeSummaryListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged collection of site upgrade information
	Results []FederationUpgradeSummary `json:"results,omitempty"`
}

// Represents the field value constraint to constrain specified field value based on defined sanity checks. Example - For DNS.upstream_servers, all the IP addresses must either be public or private.   {     \"target\": {       \"target_resource_type\": \"DnsForwarderZone\",       \"attribute\": \"upstreamServers\",       \"path_prefix\": \"/infra/dns-forwarder-zones/\"      },      \"constraint_expression\": {        \"resource_type\": \"FieldSanityConstraintExpression\",        \"operator\": \"OR\",        \"checks\": [\"ALL_PUBLIC_IPS\", \"ALL_PRIVATE_IPS\"]      }   }
type FieldSanityConstraintExpression struct {
	ResourceType string `json:"resource_type"`
	// A conditional operator
	Operator string `json:"operator"`
	// List of sanity checks.
	Checks []string `json:"checks"`
}

// Field Setting.
type FieldSetting struct {
	Value *FieldSettingValue `json:"value"`
	// Field Pointer.
	FieldPointer string `json:"field_pointer"`
}

// Field Setting Value.
type FieldSettingValue struct {
	// Field Setting Value resource type.
	ResourceType string `json:"resource_type"`
}

type FieldsPacketData struct {
	// A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed bool `json:"routed,omitempty"`
	// transport type of the traceflow packet
	TransportType string `json:"transport_type,omitempty"`
	// Packet configuration
	ResourceType string `json:"resource_type"`
	// If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message.  The frame will be zero padded to the requested size.
	FrameSize       int64                    `json:"frame_size,omitempty"`
	Ipv6Header      *Ipv6Header              `json:"ipv6_header,omitempty"`
	ArpHeader       *ArpHeader               `json:"arp_header,omitempty"`
	TransportHeader *TransportProtocolHeader `json:"transport_header,omitempty"`
	IpHeader        *Ipv4Header              `json:"ip_header,omitempty"`
	EthHeader       *EthernetHeader          `json:"eth_header,omitempty"`
	// Up to 1000 bytes of payload may be supplied (with a base64-encoded length of 1336 bytes.) Additional bytes of traceflow metadata will be appended to the payload. The payload contains any data the user wants to put after the transport header.
	Payload string `json:"payload,omitempty"`
}

// Remote server authentication details
type FileTransferAuthenticationScheme struct {
	// User name to authenticate with
	Username string `json:"username"`
	// Authentication scheme name
	SchemeName string `json:"scheme_name"`
	// Password to authenticate with
	Password string `json:"password,omitempty"`
}

// Protocol to transfer backup file to remote server
type FileTransferProtocol struct {
	// Protocol name
	ProtocolName string `json:"protocol_name"`
	// The expected SSH fingerprint of the server. If the server's fingerprint does not match this fingerprint, the connection will be terminated.  Only ECDSA fingerprints hashed with SHA256 are supported. To obtain the host's ssh fingerprint, you should connect via some method other than SSH to obtain this information. You can use one of these commands to view the key's fingerprint: 1. ssh-keygen -l -E sha256 -f ssh_host_ecdsa_key.pub 2. awk '{print $2}' ssh_host_ecdsa_key.pub | base64 -d | sha256sum -b |    sed 's/ .*$//' | xxd -r -p | base64 | sed 's/.//44g' |    awk '{print \"SHA256:\"$1}'
	SshFingerprint       string                            `json:"ssh_fingerprint"`
	AuthenticationScheme *FileTransferAuthenticationScheme `json:"authentication_scheme"`
}

// Represents configuration for filter widget. This is abstract representation of filter widget.
type FilterWidgetConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Alias to be used when emitting filter value.
	Alias string `json:"alias,omitempty"`
}

// Global configuration
type FipsGlobalConfig struct {
	// When this flag is set to true FIPS mode will be set on ssl encryptions of load balancer feature.
	LbFipsEnabled bool `json:"lb_fips_enabled,omitempty"`
}

// Firewall related configurations
type FirewallConfiguration struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// To disable auto drafts, set it to true. By default, auto drafts are enabled.
	DisableAutoDrafts bool   `json:"disable_auto_drafts,omitempty"`
	ResourceType      string `json:"resource_type"`
	// If set to true, Firewall is enabled.
	EnableFirewall bool `json:"enable_firewall,omitempty"`
}

// Represents a generic firewall identity store (e.g. Microsoft AD) The firewall identity store allow access to the directory group via LDAP protocol.
type FirewallIdentityStore struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete       bool                                        `json:"marked_for_delete,omitempty"`
	SelectiveSyncSettings *FirewallIdentityStoreSelectiveSyncSettings `json:"selective_sync_settings,omitempty"`
	// Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique contraint for domain name among different domains.
	Name         string                             `json:"name"`
	SyncSettings *FirewallIdentityStoreSyncSettings `json:"sync_settings,omitempty"`
	// Directory domain LDAP servers' information including host, name, port, protocol and so on.
	LdapServers []FirewallIdentityStoreLdapServer `json:"ldap_servers"`
	// Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.
	BaseDistinguishedName string `json:"base_distinguished_name"`
	// NetBIOS names can contain all alphanumeric characters except for the certain disallowed characters. Names can contain a period, but names cannot start with a period. NetBIOS is similar to DNS in that it can serve as a directory service, but more limited as it has no provisions for a name hierarchy and names are limited to 15 characters. The netbios name is case insensitive and is stored in upper case regardless of input case.
	NetbiosName string `json:"netbios_name"`
}

// Firewall identity LDAP server
type FirewallIdentityStoreLdapServer struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Directory LDAP server connection user name.
	Username string `json:"username,omitempty"`
	// Directory LDAP server DNS host name or ip address which is reachable by NSX manager to be connected and do object synchronization.
	Host string `json:"host"`
	// Directory LDAP server connection protocol which is either LDAP or LDAPS.
	Protocol string `json:"protocol,omitempty"`
	// Directory LDAP server certificate thumbprint used in secure LDAPS connection.
	Thumbprint string `json:"thumbprint,omitempty"`
	// Directory LDAP server connection password.
	Password string `json:"password,omitempty"`
	// Directory domain name which best describes the domain. It could be unique fqdn name or it could also be descriptive. There is no unique constraint for domain name among different domains.
	DomainName string `json:"domain_name,omitempty"`
	// Directory LDAP server connection TCP/UDP port.
	Port int32 `json:"port,omitempty"`
}

// Firewall identity selective sync settings
type FirewallIdentityStoreSelectiveSyncSettings struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Enable or disable SelectiveSync
	Enabled bool `json:"enabled"`
	// If SelectiveSync is enabled, this contains 1 or more OrgUnits, NSX will synchronize with in LDAP server. If SelectiveSync is disabled, do not define this or specify an empty list.
	SelectedOrgUnits []string `json:"selected_org_units,omitempty"`
}

// Firewall identity synchronization settings
type FirewallIdentityStoreSyncSettings struct {
	// Sync delay after Directory domain has been successfully created. if delay is -1, initial full sync will not be triggered.
	SyncDelayInSec int32 `json:"sync_delay_in_sec,omitempty"`
	// Directory domain full synchronization schedule using cron expression. For example, cron expression \"0 0 12 ? * SUN *\" means full sync is scheduled every Sunday midnight. If this object is null, it means there is no background cron job running for full sync.
	FullSyncCronExpr string `json:"full_sync_cron_expr,omitempty"`
	// Directory domain delta synchronization interval time between two delta sync in minutes.
	DeltaSyncInterval int64 `json:"delta_sync_interval,omitempty"`
}

// A profile holding TCP, UDP and ICMP and other protcol connection limits.
type FloodProtectionProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If this field is empty, firewall will not set a limit to active ICMP connections.
	IcmpActiveFlowLimit int64 `json:"icmp_active_flow_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to half open TCP connections.
	TcpHalfOpenConnLimit int64 `json:"tcp_half_open_conn_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to active UDP connections.
	UdpActiveFlowLimit int64 `json:"udp_active_flow_limit,omitempty"`
	// GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string `json:"resource_type"`
	// If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections.
	OtherActiveConnLimit int64 `json:"other_active_conn_limit,omitempty"`
}

// Paged Collection of flood protection profile binding maps
type FloodProtectionProfileBindingListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Flood protection profile binding maps list results
	Results []FloodProtectionProfileBindingMap `json:"results"`
}

// This entity will be used to establish association between Flood Protection profile and Logical Routers.
type FloodProtectionProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
}

// Paged Collection of flood protection profiles
type FloodProtectionProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Flood protection profile list results
	Results []FloodProtectionProfile `json:"results"`
}

// Footer of a widget that provides additional information or allows an action such as clickable url for navigation. An example usage of footer is provided under 'example_request' section of 'CreateWidgetConfiguration' API.
type Footer struct {
	// If the condition is met then the footer will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
	// Action to be performed at the footer of a widget. An action at the footer can be simple text description or a hyperlink to a UI page. Action allows a clickable url for navigation. An example usage of footer action is provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Actions []FooterAction `json:"actions,omitempty"`
}

// Action specified at the footer of a widget to provide additional information or to provide a clickable url for navigation. An example usage of footer action is provided under the 'example_request' section of 'CreateWidgetConfiguration' API.
type FooterAction struct {
	// Hyperlink to the UI page that provides details of action.
	Url string `json:"url,omitempty"`
	// If true, the footer will appear in the underlying container that holds the widget.
	DockToContainerFooter bool   `json:"dock_to_container_footer,omitempty"`
	Label                 *Label `json:"label"`
}

// Contains ordered list of forwarding rules that determine when to forward traffic to / from the underlay for accessing cloud native services.
type ForwardingPolicy struct {
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// Rules that are a part of this ForwardingPolicy
	Rules []ForwardingRule `json:"rules,omitempty"`
}

// Paged Collection of ForwardingPolicy objects
type ForwardingPolicyListResult struct {
	// ForwardingPolicy list results
	Results []ForwardingPolicy `json:"results"`
}

// Forwarding rule that determine how to forward traffic from a VM. Traffic from VM can either be routed via Overlay or Underlay when VM is on hybrid port. Additionally NAT can be performed for VM or container on overlay to route traffic to/from underlay ROUTE_TO_UNDERLAY - Access a service on underlay space from a VM connected to hybrid port. Eg access to AWS S3 on AWS underlay ROUTE_TO_OVERLAY -  Access a service on overlay space from a VM connected to hybrid port. ROUTE_FROM_UNDERLAY - Access a service hosted on a VM (that is connected to hybrid port) from underlay space. Eg access from AWS ELB to VM ROUTE_FROM_OVERLAY - Access a  service hosted on a VM (that is connected to hybrid port) from overlay space NAT_FROM_UNDERLAY - Access a service on overlay VM/container from underlay space using DNAT from underlay IP to overlay IP NAT_TO_UNDERLAY - Access an underlay service from a VM/container on overlay space using SNAT from overlay IP to underlay IP
type ForwardingRule struct {
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol string `json:"ip_protocol,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string `json:"profiles,omitempty"`
	// This is a unique 4 byte positive number that is assigned by the system.  This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on.
	RuleId int64 `json:"rule_id,omitempty"`
	// A flag to indicate whether rule is a default rule.
	IsDefault bool `json:"is_default,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded bool `json:"destinations_excluded,omitempty"`
	// This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded bool `json:"sources_excluded,omitempty"`
	// The action to be applied to all the services
	Action string `json:"action,omitempty"`
}

// Paged Collection of ForwardingRules
type ForwardingRuleListResult struct {
	// Rule list results
	Results []ForwardingRule `json:"results"`
}

// Provides FullSync state for Local Manager from Global Manager.
type FullSyncState struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Timestamp of last update, could be progress or success or error.
	LastUpateTime int64 `json:"last_upate_time,omitempty"`
	// Timestamp of Full Sync start.
	StartTime int64 `json:"start_time,omitempty"`
	// Errors occurred during full sync.
	Errors []string `json:"errors,omitempty"`
	// The current stage of full sync completion for ongoing sync. When Local Manager (LM) receives full sync data from AR, LM starts with workflow to prserve the state and restore the full sync from where it has left off in case of change of leadership of the service to different NSX node or LM is restarted. LM starts the full sync workflow with state INITIAL capturing the AR full sync id and data location details. The stage/state transition follows the order given below INITIAL - Full sync started PROCESSED_FULLSYNC_DATA - Compelted processing the full state data                           provided by AR PRCESSED_DELTAS - Completed processing pending delta changes provided                   by AR. DELETED_STALE_ENTITIES - Completed deletion of all global entities on                          LM that are not in GM anymore COMPLETED - Full sync handling is completed on LM ERROR - Full sync failed with errors on LM, in which case AR will         re-attempt full sync later point in time for the LM ABORTED - Indicates that the full sync cancelled as per user request
	LastCompletedStage string `json:"last_completed_stage,omitempty"`
	// Full sync id generated by Async Replicator (AR) service.
	FullSyncId string `json:"full_sync_id,omitempty"`
}

// Paged Collection of FullSync states.
type FullSyncStateListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// FullSync states list.
	Results []FullSyncState `json:"results"`
}

type GatewayFloodProtectionProfile struct {
	// If this field is empty, firewall will not set a limit to active ICMP connections.
	IcmpActiveFlowLimit int64 `json:"icmp_active_flow_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to half open TCP connections.
	TcpHalfOpenConnLimit int64 `json:"tcp_half_open_conn_limit,omitempty"`
	// If this field is empty, firewall will not set a limit to active UDP connections.
	UdpActiveFlowLimit int64 `json:"udp_active_flow_limit,omitempty"`
	// GatewayFloodProtectionProfile is used for all Tier0 and Tier1 gateways. DistributedFloodProtectionProfile is used for all Transport Nodes.
	ResourceType string `json:"resource_type"`
	// If this field is empty, firewall will not set a limit to other active connections. besides UDP, ICMP and half open TCP connections.
	OtherActiveConnLimit int64 `json:"other_active_conn_limit,omitempty"`
}

// Contains ordered list of Rules for GatewayPolicy
type GatewayPolicy struct {
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// Rules that are a part of this SecurityPolicy
	Rules []Rule `json:"rules,omitempty"`
}

// Paged Collection of gateway policies
type GatewayPolicyListResult struct {
	// GatewayPolicy list results
	Results []GatewayPolicy `json:"results"`
}

// QoS profile contains configuration of rate limiting properties which can be applied in ingress and egress directions at Tier1 gateways
type GatewayQosProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Burst size in bytes.
	BurstSize int32 `json:"burst_size,omitempty"`
	// Committed bandwidth in both directions specoficd in Mbps. Bandwidth is limited to line rate when the value configured is greater than line rate.
	CommittedBandwitdth int32 `json:"committed_bandwitdth,omitempty"`
	// Action on traffic exceeding bandwidth.
	ExcessAction string `json:"excess_action,omitempty"`
}

// Gateway QoS profile configuration
type GatewayQosProfileConfig struct {
	// Policy path to gateway QoS profile in ingress direction.
	IngressQosProfilePath string `json:"ingress_qos_profile_path,omitempty"`
	// Policy path to gateway QoS profile in egress direction.
	EgressQosProfilePath string `json:"egress_qos_profile_path,omitempty"`
}

type GatewayQosProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of GatewayQosProfile
	Results []GatewayQosProfile `json:"results"`
}

type GatewayRouteCsvRecord struct {
	// Logical router component(Service Router/Distributed Router) id
	LrComponentId string `json:"lr_component_id,omitempty"`
	// The IP of the next hop
	NextHop string `json:"next_hop,omitempty"`
	// Logical router component(Service Router/Distributed Router) type
	LrComponentType string `json:"lr_component_type,omitempty"`
	// CIDR network address
	Network string `json:"network"`
	// Route type (USER, CONNECTED, NSX_INTERNAL,..)
	RouteType string `json:"route_type"`
	// The policy path of the interface which is used as the next hop
	Interface_ string `json:"interface,omitempty"`
	// Edge node policy path.
	EdgePath string `json:"edge_path,omitempty"`
	// The admin distance of the next hop
	AdminDistance int64 `json:"admin_distance,omitempty"`
}

type GatewayRouteTableInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string `json:"file_name,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64                   `json:"last_update_timestamp,omitempty"`
	Results             []GatewayRouteCsvRecord `json:"results,omitempty"`
}

// Define DHCP options other than option 121.
type GenericDhcpOption struct {
	// Code of the dhcp option.
	Code int64 `json:"code"`
	// Value of the option.
	Values []string `json:"values"`
}

// Represents realized entity
type GenericPolicyRealizedResource struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// The site where this entity resides.
	SitePath string `json:"site_path,omitempty"`
	// Collection of intent paths
	IntentPaths []string `json:"intent_paths,omitempty"`
	// The path of the enforcement point.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// Collection of type specific properties
	ExtendedAttributes []AttributeVal `json:"extended_attributes,omitempty"`
	// Type of realized entity
	EntityType string `json:"entity_type,omitempty"`
}

// GenericPolicyRealizedResource list result
type GenericPolicyRealizedResourceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of realized resources
	Results []GenericPolicyRealizedResource `json:"results,omitempty"`
}

// Global configuration
type GlobalConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool              `json:"marked_for_delete,omitempty"`
	Fips            *FipsGlobalConfig `json:"fips,omitempty"`
	// Configure forwarding mode for routing. This setting does not restrict configuration for other modes.
	L3ForwardingMode string `json:"l3_forwarding_mode,omitempty"`
	// Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit.
	Mtu int32 `json:"mtu,omitempty"`
}

// Global Manager.
type GlobalManager struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Fail onboarding if maximum RTT exceeded.
	FailIfRttExceeded bool `json:"fail_if_rtt_exceeded,omitempty"`
	// Internally generated UUID to the federation of Global Manager.
	FederationId string `json:"federation_id,omitempty"`
	// There can be at most one ACTIVE global manager and one STANDBY global manager. In order to add a STANDBY manager, there must be an ACTIVE manager defined.
	Mode string `json:"mode"`
	// To create a standby GM, the connection information (username, password, and API thumbprint) for at least one NSX manager node in the remote site must be provided. Once the GM has been successfully onboarded, the connection_info is discarded and authentication to the standby GM occurs using an X.509 client certificate.
	ConnectionInfo []SiteNodeConnectionInfo `json:"connection_info,omitempty"`
	// If provided and fail_if_rtt_exceeded is true, onboarding of the site will fail if measured RTT is greater than this value.
	MaximumRtt int64 `json:"maximum_rtt,omitempty"`
	// UUID of the site where Global manager is running. This is the Site Manager generated UUID for every NSX deployment.
	SiteId string `json:"site_id,omitempty"`
}

// This configuration is distributed to all Sites participating in federation.
type GlobalManagerConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool          `json:"marked_for_delete,omitempty"`
	RtepConfig      *GmRtepConfig `json:"rtep_config,omitempty"`
}

// Paged Collection of Global Managers.
type GlobalManagerListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Global Manager List Result.
	Results []GlobalManager `json:"results"`
}

// Overall restore process status
type GlobalRestoreStatus struct {
	// A description of the restore status
	Description string `json:"description,omitempty"`
	// Global rolled-up restore status value
	Value string `json:"value,omitempty"`
}

// Additional configuration required for federation at Site.
type GmFederationSiteConfig struct {
	// IP Addresses to be allocated for transit segment when the gateway is stretched. Note that Global Manager will carve out the IP Pool for each site to be used for edge nodes when gateway is stretched based on the user provided subnet and maximum number of edge nodes allowed per site.
	TransitSubnet string `json:"transit_subnet,omitempty"`
}

// Global Manager federation RTEP configuration. This configuration is distributed to all Sites participating in federation.
type GmRtepConfig struct {
	// Password to authenticate IBGP session between remote tunnel endpoints created on federated sites. This is applied to inter-site underlay IBGP neighbors created over remote tunnel endpoints on all sites. Empty string (\"\") clears existing password.
	IbgpPassword string `json:"ibgp_password,omitempty"`
}

// Represents configuration of a graph widget
type GraphConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Graphs
	Graphs []GraphDefinition `json:"graphs"`
	Axes   *Axes             `json:"axes,omitempty"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
	// Describes the the type of graph. LINE_GRAPH shows a line graph chart BAR_GRAPH shows a simple bar graph chart STACKED_BAR_GRAPH shows a stacked bar graph chart
	SubType string `json:"sub_type,omitempty"`
	// If true, value of a point is shown as label on X axis. If false, value of point is not shown as label on X axis. false can be useful in situations where there are too many points and showing the X value as label can clutter the X axis.
	DisplayXValue bool `json:"display_x_value,omitempty"`
}

// Defines a graph
type GraphDefinition struct {
	PointDefinition *PointDefinition `json:"point_definition"`
	Label           *Label           `json:"label,omitempty"`
	// Additional rendering or conditional evaluation of the field values to be performed, if any.
	RenderConfiguration []RenderConfiguration `json:"render_configuration,omitempty"`
}

// Represents configuration of a Grid or Table widget.
type GridConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Number of records per page. page_size will be effective only when the urls provided in the datasource support paging.
	PageSize int32 `json:"page_size,omitempty"`
	// Rows of grid or table are formed from the list of objects returned by a row list field.
	RowListFields []RowListField `json:"row_list_fields"`
	// Array of columns of a Grid widget
	Columns []ColumnItem `json:"columns"`
}

// Group.
type Group struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Realization state of this group
	State string `json:"state,omitempty"`
	// Extended Expression allows additional higher level context to be specified for grouping criteria. (e.g. user AD group) This field allow users to specified user context as the source of a firewall rule for IDFW feature. Current version only support a single IdentityGroupExpression. In the future, this might expand to support other conjunction and non-conjunction expression.  The extended expression list must follow below criteria: 1. Contains a single IdentityGroupExpression. No conjunction expression is supported. 2. No other non-conjunction expression is supported, except for IdentityGroupExpression. 3. Each expression must be a valid Expression. See the definition of the Expression type for more information. 4. Extended expression are implicitly AND with expression. 5. No nesting can be supported if this value is used. 6. If a Group is using extended expression, this group must be the only member in the source field of an communication map.
	ExtendedExpression []Expression `json:"extended_expression,omitempty"`
	// The expression list must follow below criteria:   1. A non-empty expression list, must be of odd size. In a list, with   indices starting from 0, all non-conjunction expressions must be at   even indices, separated by a conjunction expression at odd   indices.   2. The total of ConditionExpression and NestedExpression in a list   should not exceed 5.   3. The total of IPAddressExpression, MACAddressExpression, external   IDs in an ExternalIDExpression and paths in a PathExpression must not exceed   500.   4. Each expression must be a valid Expression. See the definition of   the Expression type for more information.
	Expression []Expression `json:"expression,omitempty"`
	// If true, indicates that this is a remote reference group. Such group will have span different from the its parent domain. Default value is false.
	Reference bool `json:"reference,omitempty"`
}

// This entity will be used to establish association between discovery profile and Group. With this entity, user can specify intent for applying discovery profile profile to particular Group.
type GroupDiscoveryProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
	// Sequence number used to resolve conflicts betweeen two profiles applied on the same group. Lower sequence number takes higher precedence. Two binding maps applied to the same profile must have the same sequence number. User defined sequence numbers range from 1 through 100,000. System defined sequence numbers range from 100,001 through 200,000.
	SequenceNumber int64 `json:"sequence_number,omitempty"`
}

// GroupInfo contains information about a particular Group used in Redirection Rules. It also contains information about policy path, if the group is created from Policy.
type GroupInfo struct {
	Group *ResourceReference `json:"group,omitempty"`
	// Policy path of a particular Group.
	GroupPolicyPath string `json:"group_policy_path,omitempty"`
}

// Paged Collection of Groups
type GroupListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Group list results
	Results []Group `json:"results"`
}

// List of same type members to either add or remove from a group.
type GroupMemberList struct {
	// This array contains group members of similar types.
	Members []string `json:"members"`
}

// Collection of tags used in a policy group for a particular member type
type GroupMemberTagsList struct {
	// Member type for which we will list the tags
	MemberType string `json:"member_type"`
	// List of tags for the member type
	Tags []string `json:"tags"`
}

type GroupMemberTypeListResult struct {
	// Collection of member types for the given Group
	Results []string `json:"results"`
	// Count of the member types in the results array
	ResultCount int64 `json:"result_count,omitempty"`
}

// This entity will be used to establish association between monitoring profile and Group. Using this entity, you can specify intent for applying monitoring profile to particular Group. Group with membership criteria vm only supported as source group. Port mirroring is only supported on group with five vms.
type GroupMonitoringProfileBindingMap struct {
	// PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath string `json:"ipfix_l2_profile_path,omitempty"`
	// PolicyPath of associated IPFIX DFW Profile
	IpfixDfwProfilePath string `json:"ipfix_dfw_profile_path,omitempty"`
	// PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath string `json:"port_mirroring_profile_path,omitempty"`
}

// Paged collection of Group Monitoring Profile Binding Maps
type GroupMonitoringProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Group Monitoring Profile Binding Map list results
	Results []GroupMonitoringProfileBindingMap `json:"results"`
}

// Collection of tags used in a policy group listed per member type
type GroupTagsList struct {
	// Collection of tags used in a policy group listed per member type
	Results []GroupMemberTagsList `json:"results"`
}

// Guest virtual machine details include OS name and computer name of guest VM.
type GuestInfo struct {
	// OS name of guest virtual machine. Currently this is supported for guests on ESXi that have VMware Tools installed.
	OsName string `json:"os_name,omitempty"`
	// Computer name of guest virtual machine, which is set inside guest OS. Currently this is supported for guests on ESXi that have VMware Tools installed.
	ComputerName string `json:"computer_name,omitempty"`
}

// Header of a widget that provides additional information. This will be shown at the container level. It includes details as label value pairs.
type Header struct {
	// Alignment of header labels.
	ContentAlignment string `json:"content_alignment,omitempty"`
	// If the condition is met then the header will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
	// An array of label-value properties.
	SubHeaders []PropertyItem `json:"sub_headers,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over HTTP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type HttpPolicyLbMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount    int64  `json:"rise_count,omitempty"`
	ResourceType string `json:"resource_type"`
	// For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	Url string `json:"url,omitempty"`
}

// Virtual server acts as a facade to an application, receives all client connections over HTTP and distributes them among the backend servers.
type HttpPolicyLbVirtualServer struct {
	// If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath string `json:"router_path"`
	// Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile string `json:"lb_persistence_profile,omitempty"`
	TrafficSource        string `json:"traffic_source,omitempty"`
	// Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers.
	IpAddress string `json:"ip_address"`
	// Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range.
	Ports        []string `json:"ports"`
	ResourceType string   `json:"resource_type"`
	// Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader bool `json:"insert_client_ip_header,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over HTTPS. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type HttpsPolicyLbMonitorProfile struct {
	// For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	Url string `json:"url,omitempty"`
}

// Virtual server acts as a facade to an application, receives all client connections over HTTPS and distributes them among the backend servers.
type HttpsPolicyLbVirtualServer struct {
	// Backend web servers typically log each request they handle along with the requesting client IP address. These logs are used for debugging, analytics and other such purposes. If the deployment topology requires enabling SNAT on the load balancer, then server will see the client as the SNAT IP which defeats the purpose of logging. To work around this issue, load balancer can be configured to insert XFF HTTP header with the original client IP address. Backend servers can then be configured to log the IP address in XFF header instead of the source IP address of the connection. If XFF header is not present in the incoming request, load balancer inserts a new XFF header with the client IP address.
	InsertClientIpHeader bool `json:"insert_client_ip_header,omitempty"`
	// Security settings representing various security settings when the VirtualServer acts as an SSL server - BASE_SECURE_111317 - MODERATE_SECURE_111317 - HIGH_SECURE_111317
	ClientSslSettings string `json:"client_ssl_settings,omitempty"`
	// Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server. The setting is used when load balancer acts as an SSL server and terminating the client SSL connection
	ClientSslCertificateIds []string `json:"client_ssl_certificate_ids,omitempty"`
	// The setting is used when load balancer acts as an SSL server and terminating the client SSL connection.  A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultClientSslCertificateId string `json:"default_client_ssl_certificate_id"`
}

// Contains IPv4 related discovery options.
type IPv4DiscoveryOptions struct {
	// Indicates whether fetching IP using vm-tools is enabled. This option is only supported on ESX where vm-tools is installed.
	VmtoolsEnabled bool `json:"vmtools_enabled,omitempty"`
	// Indicates whether DHCP snooping is enabled
	DhcpSnoopingEnabled bool               `json:"dhcp_snooping_enabled,omitempty"`
	ArpSnoopingConfig   *ArpSnoopingConfig `json:"arp_snooping_config,omitempty"`
}

// IPv6 DAD status
type IPv6DadStatus struct {
	// DAD status for IP address on the port.
	Status string `json:"status,omitempty"`
	// Array of transport node id on which DAD status is reported for given IP address.
	TransportNode []ResourceReference `json:"transport_node,omitempty"`
	// IP address on the port for which DAD status is reported.
	IpAddress string `json:"ip_address,omitempty"`
}

// Contains IPv6 related discovery options.
type IPv6DiscoveryOptions struct {
	NdSnoopingConfig *NdSnoopingConfig `json:"nd_snooping_config,omitempty"`
	// Enable this method will snoop the DHCPv6 message transaction which a VM makes with a DHCPv6 server. From the transaction, we learn the IPv6 addresses assigned by the DHCPv6 server to this VM along with its lease time.
	DhcpSnoopingV6Enabled bool `json:"dhcp_snooping_v6_enabled,omitempty"`
	// Enable this method will learn the IPv6 addresses which are configured on interfaces of a VM with the help of the VMTools software.
	VmtoolsV6Enabled bool `json:"vmtools_v6_enabled,omitempty"`
}

// IPv6 status
type IPv6Status struct {
	// Array of DAD status which contains DAD information for IP addresses on the interface.
	DadStatuses []IPv6DadStatus `json:"dad_statuses,omitempty"`
	// Path of the segment attached to the interface.
	ConnectedSegmentPath string `json:"connected_segment_path,omitempty"`
	// Policy path or realization ID of interface for which IPv6 DAD status is returned.
	InterfaceId string `json:"interface_id,omitempty"`
}

type IcmpEchoRequestHeader struct {
	// ICMP id
	Id int64 `json:"id,omitempty"`
	// ICMP sequence number
	Sequence int64 `json:"sequence,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over ICMP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healt hchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type IcmpPolicyLbMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount    int64  `json:"rise_count,omitempty"`
	ResourceType string `json:"resource_type"`
}

// A ServiceEntry that represents IPv4 or IPv6 ICMP protocol
type IcmpTypeServiceEntry struct {
	ResourceType string `json:"resource_type"`
	// ICMP message code
	IcmpCode int64 `json:"icmp_code,omitempty"`
	// ICMP message type
	IcmpType int64  `json:"icmp_type,omitempty"`
	Protocol string `json:"protocol"`
}

// Icon to be applied at dashboard for widgets and UI elements.
type Icon struct {
	// If specified as PRE, the icon appears before the UI element. If set as POST, the icon appears after the UI element.
	Placement string `json:"placement,omitempty"`
	// Icon will be rendered based on its type. For example, if ERROR is chosen, then icon representing error will be rendered.
	Type_ string `json:"type,omitempty"`
	// Multi-line text to be shown on tooltip while hovering over the icon.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
}

// Represents a list of identity group (Ad group SID) expressions.
type IdentityGroupExpression struct {
	ResourceType string `json:"resource_type"`
	// This array consists of set of identity group object. All members within this array are implicitly OR'ed together.
	IdentityGroups []IdentityGroupInfo `json:"identity_groups"`
}

// Identity (Directory) group
type IdentityGroupInfo struct {
	// Each LDAP object is uniquely identified by its distinguished name (DN). A DN is a sequence of relative distinguished names (RDN) connected by commas. e.g. CN=Larry Cole,CN=admin,DC=corp,DC=acme,DC=com. A valid fully qualified distinguished name should be provided to include specific groups else the create / update realization of the Group containing an invalid/ partial DN will fail. This value is valid only if it matches to exactly 1 LDAP object on the LDAP server.
	DistinguishedName string `json:"distinguished_name"`
	// This is the base distinguished name for the domain where this particular group resides. (e.g. dc=example,dc=com) Each active directory domain has a domain naming context (NC), which contains domain-specific data. The root of this naming context is represented by a domain's distinguished name (DN) and is typically referred to as the NC head.
	DomainBaseDistinguishedName string `json:"domain_base_distinguished_name"`
	// A security identifier (SID) is a unique value of variable length used to identify a trustee. A SID consists of the following components: The revision level of the SID structure; A 48-bit identifier authority value that identifies the authority that issued the SID; A variable number of subauthority or relative identifier (RID) values that uniquely identify the trustee relative to the authority that issued the SID. This field is only populated for Microsoft Active Directory identity store.
	Sid string `json:"sid,omitempty"`
}

// Information about a single LDAP server.
type IdentitySourceLdapServer struct {
	// If using LDAPS or STARTTLS, provide the X.509 certificate of the LDAP server in PEM format. This property is not required when connecting without TLS encryption and is ignored in that case.
	Certificates []string `json:"certificates,omitempty"`
	// A username used to authenticate to the directory when admnistering roles in NSX. This user should have privileges to search the LDAP directory for groups and users. This user is also used in some cases (OpenLDAP) to look up an NSX user's distinguished name based on their NSX login name. If omitted, NSX will authenticate to the LDAP server using an LDAP anonymous bind operation. For Active Directory, provide a userPrincipalName (e.g. administrator@airius.com) or the full distinguished nane. For OpenLDAP, provide the distinguished name of the user (e.g. uid=admin, cn=airius, dc=com).
	BindIdentity string `json:"bind_identity,omitempty"`
	// If set to true, Use the StartTLS extended operation to upgrade the connection to TLS before sending any sensitive information. The LDAP server must support the StartTLS extended operation in order for this protocol to operate correctly. This option is ignored if the URL scheme is LDAPS.
	UseStarttls bool `json:"use_starttls,omitempty"`
	// The URL for the LDAP server. Supported URL schemes are LDAP and LDAPS. Either a hostname or an IP address may be given, and the port number is optional and defaults to 389 for the LDAP scheme and 636 for the LDAPS scheme.
	Url string `json:"url"`
	// A password used when authenticating to the directory.
	Password string `json:"password,omitempty"`
	// Allows the LDAP server to be enabled or disabled. When disabled, this LDAP server will not be used to authenticate users.
	Enabled bool `json:"enabled,omitempty"`
}

// Information about a single LDAP server endpoint.
type IdentitySourceLdapServerEndpoint struct {
	// The URL for the LDAP server. Supported URL schemes are LDAP and LDAPS. Either a hostname or an IP address may be given, and the port number is optional and defaults to 389 for the LDAP scheme and 636 for the LDAPS scheme.
	Url string `json:"url"`
	// If set to true, Use the StartTLS extended operation to upgrade the connection to TLS before sending any sensitive information. The LDAP server must support the StartTLS extended operation in order for this protocol to operate correctly. This option is ignored if the URL scheme is LDAPS.
	UseStarttls bool `json:"use_starttls,omitempty"`
}

// The results of probing an individual LDAP server.
type IdentitySourceLdapServerProbeResult struct {
	// THe URL of the probed LDAP host.
	Url string `json:"url,omitempty"`
	// Detail about errors encountered during the probe.
	Errors []LdapProbeError `json:"errors,omitempty"`
	// Overall result of the probe. If the probe was able to connect to the LDAP service, authenticate using the provided credentials, and perform searches of the configured user and group search bases without error, the result is SUCCESS.  Otherwise, the result is FAILURE, and additional details may be found in the errors property.
	Result string `json:"result,omitempty"`
}

// IDS configuration to enable/disable IDS on cluster level.
type IdsClusterConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool                     `json:"marked_for_delete,omitempty"`
	Cluster         *PolicyResourceReference `json:"cluster"`
	// If set to true, IDS is enabled on the respective cluster
	IdsEnabled bool `json:"ids_enabled"`
}

// Paged collection of IDS cluster configuration
type IdsClusterConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Cluster wise IDS configuration list results
	Results []IdsClusterConfig `json:"results"`
}

// IDS Profile which contains the signatures and will be used in IDS rules.
type IdsProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Represents the severities of signatures which are part of this profile.
	Severities []IdsProfileSeverity `json:"severities"`
}

// Paged collection of IDS profiles
type IdsProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IDS profile list results
	Results []IdsProfile `json:"results"`
}

// Intrusion Detection System Profile severity.
type IdsProfileSeverity struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Contains the id of signatures that will be ignored as part of the profile.
	IgnoreSignatures []string `json:"ignore_signatures,omitempty"`
	// Represents the severity of a profile.
	Severity string `json:"severity"`
}

// Represents the Intrusion Detection System rule which indicates the action to be performed for the corresponding workload groups.
type IdsRule struct {
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol string `json:"ip_protocol,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string `json:"profiles,omitempty"`
	// This is a unique 4 byte positive number that is assigned by the system.  This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on.
	RuleId int64 `json:"rule_id,omitempty"`
	// A flag to indicate whether rule is a default rule.
	IsDefault bool `json:"is_default,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded bool `json:"destinations_excluded,omitempty"`
	// This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded bool `json:"sources_excluded,omitempty"`
	// The action to be applied.
	Action string `json:"action,omitempty"`
	// collections of IDS profiles.
	IdsProfiles []string `json:"ids_profiles,omitempty"`
}

// Paged collection of IDS rules
type IdsRuleListResult struct {
	// IDS rule list results
	Results []IdsRule `json:"results"`
}

// Represents the Intrusion Detection System Security Policy, which contains  the list of IDS Rules.
type IdsSecurityPolicy struct {
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// IDS Rules that are a part of this SecurityPolicy
	Rules []IdsRule `json:"rules,omitempty"`
}

// Paged collection of IDS security policies
type IdsSecurityPolicyListResult struct {
	// IDS security policy list results
	Results []IdsSecurityPolicy `json:"results"`
}

// Represents the Intrusion Detection System settings.
type IdsSettings struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Parameter to let the user decide whether to update the IDS Signatures automatically or not.
	AutoUpdate bool `json:"auto_update,omitempty"`
	// Flag which tells whether IDS was ever enabled.
	IdsEverEnabled bool `json:"ids_ever_enabled,omitempty"`
}

// Intrusion Detection System Signature .
type IdsSignature struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Signature cvssv3 score.
	Cvssv3 string `json:"cvssv3,omitempty"`
	// Signature cvssv2 score.
	Cvssv2 string `json:"cvssv2,omitempty"`
	// Class type of Signature.
	ClassType string `json:"class_type,omitempty"`
	// Represents revision of the Signature.
	SignatureRevision string `json:"signature_revision,omitempty"`
	// Product affected by this signature.
	ProductAffected string `json:"product_affected,omitempty"`
	// Flow established from server, from client etc.
	Flow string `json:"flow,omitempty"`
	// Represents the severity of the Signature.
	Severity string `json:"severity,omitempty"`
	// List of mitre attack URLs pertaining to signature
	Urls []string `json:"urls,omitempty"`
	// Target of the signature.
	AttackTarget string `json:"attack_target,omitempty"`
	// Represents the Signature's id.
	SignatureId string `json:"signature_id,omitempty"`
	// CVE score
	Cves []string `json:"cves,omitempty"`
	// Represents the internal categories a signature belongs to.
	Categories []string `json:"categories,omitempty"`
	// Signature name.
	Name string `json:"name,omitempty"`
}

// Paged collection of IDS signatures
type IdsSignatureListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IDS signature list results
	Results []IdsSignature `json:"results"`
}

// Ids signature status.
type IdsSignatureStatus struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// READY means signatures were downloaded and parsed successfully. PENDING means that signatures download is in progress. ERROR means error occurred during signature processing. DISABLED means IDS is disabled.
	DownloadStatus string `json:"download_status,omitempty"`
	// AVAILABLE means the signatures are available for the version. UNAVAILABLE means there are no available signatures for the version.
	SignatureStatus string `json:"signature_status,omitempty"`
	// Represents the version id.
	VersionId string `json:"version_id,omitempty"`
}

// It represents the version information corresponding to which the signatures will be available.
type IdsSignatureVersion struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This flag tells the status of the signatures under a version. OUTDATED: It means the signatures under this version are outdated and new version is available. LATEST: It means the signatures of this version are up to date.
	Status string `json:"status,omitempty"`
	// Represents the version's change log.
	ChangeLog string `json:"change_log,omitempty"`
	// Time when this version was downloaded and saved.
	UpdateTime int64 `json:"update_time,omitempty"`
	// Flag which tells whether te SIgnature version is uploaded by user or not.
	UserUploaded bool `json:"user_uploaded,omitempty"`
	// This flag tells which Version is currently active. ACTIVE: It means the signatures under this version is currently been used  under IDS Profiles. NOTACTIVE: It means signatures of this version are available but not  being used in IDS Profiles.
	State string `json:"state,omitempty"`
	// Represents the version id.
	VersionId string `json:"version_id,omitempty"`
}

// Paged collection of IDS signature versions
type IdsSignatureVersionListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IDS signature version list results
	Results []IdsSignatureVersion `json:"results"`
}

// IDS configuration to enable/disable IDS on standalone host level.
type IdsStandaloneHostConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If set to true, IDS is enabled on standalone hosts.
	IdsEnabled bool `json:"ids_enabled"`
}

// IGMP (Internet Group Management Protocol) membership details.
type IgmpMembership struct {
	// Multicast group membership active time.
	Uptime string `json:"uptime,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// Interface on which multicast group membership is learned.
	Interface_ string `json:"interface,omitempty"`
	// Number of multicast sources.
	NoOfSources string `json:"no_of_sources,omitempty"`
	// IP address of multicast source.
	SourceAddress string `json:"source_address,omitempty"`
	// IGMP version.
	IgmpVersion int64 `json:"igmp_version,omitempty"`
}

type IgmpMembershipCsvRecord struct {
	// Transport node uuid or policy path.
	TransportNode string `json:"transport_node,omitempty"`
	// Multicast group membership active time.
	Uptime string `json:"uptime,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// Interface on which multicast group membership is learned.
	Interface_ string `json:"interface,omitempty"`
	// Number of multicast sources.
	NoOfSources string `json:"no_of_sources,omitempty"`
	// IP address of multicast source.
	SourceAddress string `json:"source_address,omitempty"`
	// IGMP version.
	IgmpVersion int64 `json:"igmp_version,omitempty"`
}

// IGMP Memberships.
type IgmpMemberships struct {
	// Policy path to Tier0 gateway.
	GatewayPath            string                   `json:"gateway_path"`
	IgmpMembershipsPerEdge []IgmpMembershipsPerEdge `json:"igmp_memberships_per_edge,omitempty"`
}

type IgmpMembershipsInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string                    `json:"file_name,omitempty"`
	Results  []IgmpMembershipCsvRecord `json:"results,omitempty"`
}

// IGMP Memberships Per Edge.
type IgmpMembershipsPerEdge struct {
	IgmpMemberships []IgmpMembership `json:"igmp_memberships,omitempty"`
	// Policy path to edge node.
	EdgePath string `json:"edge_path"`
}

// A ServiceEntry that represents IGMP protocol
type IgmpTypeServiceEntry struct {
	ResourceType string `json:"resource_type"`
}

// A list of fields to include in query results
type IncludedFieldsParameters struct {
	// Comma separated list of fields that should be included in query result
	IncludedFields string `json:"included_fields,omitempty"`
}

// Infra space related policy.
type Infra struct {
	// The connectivity strategy is deprecated. Use default layer3 rule, /infra/domains/default/security-policies/default-layer3-security-policy/rules/default-layer3-rule. This field indicates the default connectivity policy for the infra or tenant space WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rules are added.
	ConnectivityStrategy string `json:"connectivity_strategy,omitempty"`
	// This field is used while creating or updating the infra space.
	Domains []Domain `json:"domains,omitempty"`
}

// A shaper that specifies ingress rate properties in kb/s
type IngressBroadcastRateLimiter struct {
	Enabled bool `json:"enabled"`
	// Type rate limiter
	ResourceType string `json:"resource_type"`
	// Peak bandwidth in kb/s
	PeakBandwidth int32 `json:"peak_bandwidth,omitempty"`
	// Average bandwidth in kb/s
	AverageBandwidth int32 `json:"average_bandwidth,omitempty"`
	// Burst size in bytes
	BurstSize int32 `json:"burst_size,omitempty"`
}

// A shaper that specifies ingress rate properties in Mb/s
type IngressRateLimiter struct {
	Enabled bool `json:"enabled"`
	// Type rate limiter
	ResourceType string `json:"resource_type"`
	// The peak bandwidth rate is used to support burst traffic.
	PeakBandwidth int32 `json:"peak_bandwidth,omitempty"`
	// You can use the average bandwidth to reduce network congestion.
	AverageBandwidth int32 `json:"average_bandwidth,omitempty"`
	// The burst duration is set in the burst size setting.
	BurstSize int32 `json:"burst_size,omitempty"`
}

type InitiateClusterRestoreRequest struct {
	// Timestamp of the backed-up configuration from which the appliance will be restored
	Timestamp int64 `json:"timestamp,omitempty"`
	// Unique id of the backed-up configuration from which the appliance will be restored
	NodeId string `json:"node_id,omitempty"`
	// IP address or FQDN of the node from which the backup was taken
	IpAddress string `json:"ip_address,omitempty"`
}

// Injection holding a key and a corresponding value.
type Injection struct {
	Value *InjectionValue `json:"value"`
	// Injection key.
	Key string `json:"key"`
}

// Injection Value.
type InjectionValue struct {
	// Injection Value resource type.
	ResourceType string `json:"resource_type"`
}

// Statistics for data NICs on an instance runtime
type InstanceRuntimeStatistic struct {
	// List of statistics for all data NICs on a runtime.
	InterfaceStatistics []RuntimeInterfaceStatistics `json:"interface_statistics,omitempty"`
	// Name of the instance runtime
	RuntimeName string `json:"runtime_name,omitempty"`
	// Specifies whether statistics are for primary runtime.
	PrimaryRuntimeStats bool `json:"primary_runtime_stats,omitempty"`
	// Id of the instance runtime
	RuntimeId string `json:"runtime_id,omitempty"`
}

// Details of the instructions displayed during restore process
type InstructionInfo struct {
	// A list of fields that are displayable to users in a table
	Fields []string `json:"fields,omitempty"`
	// UUID of the instruction
	Id string `json:"id,omitempty"`
	// A list of actions that are to be applied to resources
	Actions []string `json:"actions,omitempty"`
	// Instruction name
	Name string `json:"name,omitempty"`
}

// Request parameters that represents a an intent path.
type IntentRuntimeRequestParameters struct {
	// Policy Path referencing a site. This is applicable only on a GlobalManager. If no site_path is specified, then based on the span of the intent the response will be fetched from the respective sites
	SitePath string `json:"site_path,omitempty"`
	// Policy Path referencing an intent object.
	IntentPath string `json:"intent_path"`
}

type InterfaceArpCsvRecord struct {
	// The IP address
	Ip string `json:"ip"`
	// The MAC address
	MacAddress string `json:"mac_address"`
}

type InterfaceArpEntry struct {
	// The IP address
	Ip string `json:"ip"`
	// The MAC address
	MacAddress string `json:"mac_address"`
}

type InterfaceArpTable struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The ID of the logical router port
	InterfacePath string              `json:"interface_path"`
	Results       []InterfaceArpEntry `json:"results,omitempty"`
	// Policy path of edge node.
	EdgePath string `json:"edge_path,omitempty"`
	// String Path of the enforcement point.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

type InterfaceArpTableInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string `json:"file_name,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64                   `json:"last_update_timestamp,omitempty"`
	Results             []InterfaceArpCsvRecord `json:"results,omitempty"`
}

// Duplicate address detection status on the interface.
type InterfaceDadState struct {
	// Array of DAD status which contains DAD information for IP addresses on the interface.
	DadStatuses []InterfaceIPv6DadStatus `json:"dad_statuses,omitempty"`
	// Policy path or realization ID of interface for which IPv6 DAD status is returned.
	InterfacePath string `json:"interface_path,omitempty"`
}

// Duplicate address detection status for IP address on the interface.
type InterfaceIPv6DadStatus struct {
	// DAD status for IP address on the port.
	Status string `json:"status,omitempty"`
	// Array of edge nodes on which DAD status is reported for given IP address.
	EdgePaths []string `json:"edge_paths,omitempty"`
	// IP address on the port for which DAD status is reported.
	IpAddress string `json:"ip_address,omitempty"`
}

// Subnet specification for interface connectivity
type InterfaceSubnet struct {
	// IP addresses assigned to interface
	IpAddresses []string `json:"ip_addresses"`
	// Subnet prefix length
	PrefixLen int32 `json:"prefix_len"`
}

// Intersite gateway configuration.
type IntersiteGatewayConfig struct {
	// IPv4 subnet for inter-site transit segment connecting service routers across sites for stretched gateway. For IPv6 link local subnet is auto configured.
	IntersiteTransitSubnet string `json:"intersite_transit_subnet,omitempty"`
	// Primary egress site for gateway. T0/T1 gateway in Active/Standby mode supports stateful services on primary site. In this mode primary site must be set if gateway is stretched to more than one site. For T0 gateway in Active/Active primary site is optional field. If set then secondary site prefers routes learned from primary over locally learned routes. This field is not applicable for T1 gateway with no services.
	PrimarySitePath string `json:"primary_site_path,omitempty"`
	// Epoch(in seconds) is auto updated based on system current timestamp when primary locale service is updated. It is used for resolving conflict during site failover. If system clock not in sync then User can optionally override this. New value must be higher than the current value.
	LastAdminActiveEpoch int64 `json:"last_admin_active_epoch,omitempty"`
	// Fallback site to be used as new primary site on current primary site failure. Disaster recovery must be initiated via API/UI. Fallback site configuration is supported only for T0 gateway. T1 gateway will follow T0 gateway's primary site during disaster recovery.
	FallbackSites []string `json:"fallback_sites,omitempty"`
}

// Schedule to specify the interval time at which automated backups need to be taken
type IntervalBackupSchedule struct {
	// Schedule type
	ResourceType string `json:"resource_type"`
	// Time interval in seconds between two consecutive automated backups
	SecondsBetweenBackups int64 `json:"seconds_between_backups,omitempty"`
}

// Allocation parameters for the IP address (e.g. specific IP address) can be specified. Tags, display_name and description attributes are not supported in this release.
type IpAddressAllocation struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Address that is allocated from pool
	AllocationIp string `json:"allocation_ip,omitempty"`
}

// List of IP address allocations
type IpAddressAllocationListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of IpAddressAllocations
	Results []IpAddressAllocation `json:"results,omitempty"`
}

// A block of IP addresses defined by a start address and a mask/prefix (network CIDR). An IP block is typically large & allocated to a tenant for automated consumption. An IP block is always a contiguous address space, for example 192.0.0.1/8. An IP block can be further subdivided into subnets called IP block subnets. These IP block subnets can be added to IP pools and used for IP allocation.
type IpAddressBlock struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Represents a network address and the prefix length which will be associated with a layer-2 broadcast domain. Support IPv4 and IPv6 CIDR.
	Cidr string `json:"cidr"`
}

// Paged collection of IpAddressBlocks
type IpAddressBlockListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IpAddressBlock list results
	Results []IpAddressBlock `json:"results"`
}

// Represents IP address expressions in the form of an array, to support addition of IP addresses in a group. Avoid creating groups with multiple IPAddressExpression. In future releases, group will be restricted to contain a single IPAddressExpression. To group IPAddresses, use nested groups instead of multiple IPAddressExpressions.
type IpAddressExpression struct {
	ResourceType string `json:"resource_type"`
	// This array can consist of a single IP address, IP address range or a subnet. Its type can be of either IPv4 or IPv6. Both IPv4 and IPv6 addresses within one expression is not allowed. Supported list of formats are, \"192.168.1.1\", \"192.168.1.1-192.168.1.100\", \"192.168.0.0/24\", \"fe80::250:56ff:fe83:318c\", \"fe80::250:56ff:fe83:3181-fe80::250:56ff:fe83:318c\", \"fe80::250:56ff:fe83:318c/64\".
	IpAddresses []string `json:"ip_addresses"`
}

// Ipaddress information of the fabric node.
type IpAddressInfo struct {
	// Source of the ipaddress information.
	Source string `json:"source,omitempty"`
	// IP Addresses of the the virtual network interface, as discovered in the source.
	IpAddresses []string `json:"ip_addresses,omitempty"`
}

// Collection of IP Addresses.
type IpAddressList struct {
	// The array contains IP addresses.
	IpAddresses []string `json:"ip_addresses"`
}

// IpAddressPool is a collection of subnets. The subnets can either be derived from an IpBlock or specified by the user. User can request for IP addresses to be allocated from a pool. When an IP is requested from a pool, the IP that is returned can come from any subnet that belongs to the pool.
type IpAddressPool struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Delay in milliseconds, while releasing allocated IP address from IP pool (Default is 2 mins).
	IpReleaseDelay int64 `json:"ip_release_delay,omitempty"`
}

// This type of subnet allows user to dynamically carve a subnet out of a preconfigured IpAddressBlock. The user must specify the size of the subnet and the IpAddressBlock from which the subnet is to be derived. If the required amount of IP adress space is available in the specified IpAddressBlock, the system automatically configures subnet range.
type IpAddressPoolBlockSubnet struct {
	// Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string `json:"resource_type"`
	// The path of the IpAddressBlock from which the subnet is to be created.
	IpBlockPath string `json:"ip_block_path"`
	// For internal system use Only. Represents start ip address of the subnet from IP block. Subnet ip adddress will start from this ip address.
	StartIp string `json:"start_ip,omitempty"`
	// If this property is set to true, the first IP in the range will be reserved for gateway.
	AutoAssignGateway bool `json:"auto_assign_gateway,omitempty"`
	// The size parameter is required for subnet creation. It must be specified during creation but cannot be changed later.
	Size int64 `json:"size"`
}

// Paged collection of IpAddressPools
type IpAddressPoolListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IpAddressPool list results
	Results []IpAddressPool `json:"results"`
}

// This type of subnet is statically configured by the user. The user provides the range details and the gateway for the subnet.
type IpAddressPoolStaticSubnet struct {
	// Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string `json:"resource_type"`
	// The collection of upto 3 DNS servers for the subnet.
	DnsNameservers []string `json:"dns_nameservers,omitempty"`
	// Subnet representation is a network address and prefix length
	Cidr string `json:"cidr"`
	// The default gateway address on a layer-3 router.
	GatewayIp string `json:"gateway_ip,omitempty"`
	// A collection of IPv4 or IPv6 IP Pool Ranges.
	AllocationRanges []IpPoolRange `json:"allocation_ranges"`
	// The DNS suffix for the DNS server.
	DnsSuffix string `json:"dns_suffix,omitempty"`
}

// IpAddressPoolSubnet can either be carved out of a PolicyBlock or statically specified by the user. In the first case where the subnet is carved out of a IpAddressBlock, the user must specify the ID of the block from which this subnet is to be derived. This block must be pre-created. The subnet range is auto populated by the system. In the second case, the user configures the subnet range directly. No IpAddressBlock is required.
type IpAddressPoolSubnet struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Specifies whether the IpAddressPoolSubnet is to be carved out of a IpAddressBlock or will be specified by the user
	ResourceType string `json:"resource_type"`
}

type IpAddressPoolSubnetListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IP Pool subnet list results
	Results []IpAddressPoolSubnet `json:"results"`
}

// IP Address and Port information
type IpAddressPortPair struct {
	// The IPAddress to be combined with Port for defining specific access point.
	IpAddress string `json:"ip_address"`
	// The port to be combined with IPAddress for defining a specific access point.
	Port int32 `json:"port,omitempty"`
}

// Using this profile to configure different options of IP Discovery
type IpDiscoveryProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This property controls the ARP and ND cache timeout period. It is recommended that this property be greater than the ARP/ND cache timeout on the VM.
	ArpNdBindingTimeout  int32                        `json:"arp_nd_binding_timeout,omitempty"`
	IpV6DiscoveryOptions *IPv6DiscoveryOptions        `json:"ip_v6_discovery_options,omitempty"`
	DuplicateIpDetection *DuplicateIpDetectionOptions `json:"duplicate_ip_detection,omitempty"`
	// Indicates whether \"Trust on First Use(TOFU)\" paradigm is enabled.
	TofuEnabled          bool                  `json:"tofu_enabled,omitempty"`
	IpV4DiscoveryOptions *IPv4DiscoveryOptions `json:"ip_v4_discovery_options,omitempty"`
}

// Paged collection of IP Discovery Profiles
type IpDiscoveryProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IP Discovery profile list results
	Results []IpDiscoveryProfile `json:"results"`
}

type IpInfo struct {
	// IPv4 Addresses
	IpAddresses []string `json:"ip_addresses"`
	// Subnet Prefix Length
	PrefixLength int64 `json:"prefix_length"`
}

// A set of IPv4 or IPv6 addresses defined by a start and end address.
type IpPoolRange struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// The start IP Address of the IP Range.
	Start string `json:"start"`
	// The end IP Address of the IP Range.
	End string `json:"end"`
}

// A ServiceEntry that represents an IP protocol
type IpProtocolServiceEntry struct {
	ResourceType   string `json:"resource_type"`
	ProtocolNumber int64  `json:"protocol_number"`
}

// Dead peer detection (DPD) is a method that allows detection of unreachable internet key excahnge (IKE) peers. Any changes affects all IPSec VPN sessions consuming this profile.
type IpSecVpnDpdProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Maximum number of DPD messages' retry attempts. This value is applicable for both dpd probe modes, periodic and on-demand.
	RetryCount int64 `json:"retry_count,omitempty"`
	// If true, enable dead peer detection.
	Enabled bool `json:"enabled,omitempty"`
	// DPD probe mode is used to query the liveliness of the peer. Two modes are possible: - PERIODIC: is used to query the liveliness of the peer at regular intervals (dpd_probe_interval). It does not take into consideration traffic coming from the peer. The benefit of this mode over the on-demand mode is earlier detection of dead peers. However, use of periodic DPD incurs extra overhead. When communicating to large numbers of peers, please consider using on-demand DPD instead. - ON_DEMAND: is used to query the liveliness of the peer by instructing the local endpoint to send DPD message to a peer if there is traffic to send to the peer AND the peer was idle for dpd_probe_interval seconds (i.e. there was no traffic from the peer for dpd_probe_interval seconds).
	DpdProbeMode string `json:"dpd_probe_mode,omitempty"`
	// DPD probe interval defines an interval for DPD probes (in seconds). - When the DPD probe mode is periodic, this interval is the number of seconds between DPD messages. - When the DPD probe mode is on-demand, this interval is the number of seconds during which traffic is not received from the peer before DPD retry messages are sent if there is IPSec traffic to send. For PERIODIC Mode:  Minimum: 3  Maximum: 360  Default: 60 For ON_DEMAND Mode:  Minimum: 1  Maximum: 10  Default: 3
	DpdProbeInterval int64 `json:"dpd_probe_interval,omitempty"`
}

// Paged Collection of IPSecVpnDpdProfile.
type IpSecVpnDpdProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnDpdProfile list results.
	Results []IpSecVpnDpdProfile `json:"results"`
}

// IKE Profile is a reusable profile that captures IKE phase one negotiation parameters. Any changes affects all IPSec VPN sessions consuming this profile.
type IpSecVpnIkeProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.
	DigestAlgorithms []string `json:"digest_algorithms,omitempty"`
	// Encryption algorithm is used during Internet Key Exchange(IKE) negotiation. Default is AES_128.
	EncryptionAlgorithms []string `json:"encryption_algorithms,omitempty"`
	// Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.
	DhGroups []string `json:"dh_groups,omitempty"`
	// Life time for security association. Default is 86400 seconds (1 day).
	SaLifeTime int64 `json:"sa_life_time,omitempty"`
	// IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.
	IkeVersion string `json:"ike_version,omitempty"`
}

// Paged Collection of IPSecVpnIkeProfile.
type IpSecVpnIkeProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnIkeProfile list results.
	Results []IpSecVpnIkeProfile `json:"results"`
}

// Status for IPSec VPN Ike session UP, DOWN, NEGOTIATING and fail reason if Ike session is down.
type IpSecVpnIkeSessionStatus struct {
	// Reason for failure.
	FailReason string `json:"fail_reason,omitempty"`
	// Ike session service status UP, DOWN and NEGOTIATING.
	IkeSessionState string `json:"ike_session_state,omitempty"`
}

// Traffic statistics for IPSec VPN Ike session. Note - Not supported in this release.
type IpSecVpnIkeTrafficStatistics struct {
	// Number of packets out.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Fail count.
	FailCount int64 `json:"fail_count,omitempty"`
	// Number of packets in.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Number of bytes out.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Number of bytes in.
	BytesIn int64 `json:"bytes_in,omitempty"`
}

// Local endpoint represents a tier-0/tier-1 on which tunnel needs to be terminated.
type IpSecVpnLocalEndpoint struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IPV4 Address of local endpoint.
	LocalAddress string `json:"local_address"`
	// List of policy paths referencing certificate authority (CA) to verify peer certificates.
	TrustCaPaths []string `json:"trust_ca_paths,omitempty"`
	// Local identifier.
	LocalId string `json:"local_id,omitempty"`
	// List of policy paths referencing certificate revocation list (CRL) to peer certificates.
	TrustCrlPaths []string `json:"trust_crl_paths,omitempty"`
	// Policy path referencing site certificate.
	CertificatePath string `json:"certificate_path,omitempty"`
}

// Paged Collection of IPSecVpnLocalEndpoint.
type IpSecVpnLocalEndpointListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnLocalEndpoint list results.
	Results []IpSecVpnLocalEndpoint `json:"results"`
}

// IPSec VPN policy traffic statistics.
type IpSecVpnPolicyTrafficStatistics struct {
	AggregateTrafficCounters *IpSecVpnTrafficCounters `json:"aggregate_traffic_counters,omitempty"`
	// Tunnel statistics.
	TunnelStatistics []IpSecVpnTunnelTrafficStatistics `json:"tunnel_statistics,omitempty"`
	// L3Vpn rule path.
	RulePath string `json:"rule_path,omitempty"`
}

// For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic that meets the policy’s match criteria.
type IpSecVpnRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of local subnets. Specifying no value is interpreted as 0.0.0.0/0.
	Sources []IpSecVpnSubnet `json:"sources,omitempty"`
	// PROTECT - Protect rules are defined per policy based IPSec VPN session. BYPASS - Bypass rules are defined per IPSec VPN service and affects all policy based IPSec VPN sessions. Bypass rules are prioritized over protect rules.
	Action string `json:"action,omitempty"`
	// A flag to enable/disable the rule.
	Enabled bool `json:"enabled,omitempty"`
	// A flag to enable/disable the logging for the rule.
	Logged bool `json:"logged,omitempty"`
	// A sequence number is used to give a priority to an IPSecVpnRule.
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// List of peer subnets. Specifying no value is interpreted as 0.0.0.0/0.
	Destinations []IpSecVpnSubnet `json:"destinations,omitempty"`
}

// Create and manage IPSec VPN service for given locale service.
type IpSecVpnService struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Log level for internet key exchange (IKE).
	IkeLogLevel string `json:"ike_log_level,omitempty"`
	// Bypass policy rules are configured using VPN service. Bypass rules always have higher priority over protect rules and they affect all policy based vpn sessions associated with the IPSec VPN service. Protect rules are defined per policy based vpn session.
	BypassRules []IpSecVpnRule `json:"bypass_rules,omitempty"`
	// Enable/disable IPSec HA state sync. IPSec HA state sync can be disabled if in case there are performance issues w.r.t. the state sync messages.
	HaSync bool `json:"ha_sync,omitempty"`
	// If true, enable VPN services for given locale service.
	Enabled bool `json:"enabled,omitempty"`
}

// Paged Collection of IPSecVpnService.
type IpSecVpnServiceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnService list results.
	Results []IpSecVpnService `json:"results"`
}

// VPN session defines connection between local and peer endpoint. Until VPN session is defined configuration is not realized.
type IpSecVpnSession struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk string `json:"psk,omitempty"`
	// Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath string `json:"dpd_profile_path,omitempty"`
	// Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath string `json:"ike_profile_path,omitempty"`
	// Enable/Disable IPSec VPN session.
	Enabled bool `json:"enabled,omitempty"`
	// Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode string `json:"connection_initiation_mode,omitempty"`
	// Policy path referencing Local endpoint.
	LocalEndpointPath string `json:"local_endpoint_path"`
	// Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath string `json:"tunnel_profile_path,omitempty"`
	// Compliance suite.
	ComplianceSuite string                         `json:"compliance_suite,omitempty"`
	TcpMssClamping  *TcpMaximumSegmentSizeClamping `json:"tcp_mss_clamping,omitempty"`
	// Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode string `json:"authentication_mode,omitempty"`
	// Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId string `json:"peer_id"`
	// Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress string `json:"peer_address"`
	// A Policy Based VPN requires to define protect rules that match   local and peer subnets. IPSec security associations is   negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over   policy based VPN. IP Tunnel port is created and all traffic routed via   tunnel port is protected. Routes can be configured statically   or can be learned through BGP. A route based VPN is must for establishing   redundant VPN session to remote site.
	ResourceType string `json:"resource_type"`
}

// Paged Collection of IPSecVpnSession.
type IpSecVpnSessionListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnSession list results.
	Results []IpSecVpnSession `json:"results"`
}

// IPSec VPN session statistics represents statistics on an NSX-T type of enforcement point. It gives aggregated statistics of all policies for all the tunnels.
type IpSecVpnSessionStatistics struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point wehere the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp  int64                         `json:"last_update_timestamp,omitempty"`
	IkeTrafficStatistics *IpSecVpnIkeTrafficStatistics `json:"ike_traffic_statistics,omitempty"`
	IkeStatus            *IpSecVpnIkeSessionStatus     `json:"ike_status,omitempty"`
	// Gives aggregate traffic statistics across all ipsec tunnels and individual tunnel statistics.
	PolicyStatistics         []IpSecVpnPolicyTrafficStatistics `json:"policy_statistics,omitempty"`
	AggregateTrafficCounters *IpSecVpnTrafficCounters          `json:"aggregate_traffic_counters,omitempty"`
}

// IPSec VPN session statistics represents statistics on an NSX-T type of enforcement point. It gives aggregated statistics of all policies for all the tunnels.
type IpSecVpnSessionStatisticsNsxT struct {
	ResourceType         string                        `json:"resource_type"`
	IkeTrafficStatistics *IpSecVpnIkeTrafficStatistics `json:"ike_traffic_statistics,omitempty"`
	// Display Name of vpn session.
	DisplayName string `json:"display_name,omitempty"`
	// Gives aggregate traffic statistics across all ipsec tunnels and individual tunnel statistics.
	PolicyStatistics []IpSecVpnPolicyTrafficStatistics `json:"policy_statistics,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp      int64                     `json:"last_update_timestamp,omitempty"`
	IkeStatus                *IpSecVpnIkeSessionStatus `json:"ike_status,omitempty"`
	AggregateTrafficCounters *IpSecVpnTrafficCounters  `json:"aggregate_traffic_counters,omitempty"`
}

// IPSec VPN Session Statistics Per Enforcement Point.
type IpSecVpnSessionStatisticsPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// IPSec VPN Session Status represents status on an NSX-T type of enforcement point.
type IpSecVpnSessionStatusNsxT struct {
	ResourceType string `json:"resource_type"`
	// Gives session status consolidated using IKE status and tunnel status. It can be UP, DOWN, DEGRADED. If IKE and all tunnels are UP status will be UP, if all down it will be DOWN, otherwise it will be DEGRADED.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// Display Name of vpn session.
	DisplayName string `json:"display_name,omitempty"`
	// Number of failed tunnels.
	FailedTunnels int64 `json:"failed_tunnels,omitempty"`
	// Number of negotiated tunnels.
	NegotiatedTunnels int64 `json:"negotiated_tunnels,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Total number of tunnels.
	TotalTunnels             int64                     `json:"total_tunnels,omitempty"`
	IkeStatus                *IpSecVpnIkeSessionStatus `json:"ike_status,omitempty"`
	AggregateTrafficCounters *IpSecVpnTrafficCounters  `json:"aggregate_traffic_counters,omitempty"`
}

// IPSec VPN Session Status Per Enforcement Point.
type IpSecVpnSessionStatusPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Used to specify the local/peer subnets in IPSec VPN rule.
type IpSecVpnSubnet struct {
	// Subnet used in policy rule.
	Subnet string `json:"subnet"`
}

// Traffic counters for IPSec VPN session.
type IpSecVpnTrafficCounters struct {
	// Total number of packets sent.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of outgoing packets dropped on outbound security association.
	DroppedPacketsOut int64 `json:"dropped_packets_out,omitempty"`
	// Total number of bytes recevied.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of bytes sent.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Total number of incoming packets dropped on inbound security association.
	DroppedPacketsIn int64 `json:"dropped_packets_in,omitempty"`
	// Total number of packets received.
	PacketsIn int64 `json:"packets_in,omitempty"`
}

// Provides IPSec VPN session status.
type IpSecVpnTransportStatus struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing Transport Tunnel.
	TransportTunnelPath string                     `json:"transport_tunnel_path,omitempty"`
	SessionStatus       *IpSecVpnSessionStatusNsxT `json:"session_status,omitempty"`
}

// IP tunnel interface configuration.
type IpSecVpnTunnelInterface struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP Tunnel interface (commonly referred as VTI) subnet.
	IpSubnets []TunnelInterfaceIpSubnet `json:"ip_subnets"`
}

// IPSec VPN tunnel profile is a reusable profile that captures phase two negotiation parameters and IPSec tunnel properties. Any changes affects all IPSec VPN sessions consuming this profile.
type IpSecVpnTunnelProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Collection of type specific properties. As of now, to hold encapsulation mode and transform protocol.
	ExtendedAttributes []AttributeVal `json:"extended_attributes,omitempty"`
	// Algorithm to be used for message digest. Default digest algorithm is implicitly covered by default encryption algorithm \"AES_GCM_128\".
	DigestAlgorithms []string `json:"digest_algorithms,omitempty"`
	// Encryption algorithm to encrypt/decrypt the messages exchanged between IPSec VPN initiator and responder during tunnel negotiation. Default is AES_GCM_128.
	EncryptionAlgorithms []string `json:"encryption_algorithms,omitempty"`
	// If true, perfect forward secrecy (PFS) is enabled.
	EnablePerfectForwardSecrecy bool `json:"enable_perfect_forward_secrecy,omitempty"`
	// Diffie-Hellman group to be used if PFS is enabled. Default is GROUP14.
	DhGroups []string `json:"dh_groups,omitempty"`
	// Defragmentation policy helps to handle defragmentation bit present in the inner packet. COPY copies the defragmentation bit from the inner IP packet into the outer packet. CLEAR ignores the defragmentation bit present in the inner packet.
	DfPolicy string `json:"df_policy,omitempty"`
	// SA life time specifies the expiry time of security association. Default is 3600 seconds.
	SaLifeTime int64 `json:"sa_life_time,omitempty"`
}

// Paged Collection of IPSecVpnTunnelProfile.
type IpSecVpnTunnelProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPSecVpnTunnelProfile list results.
	Results []IpSecVpnTunnelProfile `json:"results"`
}

// IPSec VPN tunnel traffic statistics.
type IpSecVpnTunnelTrafficStatistics struct {
	// Total number of packets dropped while sending for any reason.
	PacketsSentOtherError int64 `json:"packets_sent_other_error,omitempty"`
	// Total number of outgoing packets on outbound Security association.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of outgoing packets dropped on outbound security association.
	DroppedPacketsOut int64 `json:"dropped_packets_out,omitempty"`
	// Total number of packets dropped due to integrity failures.
	IntegrityFailures int64 `json:"integrity_failures,omitempty"`
	// Number of packets dropped because of no matching policy is available.
	NomatchingPolicyErrors int64 `json:"nomatching_policy_errors,omitempty"`
	// Totoal number of security association mismatch errors on incoming packets.
	SaMismatchErrorsIn int64 `json:"sa_mismatch_errors_in,omitempty"`
	// Tunnel peer subnet in IPv4 CIDR Block format.
	PeerSubnet string `json:"peer_subnet,omitempty"`
	// Total number of packets dropped due to replay check on that Security association.
	ReplayErrors int64 `json:"replay_errors,omitempty"`
	// Total number of outgoing bytes on outbound Security association.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Total number of incoming packets dropped on inbound Security association.
	PacketsReceivedOtherError int64 `json:"packets_received_other_error,omitempty"`
	// Total number of incoming packets dropped on inbound security association.
	DroppedPacketsIn int64 `json:"dropped_packets_in,omitempty"`
	// Total number of packets dropped because of failure in encryption.
	EncryptionFailures int64 `json:"encryption_failures,omitempty"`
	// Totoal number of security association mismatch errors on outgoing packets.
	SaMismatchErrorsOut int64 `json:"sa_mismatch_errors_out,omitempty"`
	// Gives the detailed reason about the tunnel when it is down. If tunnel is UP tunnel down reason will be empty.
	TunnelDownReason string `json:"tunnel_down_reason,omitempty"`
	// Tunnel local subnet in IPv4 CIDR Block format.
	LocalSubnet string `json:"local_subnet,omitempty"`
	// Total number of incoming bytes on inbound Security association.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of packets dropped due to decryption failures.
	DecryptionFailures int64 `json:"decryption_failures,omitempty"`
	// Total number of packets dropped while sending due to overflow in sequence number.
	SeqNumberOverflowError int64 `json:"seq_number_overflow_error,omitempty"`
	// Total number of incoming packets on inbound Security association.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Specifies the status of tunnel, if it is UP/DOWN.
	TunnelStatus string `json:"tunnel_status,omitempty"`
}

// IPFIX data will be collected on collector Host ip and port address should be provided for collector.
type IpfixCollectorProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP address for the IPFIX collector.
	Ipaddress string `json:"ipaddress"`
	// Port for the IPFIX collector.
	Port int32 `json:"port"`
}

// Paged collection of IPFIX collector profiles.
type IpfixCollectorProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX collector Instances list results
	Results []IpfixCollectorProfile `json:"results"`
}

// IPFIX data from source logical segment will be copied to IPFIX collector.
type IpfixSwitchCollectionInstance struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy path for IPFIX collector profiles. IPFIX data from these logical segments will be sent to all specified IPFIX collectors.
	IpfixCollectorProfilePaths []string `json:"ipfix_collector_profile_paths"`
	// The time in seconds after a Flow is expired if no more packets matching this Flow are received by the cache.
	IdleTimeout int32 `json:"idle_timeout"`
	// Policy path for source tier-1 segment. IPFIX data from these logical segments will be sent IPFIX collector.
	SourceLogicalSegmentPaths []string `json:"source_logical_segment_paths"`
	// The maximum number of flow entries in each exporter flow cache.
	MaxFlows int64 `json:"max_flows,omitempty"`
	// An identifier that is unique to the exporting process and used to meter the Flows.
	ObservationDomainId int32 `json:"observation_domain_id,omitempty"`
	// The time in seconds after a flow is expired even if more packets matching this flow are received by the cache.
	ActiveTimeout int32 `json:"active_timeout"`
	// The probability in percentage that a packet is sampled, in range 0-100. The probability is equal for every packet.
	PacketSampleProbability float64 `json:"packet_sample_probability"`
}

// Paged Collection of IPFIX Switch Collection Instances
type IpfixSwitchCollectionInstanceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX Switch Collection Instances list results
	Results []IpfixSwitchCollectionInstance `json:"results"`
}

// IPFIX DFW data will be collected on collector Host IP and Port address should be provided for collector.
type IpfixdfwCollector struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP address for the IPFIX DFW collector. IP addresses such as 0.0.0.0, 127.0.0.1, 255.255.255.255 are invalid.
	CollectorIpAddress string `json:"collector_ip_address"`
	// Port for the IPFIX DFW collector.
	CollectorPort int32 `json:"collector_port"`
}

// IPFIX data for the NSX distributed firewall will be sent to the specified IPFIX collectors.
type IpfixdfwCollectorProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// It accepts Multiple Collectors.
	IpfixDfwCollectors []IpfixdfwCollector `json:"ipfix_dfw_collectors"`
}

// Paged Collection of IPFIX DFW Collector Profile
type IpfixdfwCollectorProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX DFW Collection Instances list results
	Results []IpfixdfwCollectorProfile `json:"results"`
}

// IPFIX packets from source will be sent to IPFIX DFW collector.
type IpfixdfwProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy path for IPFIX collector profiles. IPFIX data from these logical segments will be sent to all specified IPFIX collectors.
	IpfixDfwCollectorProfilePath string `json:"ipfix_dfw_collector_profile_path"`
	// This priority field is used to resolve conflicts in Segment Ports which are covered by more than one IPFIX profiles. The IPFIX exporter will send records to Collectors in highest priority profile (lowest number) only.
	Priority int32 `json:"priority,omitempty"`
	// For long standing active flows, IPFIX records will be sent per timeout period in minutes.
	ActiveFlowExportTimeout int32 `json:"active_flow_export_timeout"`
	// An identifier that is unique to the exporting process and used to meter the flows.
	ObservationDomainId int32 `json:"observation_domain_id,omitempty"`
}

// Paged Collection of IPFIX DFW Profile
type IpfixdfwProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX DFW Profile list results
	Results []IpfixdfwProfile `json:"results"`
}

// IPFIX packets will be collected on collector. IP and port address should be provided for collector.
type Ipfixl2Collector struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP address for the IPFIX L2 collector. IP addresses such as 0.0.0.0, 127.0.0.1, 255.255.255.255 are invalid.
	CollectorIpAddress string `json:"collector_ip_address"`
	// Port number for the IPFIX L2 collector.
	CollectorPort int32 `json:"collector_port,omitempty"`
}

// IPFIX L2 data will be collected on collectors.
type Ipfixl2CollectorProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// It accepts Multiple Collector objects.
	IpfixL2Collectors []Ipfixl2Collector `json:"ipfix_l2_collectors"`
}

// Paged list of IPFIX collector profiles.
type Ipfixl2CollectorProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX collector Profile list results
	Results []Ipfixl2CollectorProfile `json:"results"`
}

// IPFIX data from source logical segment, port, group will be forwarded to IPFIX collector.
type Ipfixl2Profile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This priority field is used to resolve conflicts in Segment Ports which are covered by more than one IPFIX profiles. The IPFIX exporter will send records to Collectors in highest priority profile (lowest number) only.
	Priority int32 `json:"priority,omitempty"`
	// The time in seconds after a flow is expired if no more packets matching this flow are received by the cache.
	IdleTimeout int32 `json:"idle_timeout,omitempty"`
	// Policy path for IPFIX collector profile. User can specify only one IPFIX collector.
	IpfixCollectorProfilePath string `json:"ipfix_collector_profile_path"`
	// The maximum number of flow entries in each exporter flow cache.
	MaxFlows int64 `json:"max_flows,omitempty"`
	// An identifier that is unique to the exporting process and used to meter the flows.
	ObservationDomainId int64 `json:"observation_domain_id,omitempty"`
	// The time in seconds after a flow is expired even if more packets matching this flow are received by the cache.
	ActiveTimeout int32 `json:"active_timeout,omitempty"`
	// This property controls whether overlay flow info is included in the sample result.
	ExportOverlayFlow bool `json:"export_overlay_flow,omitempty"`
	// The probability in percentage that a packet is sampled, in range 0-100. The probability is equal for every packet.
	PacketSampleProbability float64 `json:"packet_sample_probability"`
}

// Paged Collection of IPFIX L2 Profile
type Ipfixl2ProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// IPFIX L2 Profile list results
	Results []Ipfixl2Profile `json:"results"`
}

type Ipv4Header struct {
	// The source ip address.
	SrcIp string `json:"src_ip,omitempty"`
	// IP flags
	Flags int64 `json:"flags,omitempty"`
	// The destination ip address.
	DstIp string `json:"dst_ip,omitempty"`
	// This is used together with src_ip to calculate dst_ip for broadcast when dst_ip is not given; not used in all other cases.
	SrcSubnetPrefixLen int64 `json:"src_subnet_prefix_len,omitempty"`
	// Time to live (ttl)
	Ttl int64 `json:"ttl,omitempty"`
	// IP protocol - defaults to ICMP
	Protocol int64 `json:"protocol,omitempty"`
}

// Duplicate address detection profile.
type Ipv6DadProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The time duration in seconds, to wait for Neighbor advertisement after sending the Neighbor solicitation message.
	WaitTime int64 `json:"wait_time,omitempty"`
	// Number of Neighbor solicitation packets generated before completing the Duplicate address detection process.
	NsRetries int64 `json:"ns_retries,omitempty"`
	// DAD Mode
	DadMode string `json:"dad_mode,omitempty"`
}

type Ipv6DadProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of Ipv6DadProfile
	Results []Ipv6DadProfile `json:"results"`
}

type Ipv6Header struct {
	// The source ip address.
	SrcIp string `json:"src_ip,omitempty"`
	// The destination ip address.
	DstIp string `json:"dst_ip,omitempty"`
	// Identifies the type of header immediately following the IPv6 header.
	NextHeader int64 `json:"next_header,omitempty"`
	// Decremented by 1 by each node that forwards the packets. The packet is discarded if Hop Limit is decremented to zero.
	HopLimit int64 `json:"hop_limit,omitempty"`
}

type Ipv6NdraProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// RA Mode
	RaMode   string    `json:"ra_mode"`
	RaConfig *RaConfig `json:"ra_config"`
	// The time, in milliseconds, between retransmitted neighbour solicitation messages. A value of 0 means unspecified.
	RetransmitInterval int64        `json:"retransmit_interval,omitempty"`
	DnsConfig          *RaDnsConfig `json:"dns_config,omitempty"`
	// Neighbour reachable time duration in milliseconds. A value of 0 means unspecified.
	ReachableTimer int64 `json:"reachable_timer,omitempty"`
}

type Ipv6NdraProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of Ipv6NdraProfile
	Results []Ipv6NdraProfile `json:"results"`
}

// An arbitrary key-value pair
type KeyValuePair struct {
	// Value
	Value string `json:"value"`
	// Key
	Key string `json:"key"`
}

// Used to configure L2 Bridge endpoint profile
type L2BridgeEndpointProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Failover mode for the edge bridge cluster
	FailoverMode string `json:"failover_mode,omitempty"`
	// High avaialability mode can be active-active or active-standby. High availability mode cannot be modified after realization.
	HaMode string `json:"ha_mode,omitempty"`
	// List of policy paths to edge nodes. Edge allocation for L2 bridging.
	EdgePaths []string `json:"edge_paths,omitempty"`
}

// Paged Collection of L2BridgeEndpointProfile
type L2BridgeEndpointProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// L2BridgeEndpointProfile list results
	Results []L2BridgeEndpointProfile `json:"results"`
}

// Segment specific L2 VPN configuration
type L2Extension struct {
	// Policy paths corresponding to the associated L2 VPN sessions
	L2vpnPaths  []string     `json:"l2vpn_paths,omitempty"`
	LocalEgress *LocalEgress `json:"local_egress,omitempty"`
	// This property has been deprecated. Please use the property l2vpn_paths for setting the paths of associated L2 VPN session. This property will continue to work as expected to provide backwards compatibility. However, when both l2vpn_path and l2vpn_paths properties are specified, only l2vpn_paths is used.
	L2vpnPath string `json:"l2vpn_path,omitempty"`
	// Tunnel ID
	TunnelId int32 `json:"tunnel_id,omitempty"`
}

// Contains information necessary to configure L2Vpn.
type L2Vpn struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of paths referencing transport tunnels.
	TransportTunnels []string `json:"transport_tunnels"`
	// Enable to extend all the associated segments.
	Enabled bool `json:"enabled,omitempty"`
}

// L2Vpn Context provides meta-data information about the parent Tier-0.
type L2VpnContext struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If enabled, the tier-0 acts as a Hub and replicates traffic received from peer to all other peers. If disabled, the tier-0 acts as a Spoke and replicates only the local.
	EnableHub bool `json:"enable_hub,omitempty"`
}

// Paged Collection of L2Vpns
type L2VpnListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// L2Vpn list results
	Results []L2Vpn `json:"results"`
}

// Get the peer_code for each tunnel to paste on the remote end of the tunnel. Currently only stand-along/unmanaged edge is supported on the remote end of the tunnel.
type L2VpnPeerCodes struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point to which the config belongs.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// List of peer codes per transport tunnel.
	PeerCodes []L2VpnTransportTunnelPeerCode `json:"peer_codes"`
}

// Peer config per Enforcement Point to configure the other side of the tunnel.
type L2VpnPeerConfigPerEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point to which the config belongs.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Traffic statistics for a segment.
type L2VpnPerSegmentTrafficStatistics struct {
	// Total number of outgoing packets.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of incoming packets dropped.
	PacketsReceiveError int64 `json:"packets_receive_error,omitempty"`
	// Total number of incoming bytes.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) packets.
	BumPacketsIn int64 `json:"bum_packets_in,omitempty"`
	// Policy path referencing the segment on which stats are gathered.
	SegmentPath string `json:"segment_path,omitempty"`
	// Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) bytes.
	BumBytesOut int64 `json:"bum_bytes_out,omitempty"`
	// Total number of outgoing bytes.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Total number of packets dropped while sending for any reason.
	PacketsSentError int64 `json:"packets_sent_error,omitempty"`
	// Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) packets.
	BumPacketsOut int64 `json:"bum_packets_out,omitempty"`
	// Total number of incoming packets.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) bytes.
	BumBytesIn int64 `json:"bum_bytes_in,omitempty"`
}

// L2VPN Service defines if service running as server or client. It also defines all the common properties for the multiple L2VPN Sessions associated with this service.
type L2VpnService struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP Pool to allocate local and peer endpoint IPs for L2VpnSession logical tap.
	EncapIpPool []string `json:"encap_ip_pool,omitempty"`
	// Specify an L2VPN service mode as SERVER or CLIENT.
	Mode string `json:"mode,omitempty"`
	// This property applies only in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.
	EnableHub bool `json:"enable_hub,omitempty"`
}

// Paged Collection of L2VPNServices
type L2VpnServiceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// L2VPNService list results
	Results []L2VpnService `json:"results"`
}

// Defines the tunnel local and peer addresses along with multiple tansport tunnels for redundancy. L2VPNSession belongs to only one L2VPNService.
type L2VpnSession struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of transport tunnels for redundancy.
	TransportTunnels    []string                  `json:"transport_tunnels"`
	TunnelEncapsulation *L2VpnTunnelEncapsulation `json:"tunnel_encapsulation,omitempty"`
	// Enable to extend all the associated segments.
	Enabled bool `json:"enabled,omitempty"`
}

// L2VPN Session Data represents meta data necessary to create the L2VPN Session. It is represented by an array of peer code for each tunnel.
type L2VpnSessionData struct {
	// Enable to extend all the associated segments.
	Enabled bool `json:"enabled,omitempty"`
	// List of L2VPN transport tunnel data.
	TransportTunnels []L2VpnSessionTransportTunnelData `json:"transport_tunnels,omitempty"`
	// Defaults to id if not set.
	DisplayName string `json:"display_name,omitempty"`
	// Description of L2VPN Session
	Description string `json:"description,omitempty"`
}

// Paged Collection of L2VPNSession
type L2VpnSessionListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// L2VPNSession list results
	Results []L2VpnSession `json:"results"`
}

// L2VPNSessionPeerCodes represents an array of peer code for each tunnel. The peer code is necessary to configure the remote end of the tunnel. Currently only stand-along/unmanaged edge is supported on the remote end of the tunnel.
type L2VpnSessionPeerConfigNsxT struct {
	ResourceType string `json:"resource_type"`
	// List of peer codes per transport tunnel.
	PeerCodes []L2VpnSessionTransportTunnelPeerCode `json:"peer_codes,omitempty"`
}

// Peer config per Enforcement Point to configure the other side of the tunnel.
type L2VpnSessionPeerConfigPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Remote MAC addresses for logical switch.
type L2VpnSessionRemoteMacForSegment struct {
	// Remote Mac addresses.
	RemoteMacAddresses []string `json:"remote_mac_addresses,omitempty"`
	// Intent path of the segment.
	SegmentPath string `json:"segment_path"`
}

// Remote Macs of L2Vpn Session on NsxT.
type L2VpnSessionRemoteMacNsxT struct {
	ResourceType string `json:"resource_type"`
	// Display name of L2Vpn session.
	DisplayName string `json:"display_name,omitempty"`
	// List of mac addresses of logical switches for an l2vpn session.
	RemoteMacs []L2VpnSessionRemoteMacForSegment `json:"remote_macs,omitempty"`
}

// L2Vpn Session Remote Macs Per Enforcement Point.
type L2VpnSessionRemoteMacPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Session statistics gives VPN session status and traffic statistics per segment.
type L2VpnSessionStatistics struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point wehere the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// Traffic statistics per segment.
	TrafficStatisticsPerSegment []L2VpnPerSegmentTrafficStatistics `json:"traffic_statistics_per_segment,omitempty"`
	// Tunnel port traffic counters.
	TapTrafficCounters []L2VpnTapTrafficStatistics `json:"tap_traffic_counters,omitempty"`
}

// L2VPN session statistics gives session status and traffic statistics per segment.
type L2VpnSessionStatisticsNsxT struct {
	ResourceType string `json:"resource_type"`
	// Traffic statistics per segment.
	TrafficStatisticsPerSegment []L2VpnTrafficStatisticsPerSegment `json:"traffic_statistics_per_segment,omitempty"`
	// Display name of l2vpn session.
	DisplayName string `json:"display_name,omitempty"`
	// Tunnel port traffic counters.
	TapTrafficCounters []L2VpnTapStatistics `json:"tap_traffic_counters,omitempty"`
}

// L2VPN Session Statistics Per Enforcement Point.
type L2VpnSessionStatisticsPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// L2VPN Session Status represents status on an NSX-T type of enforcement point.
type L2VpnSessionStatusNsxT struct {
	ResourceType string `json:"resource_type"`
	// Transport tunnels status.
	TransportTunnels []L2VpnSessionTransportTunnelStatus `json:"transport_tunnels,omitempty"`
	// Display name of l2vpn session.
	DisplayName string `json:"display_name,omitempty"`
	// L2 VPN session status, specifies UP/DOWN.
	RuntimeStatus string `json:"runtime_status,omitempty"`
}

// L2VPN Session Status Per Enforcement Point.
type L2VpnSessionStatusPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// L2VPN Session Transport Tunnel Data uses a peer code which has all the information to create the transport tunnel.
type L2VpnSessionTransportTunnelData struct {
	// IPv4 Address of local endpoint.
	LocalAddress string `json:"local_address"`
	// Peer code represents a base64 encoded string which has all the configuration for tunnel. E.g local/peer ips and protocol, encryption algorithm, etc. Peer code also contains PSK; be careful when sharing or storing it.
	PeerCode string `json:"peer_code,omitempty"`
	// IPv4 Address of Peer endpoint on remote site.
	PeerAddress string `json:"peer_address"`
}

// L2VPN transport tunnel peer code.
type L2VpnSessionTransportTunnelPeerCode struct {
	// Peer code represents a base64 encoded string which has all the configuration for tunnel. E.g local/peer ips and protocol, encryption algorithm, etc. Peer code also contains PSK; be careful when sharing or storing it.
	PeerCode string `json:"peer_code,omitempty"`
	// Policy Path referencing the transport tunnel.
	TransportTunnelPath string `json:"transport_tunnel_path,omitempty"`
}

// Transport tunnel status.
type L2VpnSessionTransportTunnelStatus struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing Transport Tunnel.
	TransportTunnelPath string `json:"transport_tunnel_path,omitempty"`
}

// L2Vpn Statistics Per Enforcement Point.
type L2VpnStatisticsPerEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point wehere the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// TAP (Terminal access point) traffic statistics for L2VPN.
type L2VpnTapStatistics struct {
	// Total number of outgoing packets.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of incoming bytes.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of packets dropped while sending for any reason.
	PacketsSentError int64 `json:"packets_sent_error,omitempty"`
	// Total number of incoming packets dropped.
	PacketsReceiveError int64 `json:"packets_receive_error,omitempty"`
	// Total number of incoming packets.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Total number of outgoing bytes.
	BytesOut int64 `json:"bytes_out,omitempty"`
}

// TAP (Terminal access point) traffic statistics for L2Vpn.
type L2VpnTapTrafficStatistics struct {
	// Total number of outgoing packets.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of incoming bytes.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of packets dropped while sending for any reason.
	PacketsSentError int64 `json:"packets_sent_error,omitempty"`
	// Total number of incoming packets dropped.
	PacketsReceiveError int64 `json:"packets_receive_error,omitempty"`
	// Total number of incoming packets.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Total number of outgoing bytes.
	BytesOut int64 `json:"bytes_out,omitempty"`
}

// Traffic statistics for a segment.
type L2VpnTrafficStatisticsPerSegment struct {
	// Total number of outgoing packets.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// Total number of incoming packets dropped.
	PacketsReceiveError int64 `json:"packets_receive_error,omitempty"`
	// Total number of incoming bytes.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) packets.
	BumPacketsIn int64 `json:"bum_packets_in,omitempty"`
	// Policy path referencing the segment on which stats are gathered.
	SegmentPath string `json:"segment_path,omitempty"`
	// Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) bytes.
	BumBytesOut int64 `json:"bum_bytes_out,omitempty"`
	// Total number of outgoing bytes.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// Total number of packets dropped while sending for any reason.
	PacketsSentError int64 `json:"packets_sent_error,omitempty"`
	// Total number of outgoing Broadcast, Unknown unicast and Multicast (BUM) packets.
	BumPacketsOut int64 `json:"bum_packets_out,omitempty"`
	// Total number of incoming packets.
	PacketsIn int64 `json:"packets_in,omitempty"`
	// Total number of incoming Broadcast, Unknown unicast and Multicast (BUM) bytes.
	BumBytesIn int64 `json:"bum_bytes_in,omitempty"`
}

// L2Vpn transport tunnel peer code.
type L2VpnTransportTunnelPeerCode struct {
	// Copy this code to paste on the remote end of the tunnel. This is a base64 encoded string which has all the configuration for tunnel. E.g local/remote ips and protocol, encryption algorithm, etc. Peer code also contains PSK; be careful when sharing or storing it.
	PeerCode string `json:"peer_code"`
	// Policy path referencing the transport tunnel.
	TransportTunnelPath string `json:"transport_tunnel_path"`
}

// L2VPN tunnel encapsulation config.
type L2VpnTunnelEncapsulation struct {
	// IP Address of the local tunnel port. This property only applies in CLIENT mode.
	LocalEndpointAddress string `json:"local_endpoint_address,omitempty"`
	// Encapsulation protocol used by the tunnel.
	Protocol string `json:"protocol,omitempty"`
	// IP Address of the peer tunnel port. This property only applies in CLIENT mode.
	PeerEndpointAddress string `json:"peer_endpoint_address,omitempty"`
}

// Contains information necessary to configure IPSec VPN.
type L3Vpn struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This field is used to resolve conflicts in case of a remote site being behind NAT as remote public ip address is not enough. If it is not the case the remote public address should be provided here. If not provided, the value of this field is set to remote_public_address.
	RemotePrivateAddress string `json:"remote_private_address,omitempty"`
	// Algorithm to be used for message digest during tunnel establishment. Default algorithm is empty.
	TunnelDigestAlgorithms []string `json:"tunnel_digest_algorithms,omitempty"`
	// List of IPSec pre-shared keys used for IPSec authentication. If not specified, the older passphrase values are retained if there are any.
	Passphrases []string `json:"passphrases,omitempty"`
	// If true, perfect forward secrecy (PFS) is enabled.
	EnablePerfectForwardSecrecy bool `json:"enable_perfect_forward_secrecy,omitempty"`
	// Algorithm to be used for message digest during Internet Key Exchange(IKE) negotiation. Default is SHA2_256.
	IkeDigestAlgorithms []string `json:"ike_digest_algorithms,omitempty"`
	// IKE protocol version to be used. IKE-Flex will initiate IKE-V2 and responds to both IKE-V1 and IKE-V2.
	IkeVersion string `json:"ike_version,omitempty"`
	// Algorithm to be used during Internet Key Exchange(IKE) negotiation. Default is AES_128.
	IkeEncryptionAlgorithms []string `json:"ike_encryption_algorithms,omitempty"`
	// IPv4 address of local gateway
	LocalAddress string        `json:"local_address"`
	L3vpnSession *L3VpnSession `json:"l3vpn_session"`
	// Diffie-Hellman group to be used if PFS is enabled. Default group is GROUP14.
	DhGroups []string `json:"dh_groups,omitempty"`
	// Encryption algorithm to encrypt/decrypt the messages exchanged between IPSec VPN initiator and responder during tunnel negotiation. Default is AES_GCM_128.
	TunnelEncryptionAlgorithms []string `json:"tunnel_encryption_algorithms,omitempty"`
	// Flag to enable L3Vpn. Default is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// Public IPv4 address of remote gateway
	RemotePublicAddress string `json:"remote_public_address"`
}

// L3Vpn Context provides the configuration context that different L3Vpns can consume.
type L3VpnContext struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Log level for internet key exchange (IKE).
	IkeLogLevel string `json:"ike_log_level,omitempty"`
	// If true, enable L3Vpn Service for given tier-0. Enabling/disabling this service affects all L3Vpns under the given tier-0.
	Enabled bool `json:"enabled,omitempty"`
	// Bypass L3Vpn rules that will be shared across L3Vpns. Only Bypass action is supported on these L3Vpn rules.
	BypassRules []L3VpnRule `json:"bypass_rules,omitempty"`
	// Local gateway IPv4 addresses available for configuration of each L3Vpn.
	AvailableLocalAddresses []PolicyIpAddressInfo `json:"available_local_addresses,omitempty"`
	// Policy path referencing Label. A label is used as a mechanism to group route-based L3Vpns in order to apply edge firewall rules on members' VTIs.
	Label string `json:"label,omitempty"`
}

// Paged Collection of L3Vpns
type L3VpnListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// L3Vpn list results
	Results []L3Vpn `json:"results"`
}

// For policy-based L3Vpn sessions, a rule specifies as its action the vpn tunnel to be used for transit traffic that meets the rule's match criteria.
type L3VpnRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Action to exchange data with or without protection. PROTECT - Allows to exchange data with ipsec protection. Protect rules are defined per L3Vpn. BYPASS - Allows to exchange data without ipsec protection. Bypass rules are defined per L3VpnContext and affects all policy based L3Vpns. Bypass rules are prioritized over protect rules.
	Action string `json:"action,omitempty"`
	// List of local subnets used in policy-based L3Vpn.
	Sources []L3VpnSubnet `json:"sources"`
	// This field is used to resolve conflicts between multiple L3VpnRules associated with a single L3Vpn or L3VpnContext.
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// List of remote subnets used in policy-based L3Vpn.
	Destinations []L3VpnSubnet `json:"destinations"`
}

// Contains information about L3Vpn session.
type L3VpnSession struct {
	// - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string `json:"resource_type"`
}

// L3Vpn Statistics Per Enforcement Point.
type L3VpnStatisticsPerEnforcementPoint struct {
	ResourceType string `json:"resource_type"`
	// Policy Path referencing the enforcement point wehere the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Used to specify subnets in L3Vpn rule.
type L3VpnSubnet struct {
	// Subnet used in L3Vpn Rule.
	Subnet string `json:"subnet"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type L4PolicyLbPersistenceProfile struct {
	ResourceType string `json:"resource_type"`
	// This field indicates the persistence method used for the PolicyLbVirtualServer. - SOURCE_IP persistence ensures all connections from a client (identified by IP address) are sent to the same backend server for a specified period. - This object is not required and persistence is disabled by default
	Persistence string `json:"persistence,omitempty"`
}

// L4PortSet can be specified in comma separated notation of parts. Parts of a L4PortSet includes single integer or range of port in hyphen notation. Example of a PortSet: \"22, 33-70, 44\".
type L4PortSetServiceEntry struct {
	ResourceType     string   `json:"resource_type"`
	DestinationPorts []string `json:"destination_ports,omitempty"`
	L4Protocol       string   `json:"l4_protocol"`
	SourcePorts      []string `json:"source_ports,omitempty"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type L7PolicyLbPersistenceProfile struct {
	ResourceType string `json:"resource_type"`
	// This field indicates the persistence method used for the PolicyLbVirtualServer. - COOKIE persistence allows related client connections, identified by the same cookie in HTTP requests [Refer to HTTP Cookie for details on HTTP cookies], to be redirected to the same server. Load balancer does not maintain any persistence table for cookie persistence. Instead, it encodes the necessary information in the HTTP cookie value sent to client and relies on the client to store it and send it back in subsequent related HTTP requests. Hence there is no limit on the number of cookie persistence entries that can be supported. - This object is not required and persistence is disabled by default
	Persistence string `json:"persistence,omitempty"`
}

// Label that will be displayed for a UI element.
type Label struct {
	// Text to be displayed at the label.
	Text string `json:"text"`
	// If true, displays the label only on hover
	Hover bool `json:"hover,omitempty"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
	// If the condition is met then the label will be applied. Examples of expression syntax are provided under example_request section of CreateWidgetConfiguration API.
	Condition string `json:"condition,omitempty"`
	// Icons to be applied at dashboard for the label
	Icons []Icon `json:"icons,omitempty"`
}

// Represents a Label-Value widget configuration
type LabelValueConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string  `json:"resource_type"`
	Layout       *Layout `json:"layout,omitempty"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
	// A sub-type of LabelValueConfiguration. If sub-type is not specified the parent type is rendered. For VERTICALLY_ALIGNED sub_type, the value is placed below the label.
	SubType string `json:"sub_type,omitempty"`
	// An array of label-value properties.
	Properties []PropertyItem `json:"properties"`
}

type LacpGroupConfigInfo struct {
	// The key represents the identifier for the group that is unique across VC.
	Key string `json:"key,omitempty"`
	// The display name of the LACP group.
	Name string `json:"name,omitempty"`
	// Keys for the uplink ports in the group. Each uplink port is assigned a key that is unique across VC.
	UplinkPortKeys []string `json:"uplink_port_keys,omitempty"`
	// Load balance algorithm used in LACP group. The possible values are dictated by the values available in VC. Please refer VMwareDvsLacpLoadBalanceAlgorithm documentation for a full list of values. A few examples are srcDestIp where source and destination IP are considered, srcIp where only source IP is considered.
	LoadBalanceAlgorithm string `json:"load_balance_algorithm,omitempty"`
	// The number of uplink ports
	UplinkNum int64 `json:"uplink_num,omitempty"`
	// Names for the uplink ports in the group.
	UplinkNames []string `json:"uplink_names,omitempty"`
	// The mode of LACP can be ACTIVE or PASSIVE. If the mode is ACTIVE, LACP is enabled unconditionally. If the mode is PASSIVE, LACP is enabled only if LACP device is detected.
	Mode string `json:"mode,omitempty"`
}

// Represents layout of a container or widget
type Layout struct {
	// Describes layout of a container or widget. Layout describes how individual widgets are placed inside the container. For example, if HORIZONTAL is chosen widgets are placed side by side inside the container. If VERTICAL is chosen then widgets are placed one below the other. If GRID is chosen then the container or widget display area is divided into a grid of m rows and n columns, as specified in the properties, and the widgets are placed inside the grid.
	Type_      string            `json:"type,omitempty"`
	Properties *LayoutProperties `json:"properties,omitempty"`
}

// Properties of the layout of a container or widget
type LayoutProperties struct {
	// Describes the number of rows of grid layout of a container or widget. This property is applicable for grid layout only.
	NumRows int32 `json:"num_rows,omitempty"`
	// Describes the number of columns of grid layout of a container or widget. This property is applicable for grid layout only.
	NumColumns int32 `json:"num_columns,omitempty"`
}

// LBAccessListControl is used to define how IP access list control can filter the connections from clients.
type LbAccessListControl struct {
	// ALLOW means connections matching grouping object IP list are allowed and requests not matching grouping object IP list are dropped. DROP means connections matching grouping object IP list are dropped and requests not matching grouping object IP list are allowed.
	Action string `json:"action"`
	// The path of grouping object which defines the IP addresses or ranges to match the client IP.
	GroupPath string `json:"group_path"`
	// The enabled flag indicates whether to enable access list control option. It is false by default.
	Enabled bool `json:"enabled,omitempty"`
}

// All the active types of LBMonitorProfile extend from this abstract class. This is present for extensibility.
type LbActiveMonitor struct {
	// There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string `json:"resource_type"`
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
}

// App profile.
type LbAppProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string `json:"resource_type"`
}

// Paged Collection of LBAppProfile
type LbAppProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBAppProfile list results
	Results []LbAppProfile `json:"results"`
}

// Match condition for client certficate issuer DN.
type LbClientCertificateIssuerDnCondition struct {
	// If true, case is significant when comparing issuer DN value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of issuer DN.
	MatchType string `json:"match_type,omitempty"`
	// Value of issuer DN.
	IssuerDn string `json:"issuer_dn"`
}

// Match condition for client certficate subject DN.
type LbClientCertificateSubjectDnCondition struct {
	// If true, case is significant when comparing subject DN value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of subject DN.
	MatchType string `json:"match_type,omitempty"`
	// Value of subject DN.
	SubjectDn string `json:"subject_dn"`
}

// Client SSL profile.
type LbClientSslProfile struct {
	// SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	SessionCacheEnabled bool `json:"session_cache_enabled,omitempty"`
	// Session cache timeout specifies how long the SSL session parameters are held on to and can be reused.
	SessionCacheTimeout int64 `json:"session_cache_timeout,omitempty"`
	// It is a label of cipher group which is mostly consumed by GUI.
	CipherGroupLabel string `json:"cipher_group_label,omitempty"`
	// This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant..
	IsFips bool `json:"is_fips,omitempty"`
	// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.
	IsSecure bool `json:"is_secure,omitempty"`
	// During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference.
	PreferServerCiphers bool `json:"prefer_server_ciphers,omitempty"`
	// Supported SSL cipher list to client side.
	Ciphers []string `json:"ciphers,omitempty"`
	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.
	Protocols []string `json:"protocols,omitempty"`
}

// Client SSL profile binding.
type LbClientSslProfileBinding struct {
	// Client authentication mode.
	ClientAuth string `json:"client_auth,omitempty"`
	// A Certificate Revocation List (CRL) can be specified in the client-side SSL profile binding to disallow compromised client certificates.
	ClientAuthCrlPaths []string `json:"client_auth_crl_paths,omitempty"`
	// If client auth type is REQUIRED, client certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.
	ClientAuthCaPaths []string `json:"client_auth_ca_paths,omitempty"`
	// Authentication depth is used to set the verification depth in the client certificates chain.
	CertificateChainDepth int64 `json:"certificate_chain_depth,omitempty"`
	// Client-side SSL profile binding allows multiple certificates, for different hostnames, to be bound to the same virtual server.
	SniCertificatePaths []string `json:"sni_certificate_paths,omitempty"`
	// A default certificate should be specified which will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension.
	DefaultCertificatePath string `json:"default_certificate_path"`
	// Client SSL profile defines reusable, application-independent client side SSL properties.
	SslProfilePath string `json:"ssl_profile_path,omitempty"`
}

type LbClientSslProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of load balancer client SSL profiles
	Results []LbClientSslProfile `json:"results"`
}

// This action is used to drop the connections. There is no extra propery in this action. If there is no match condition specified, the connection will be always dropped. This action can be specified at HTTP_ACCESS or HTTP_FORWARDING pahse.
type LbConnectionDropAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it.
type LbCookiePersistenceProfile struct {
	// Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled.  Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first.  When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared bool `json:"persistence_shared,omitempty"`
	// The resource_type property identifies persistence profile type.
	ResourceType string `json:"resource_type"`
	// If garble is set to true, cookie value (server IP and port) would be encrypted. If garble is set to false, cookie value would be plain text.
	CookieGarble bool `json:"cookie_garble,omitempty"`
	// If fallback is true, once the cookie points to a server that is down (i.e. admin state DISABLED or healthcheck state is DOWN), then a new server is selected by default to handle that request. If fallback is false, it will cause the request to be rejected if cookie points to a server.
	CookieFallback bool `json:"cookie_fallback,omitempty"`
	// Cookie persistence mode.
	CookieMode string `json:"cookie_mode,omitempty"`
	// HTTP cookie domain could be configured, only available for insert mode.
	CookieDomain string `json:"cookie_domain,omitempty"`
	// Cookie name.
	CookieName string        `json:"cookie_name,omitempty"`
	CookieTime *LbCookieTime `json:"cookie_time,omitempty"`
	// HTTP cookie path could be set, only available for insert mode.
	CookiePath string `json:"cookie_path,omitempty"`
}

// Cookie time.
type LbCookieTime struct {
	// Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string `json:"type"`
}

// The capacity contains basic information and load balancer entity usages and capacity for the given edge node.
type LbEdgeNodeUsage struct {
	// The property identifies the load balancer node usage type.
	ResourceType string `json:"resource_type"`
	// The property identifies the node path for load balancer node usage. For example, node_path=/infra/sites/default/enforcement-points/default /edge-clusters/85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes /86e077c0-449f-11e9-87c8-02004eb37029.
	NodePath string `json:"node_path"`
	// The count of medium load balancer services configured on the node.
	CurrentMediumLoadBalancerCount int64 `json:"current_medium_load_balancer_count,omitempty"`
	// The remaining count of xlarge load balancer services which can be configured on the given edge node.
	RemainingXlargeLoadBalancerCount int64 `json:"remaining_xlarge_load_balancer_count,omitempty"`
	// The severity calculation is based on current credit usage percentage of load balancer for one node.
	Severity string `json:"severity,omitempty"`
	// Pool member capacity means maximum number of pool members which can be configured on the given edge node.
	PoolMemberCapacity int64 `json:"pool_member_capacity,omitempty"`
	// The count of virtual servers configured on the node.
	CurrentVirtualServerCount int64 `json:"current_virtual_server_count,omitempty"`
	// The count of xlarge load balancer services configured on the node.
	CurrentXlargeLoadBalancerCount int64 `json:"current_xlarge_load_balancer_count,omitempty"`
	// The count of pools configured on the node.
	CurrentPoolCount int64 `json:"current_pool_count,omitempty"`
	// The remaining count of small load balancer services which can be configured on the given edge node.
	RemainingSmallLoadBalancerCount int64 `json:"remaining_small_load_balancer_count,omitempty"`
	// The count of pool members configured on the node.
	CurrentPoolMemberCount int64 `json:"current_pool_member_count,omitempty"`
	// The load balancer credit capacity means the maximum credits which can be used for load balancer configuration for the given edge node.
	LoadBalancerCreditCapacity int64 `json:"load_balancer_credit_capacity,omitempty"`
	// The path of edge cluster which contains the edge node.
	EdgeClusterPath string `json:"edge_cluster_path,omitempty"`
	// The current load balancer credits means the current credits used on the node. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured on a node, the current credit number is 2 * 10 = 20.
	CurrentLoadBalancerCredits int64 `json:"current_load_balancer_credits,omitempty"`
	// The remaining count of large load balancer services which can be configured on the given edge node.
	RemainingLargeLoadBalancerCount int64 `json:"remaining_large_load_balancer_count,omitempty"`
	// The count of large load balancer services configured on the node.
	CurrentLargeLoadBalancerCount int64 `json:"current_large_load_balancer_count,omitempty"`
	// The form factor of the given edge node.
	FormFactor string `json:"form_factor,omitempty"`
	// The usage percentage of the edge node for load balancer. The value is the larger value between load balancer credit usage percentage and pool member usage percentage for the edge node.
	UsagePercentage float64 `json:"usage_percentage,omitempty"`
	// The count of small load balancer services configured on the node.
	CurrentSmallLoadBalancerCount int64 `json:"current_small_load_balancer_count,omitempty"`
	// The remaining count of medium load balancer services which can be configured on the given edge node.
	RemainingMediumLoadBalancerCount int64 `json:"remaining_medium_load_balancer_count,omitempty"`
}

// Fast TCP profile.
type LbFastTcpProfile struct {
	// An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string `json:"resource_type"`
	// It is used to specify how long a closing TCP connection (both FINs received or a RST is received) should be kept for this application before cleaning up the connection.
	CloseTimeout int64 `json:"close_timeout,omitempty"`
	// It is used to configure how long an idle TCP connection in ESTABLISHED state should be kept for this application before cleaning up.
	IdleTimeout int64 `json:"idle_timeout,omitempty"`
	// If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node.
	HaFlowMirroringEnabled bool `json:"ha_flow_mirroring_enabled,omitempty"`
}

// Fast UDP profile.
type LbFastUdpProfile struct {
	// An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string `json:"resource_type"`
	// Though UDP is a connectionless protocol, for the purposes of load balancing, all UDP packets with the same flow signature (source and destination IP/ports and IP protocol) received within the idle timeout period are considered to belong to the same connection and are sent to the same backend server. If no packets are received for idle timeout period, the connection (association between flow signature and the selected server) is cleaned up.
	IdleTimeout int64 `json:"idle_timeout,omitempty"`
	// If flow mirroring is enabled, all the flows to the bounded virtual server are mirrored to the standby node.
	FlowMirroringEnabled bool `json:"flow_mirroring_enabled,omitempty"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it. LBGenericPersistenceProfile cannot be attached to virtual server directly, it can be specified in LB rule actions. In HTTP forwarding phase, the profile can be specified in LBVariablePersistenceOnAction. In HTTP response rewriting phase, the profile can be specified in LBVariablePersistenceLearnAction.
type LbGenericPersistenceProfile struct {
	// Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled.  Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first.  When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared bool `json:"persistence_shared,omitempty"`
	// The resource_type property identifies persistence profile type.
	ResourceType string `json:"resource_type"`
	// The mirroring enabled flag is to synchronize persistence entries. Persistence entries are not synchronized to the HA peer by default.
	HaPersistenceMirroringEnabled bool `json:"ha_persistence_mirroring_enabled,omitempty"`
	// When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time.
	Timeout int64 `json:"timeout,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over HTTP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LbHttpMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// The HTTP response status code should be a valid HTTP status code.
	ResponseStatusCodes []int32 `json:"response_status_codes,omitempty"`
	// The health check method for HTTP monitor type.
	RequestMethod string `json:"request_method,omitempty"`
	// String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.
	RequestBody string `json:"request_body,omitempty"`
	// If HTTP response body match string (regular expressions not supported) is specified (using LBHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.
	ResponseBody string `json:"response_body,omitempty"`
	// For HTTP active healthchecks, the HTTP request url sent can be customized and can include query parameters.
	RequestUrl string `json:"request_url,omitempty"`
	// HTTP request version.
	RequestVersion string `json:"request_version,omitempty"`
	// Array of HTTP request headers.
	RequestHeaders []LbHttpRequestHeader `json:"request_headers,omitempty"`
}

// Http profile.
type LbHttpProfile struct {
	defaultStruct
	// An application profile can be bound to a virtual server to specify the application protocol characteristics. It is used to influence how load balancing is performed. Currently, three types of application profiles are supported: LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile. LBFastTCPProfile or LBFastUDPProfile is typically used when the application is using a custom protocol or a standard protocol not supported by the load balancer. It is also used in cases where the user only wants L4 load balancing mainly because L4 load balancing has much higher performance and scalability, and/or supports connection mirroring. LBHttpProfile is used for both HTTP and HTTPS applications. Though application rules, if bound to the virtual server, can be used to accomplish the same goal, LBHttpProfile is intended to simplify enabling certain common use cases.
	ResourceType string `json:"resource_type"`
	// When buffering is disabled, the response is passed to a client synchronously, immediately as it is received. When buffering is enabled, LB receives a response from the backend server as soon as possible, saving it into the buffers.
	ResponseBuffering bool `json:"response_buffering,omitempty"`
	// If server doesn’t send any packet within this time, the connection is closed.
	ResponseTimeout int64 `json:"response_timeout,omitempty"`
	// It is used to specify the HTTP application idle timeout, it means that how long the load balancer will keep the connection idle to wait for the client to send the next keep-alive request. It is not a TCP socket setting.
	IdleTimeout int64 `json:"idle_timeout,omitempty"`
	// If it is not specified, it means that request body size is unlimited.
	RequestBodySize int64 `json:"request_body_size,omitempty"`
	// A response with header larger than response_header_size will be dropped.
	ResponseHeaderSize int64 `json:"response_header_size,omitempty"`
	// NTLM is an authentication protocol that can be used over HTTP. If the flag is set to true, LB will use NTLM challenge/response methodology.
	Ntlm bool `json:"ntlm,omitempty"`
	// A request with header equal to or below this size is guaranteed to be processed. A request with header larger than request_header_size will be processed up to 32K bytes on best effort basis.
	RequestHeaderSize int64 `json:"request_header_size,omitempty"`
	// If a website is temporarily down or has moved, incoming requests for that virtual server can be temporarily redirected to a URL.
	HttpRedirectTo string `json:"http_redirect_to,omitempty"`
	// When X-Forwareded-For is configured, X-Forwarded-Proto and X-Forwarded-Port information is added automatically. The two additional header information can be also modified or deleted in load balancer rules.
	XForwardedFor string `json:"x_forwarded_for,omitempty"`
	// Certain secure applications may want to force communication over SSL, but instead of rejecting non-SSL connections, they may choose to redirect the client automatically to use SSL.
	HttpRedirectToHttps bool `json:"http_redirect_to_https,omitempty"`
}

// This action is used to redirect HTTP request messages to a new URL. The reply_status value specified in this action is used as the status code of HTTP response message which is sent back to client (Normally a browser). The HTTP status code for redirection is 3xx, for example, 301, 302, 303, 307, etc. The redirect_url is the new URL that the HTTP request message is redirected to. Normally browser will send another HTTP request to the new URL after receiving a redirection response message. Captured variables and built-in variables can be used in redirect_url field. For example, to redirect all HTTP requests to HTTPS requests for a virtual server. We create an LBRule without any conditions, add an LBHttpRedirectAction to the rule. Set the redirect_url field of the LBHttpRedirectAction to:   https://$_host$_request_uri And set redirect_status to \"302\", which means found. This rule will redirect all HTTP requests to HTTPS server port on the same host.
type LbHttpRedirectAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// HTTP response status code.
	RedirectStatus string `json:"redirect_status"`
	// The URL that the HTTP request is redirected to.
	RedirectUrl string `json:"redirect_url"`
}

// This action is used to reject HTTP request messages. The specified reply_status value is used as the status code for the corresponding HTTP response message which is sent back to client (Normally a browser) indicating the reason it was rejected. Reference official HTTP status code list for your specific HTTP version to set the reply_status properly. LBHttpRejectAction does not support variables.
type LbHttpRejectAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// HTTP response status code.
	ReplyStatus string `json:"reply_status"`
	// Response message.
	ReplyMessage string `json:"reply_message,omitempty"`
}

// This condition is used to match the message body of an HTTP request. Typically, only HTTP POST, PATCH, or PUT requests have request body. The match_type field defines how body_value field is used to match the body of HTTP requests.
type LbHttpRequestBodyCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// HTTP request body
	BodyValue string `json:"body_value"`
	// Match type of HTTP body
	MatchType string `json:"match_type,omitempty"`
	// If true, case is significant when comparing HTTP body value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
}

// This condition is used to match HTTP request messages by cookie which is a specific type of HTTP header. The match_type and case_sensitive define how to compare cookie value.
type LbHttpRequestCookieCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Match type of cookie value.
	MatchType string `json:"match_type,omitempty"`
	// Cookie name.
	CookieName string `json:"cookie_name"`
	// Cookie value.
	CookieValue string `json:"cookie_value"`
	// If true, case is significant when comparing cookie value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
}

type LbHttpRequestHeader struct {
	// Value of HTTP request header
	HeaderValue string `json:"header_value"`
	// Name of HTTP request header
	HeaderName string `json:"header_name"`
}

// This condition is used to match HTTP request messages by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP requests. The header_name field does not support match types.
type LbHttpRequestHeaderCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Value of HTTP header
	HeaderValue string `json:"header_value"`
	// If true, case is significant when comparing HTTP header value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of HTTP header value
	MatchType string `json:"match_type,omitempty"`
	// Name of HTTP header
	HeaderName string `json:"header_name,omitempty"`
}

// This action is used to delete header fields of HTTP request messages at HTTP_REQUEST_REWRITE phase. One action can be used to delete all headers with same header name. To delete headers with different header names, multiple actions must be defined.
type LbHttpRequestHeaderDeleteAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Name of a header field of HTTP request message.
	HeaderName string `json:"header_name"`
}

// This action is used to rewrite header fields of matched HTTP request messages to specified new values. One action can be used to rewrite one header field. To rewrite multiple header fields, multiple actions must be defined. Captured variables and built-in variables can be used in the header_value field, header_name field does not support variables.
type LbHttpRequestHeaderRewriteAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Value of HTTP request header.
	HeaderValue string `json:"header_value"`
	// Name of HTTP request header.
	HeaderName string `json:"header_name"`
}

// This condition is used to match method of HTTP requests. If the method of an HTTP request is same as the method specified in this condition, the HTTP request match this condition. For example, if the method field is set to GET in this condition, any HTTP request with GET method matches the condition.
type LbHttpRequestMethodCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Type of HTTP request method
	Method string `json:"method"`
}

// This condition is used to match URI arguments aka query string of Http request messages, for example, in URI http://exaple.com?foo=1&bar=2, the \"foo=1&bar=2\" is the query string containing URI arguments. In an URI scheme, query string is indicated by the first question mark (\"?\") character and terminated by a number sign (\"#\") character or by the end of the URI. The uri_arguments field can be specified as a regular expression(Set match_type to REGEX). For example, \"foo=(?&lt;x&gt;\\d+)\". It matches HTTP requests whose URI arguments containing \"foo\", the value of foo contains only digits. And the value of foo is captured as $x which can be used in LBRuleAction fields which support variables.
type LbHttpRequestUriArgumentsCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// URI arguments, aka query string of URI.
	UriArguments string `json:"uri_arguments"`
	// Match type of URI arguments
	MatchType string `json:"match_type,omitempty"`
	// If true, case is significant when comparing URI arguments.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
}

// This condition is used to match URIs(Uniform Resource Identifier) of HTTP request messages. The URI field can be specified as a regular expression. If an HTTP request message is requesting an URI which matches specified regular expression, it matches the condition. The syntax of whole URI looks like this: scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment] This condition matches only the path part of entire URI. When match_type field is specified as REGEX, the uri field is used as a regular expression to match URI path of HTTP requests. For example, to match any URI that has \"/image/\" or \"/images/\", uri field can be specified as: \"/image[s]?/\". Named capturing groups can be used in the uri field to capture substrings of matched URIs and store them in variables for use in LBRuleAction. For example, specify uri field as: \"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.*)\" If the URI path is /articles/news/2017/06/xyz.html, then substring \"2017\" is captured in variable year, \"06\" is captured in variable month, and \"xyz.html\" is captured in variable article. These variables can then be used in an LBRuleAction field which supports variables, such as uri field of LBHttpRequestUriRewriteAction. For example, set the uri field of LBHttpRequestUriRewriteAction as: \"/articles/news/$year-$month-$article\" Then the URI path /articles/news/2017/06/xyz.html is rewritten to: \"/articles/news/2017-06-xyz.html\"
type LbHttpRequestUriCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Match type of URI
	MatchType string `json:"match_type,omitempty"`
	// A string used to identify resource
	Uri string `json:"uri"`
	// If true, case is significant when comparing URI.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
}

// This action is used to rewrite URIs in matched HTTP request messages. Specify the uri and uri_arguments fields in this condition to rewrite the matched HTTP request message's URI and URI arguments to the new values. Full URI scheme of HTTP messages have following syntax: scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment] The uri field of this action is used to rewrite the /path part in above scheme. And the uri_arguments field is used to rewrite the query part. Captured variables and built-in variables can be used in the uri and uri_arguments fields. Check the example in LBRuleAction to see how to use variables in this action.
type LbHttpRequestUriRewriteAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Query string of URI, typically contains key value pairs, for example: foo1=bar1&foo2=bar2.
	UriArguments string `json:"uri_arguments,omitempty"`
	// URI of HTTP request.
	Uri string `json:"uri"`
}

// This condition is used to match the HTTP protocol version of the HTTP request messages.
type LbHttpRequestVersionCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// HTTP version
	Version string `json:"version"`
}

// This condition is used to match HTTP response messages from backend servers by HTTP header fields. HTTP header fields are components of the header section of HTTP request and response messages. They define the operating parameters of an HTTP transaction. For example, Cookie, Authorization, User-Agent, etc. One condition can be used to match one header field, to match multiple header fields, multiple conditions must be specified. The match_type field defines how header_value field is used to match HTTP responses. The header_name field does not support match types.
type LbHttpResponseHeaderCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Value of HTTP header field
	HeaderValue string `json:"header_value"`
	// If true, case is significant when comparing HTTP header value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of HTTP header value
	MatchType string `json:"match_type,omitempty"`
	// Name of HTTP header field
	HeaderName string `json:"header_name"`
}

// This action is used to delete header fields of HTTP response messages at HTTP_RESPONSE_REWRITE phase. One action can be used to delete allgi headers with same header name. To delete headers with different header names, multiple actions must be defined.
type LbHttpResponseHeaderDeleteAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Name of a header field of HTTP response message.
	HeaderName string `json:"header_name"`
}

// This action is used to rewrite header fields of HTTP response messages to specified new values at HTTP_RESPONSE_REWRITE phase. One action can be used to rewrite one header field. To rewrite multiple header fields, multiple actions must be defined. Captured variables and built-in variables can be used in the header_value field, header_name field does not support variables.
type LbHttpResponseHeaderRewriteAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Value of header field
	HeaderValue string `json:"header_value"`
	// Name of a header field of HTTP request message.
	HeaderName string `json:"header_name"`
}

// This condition is used to match SSL handshake and SSL connection at all phases.If multiple properties are configured, the rule is considered a match when all the configured properties are matched.
type LbHttpSslCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Cipher list which supported by client.
	ClientSupportedSslCiphers  []string                               `json:"client_supported_ssl_ciphers,omitempty"`
	ClientCertificateIssuerDn  *LbClientCertificateIssuerDnCondition  `json:"client_certificate_issuer_dn,omitempty"`
	ClientCertificateSubjectDn *LbClientCertificateSubjectDnCondition `json:"client_certificate_subject_dn,omitempty"`
	// Cipher used for an established SSL connection.
	UsedSslCipher string `json:"used_ssl_cipher,omitempty"`
	// The type of SSL session reused.
	SessionReused string `json:"session_reused,omitempty"`
	// Protocol of an established SSL connection.
	UsedProtocol string `json:"used_protocol,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over HTTPS. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LbHttpsMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// The HTTP response status code should be a valid HTTP status code.
	ResponseStatusCodes []int32 `json:"response_status_codes,omitempty"`
	// The health check method for HTTP monitor type.
	RequestMethod string `json:"request_method,omitempty"`
	// String to send as part of HTTP health check request body. Valid only for certain HTTP methods like POST.
	RequestBody string `json:"request_body,omitempty"`
	// If HTTP response body match string (regular expressions not supported) is specified (using LBHttpMonitor.response_body) then the healthcheck HTTP response body is matched against the specified string and server is considered healthy only if there is a match. If the response body string is not specified, HTTP healthcheck is considered successful if the HTTP response status code is 2xx, but it can be configured to accept other status codes as successful.
	ResponseBody string `json:"response_body,omitempty"`
	// For HTTPS active healthchecks, the HTTPS request url sent can be customized and can include query parameters.
	RequestUrl              string                     `json:"request_url,omitempty"`
	ServerSslProfileBinding *LbServerSslProfileBinding `json:"server_ssl_profile_binding,omitempty"`
	// HTTP request version.
	RequestVersion string `json:"request_version,omitempty"`
	// Array of HTTP request headers.
	RequestHeaders []LbHttpRequestHeader `json:"request_headers,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over ICMP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healt hchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LbIcmpMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// The data size (in byte) of the ICMP healthcheck packet
	DataLength int64 `json:"data_length,omitempty"`
}

// This condition is used to match IP header fields of HTTP messages. Either source_address or group_id should be specified.
type LbIpHeaderCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Source IP address of HTTP message should match IP addresses which are configured in Group in order to perform actions.
	GroupPath string `json:"group_path,omitempty"`
	// Source IP address of HTTP message. IP Address can be expressed as a single IP address like 10.1.1.1, or a range of IP addresses like 10.1.1.101-10.1.1.160. Both IPv4 and IPv6 addresses are supported.
	SourceAddress string `json:"source_address,omitempty"`
}

// This action is used to control access to backend server resources using JSON Web Token(JWT) authentication. The JWT authentication is done before any HTTP manipulation if the HTTP request matches the given condition in LBRule. Any verification failed, the HTTP process will be terminated, and HTTP response with 401 status code and WWW-Authentication header will be returned to client.
type LbJwtAuthAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// JWT is an open standard that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. Load balancer will search for every specified tokens one by one for the jwt message until found. This parameter is optional. In case not found or this field is not configured, load balancer searches the Bearer header by default in the http request \"Authorization: Bearer &lt;token&gt;\".
	Tokens []string `json:"tokens,omitempty"`
	// Specify whether to pass the JWT to backend server or remove it. By default, it is false which means will not pass the JWT to backend servers.
	PassJwtToPool bool `json:"pass_jwt_to_pool,omitempty"`
	// A description of the protected area. If no realm is specified, clients often display a formatted hostname instead. The configured realm is returned when client request is rejected with 401 http status. In the response, it will be \"WWW-Authentication: Bearer realm=&lt;realm&gt;\".
	Realm string    `json:"realm,omitempty"`
	Key   *LbJwtKey `json:"key,omitempty"`
}

// The key is used to specify certificate which is used to verify the signature of JWT tokens.
type LbJwtCertificateKey struct {
	// The property is used to identify JWT key type.
	Type_ string `json:"type"`
	// Certificate identifier
	CertificatePath string `json:"certificate_path"`
}

// LBJwtKey specifies the symmetric key or asymmetric public key used to decrypt the data in JWT.
type LbJwtKey struct {
	// The property is used to identify JWT key type.
	Type_ string `json:"type"`
}

// The key is used to specify the public key content which is used to verify the signature of JWT tokens.
type LbJwtPublicKey struct {
	// The property is used to identify JWT key type.
	Type_ string `json:"type"`
	// Content of public key
	PublicKeyContent string `json:"public_key_content"`
}

// The key is used to specify the symmetric key which is used to verify the signature of JWT tokens.
type LbJwtSymmetricKey struct {
	// The property is used to identify JWT key type.
	Type_ string `json:"type"`
}

type LbMonitorProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string `json:"resource_type"`
}

// Paged Collection of LBMonitorProfiles
type LbMonitorProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBMonitorProfile list results
	Results []LbMonitorProfile `json:"results"`
}

// The node count for specific load balancer usage severity.
type LbNodeCountPerSeverity struct {
	// Node count for specific serverity.
	NodeCount int64 `json:"node_count,omitempty"`
	// The severity calculation is based on current credit usage percentage of load balancer for one node.
	Severity string `json:"severity,omitempty"`
}

// Node usage for load balancer contains basic information and LB entity usages and capacity for the given node. Only edge node is supported.
type LbNodeUsage struct {
	// The property identifies the load balancer node usage type.
	ResourceType string `json:"resource_type"`
	// The property identifies the node path for load balancer node usage. For example, node_path=/infra/sites/default/enforcement-points/default /edge-clusters/85175e0b-4d74-461d-83e1-f3b785adef9c/edge-nodes /86e077c0-449f-11e9-87c8-02004eb37029.
	NodePath string `json:"node_path"`
}

// The load balancer node usage summary for all nodes from specific enforcement point. Only edge node is supported. The summary contains all edge nodes which are configured in edge clusters.
type LbNodeUsageSummary struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// Current load balancer credits in use for all nodes. For example, configuring a medium load balancer on a node consumes 10 credits. If there are 2 medium instances configured, the current load balancer credit number is 2 * 10 = 20.
	CurrentLoadBalancerCredits int64 `json:"current_load_balancer_credits,omitempty"`
	// The load balancer credit capacity means the maximum credits which can be used for load balancer service configuration for all nodes.
	LoadBalancerCreditCapacity int64 `json:"load_balancer_credit_capacity,omitempty"`
	// The property identifies all LB node usages. By default, it is not included in response. It exists when parameter ?include_usages=true.
	NodeUsages []LbNodeUsage `json:"node_usages,omitempty"`
	// The severity calculation is based on overall credit usage percentage of load balancer for all nodes.
	Severity string `json:"severity,omitempty"`
	// Pool member capacity means maximum number of pool members which can be configured on all nodes.
	PoolMemberCapacity int64 `json:"pool_member_capacity,omitempty"`
	// The property identifies array of node count for each severity.
	NodeCounts []LbNodeCountPerSeverity `json:"node_counts,omitempty"`
	// The overall count of pool members configured on all nodes.
	CurrentPoolMemberCount int64 `json:"current_pool_member_count,omitempty"`
	// The overall usage percentage of all nodes for load balancer. The value is the larger value between overall pool member usage percentage and overall load balancer credit usage percentage.
	UsagePercentage float64 `json:"usage_percentage,omitempty"`
}

// The passive type of LBMonitorProfile.
type LbPassiveMonitorProfile struct {
	// There are two types of healthchecks: active and passive. Passive healthchecks depend on failures in actual client traffic (e.g. RST from server in response to a client connection) to detect that the server or the application is down. In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Currently, active health monitors are supported for HTTP, HTTPS, TCP, UDP and ICMP protocols.
	ResourceType string `json:"resource_type"`
	// When the consecutive failures reach this value, then the member is considered temporarily unavailable for a configurable period
	MaxFails int64 `json:"max_fails,omitempty"`
	// After this timeout period, the member is tried again for a new connection to see if it is available.
	Timeout int64 `json:"timeout,omitempty"`
}

// Persistence cookie time.
type LbPersistenceCookieTime struct {
	// Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string `json:"type"`
	// HTTP cookie max-age to expire cookie, only available for insert mode.
	CookieMaxIdle int64 `json:"cookie_max_idle"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it. LBGenericPersistenceProfile cannot be attached to LBVirtualServer directly, it can be specified in LBVariablePersistenceOnAction or LBVariablePersistenceLearnAction in LBRule. If a user attaches a LBGenericPersistenceProfile directly to a virtual server, the operation is rejected.
type LbPersistenceProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled.  Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first.  When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared bool `json:"persistence_shared,omitempty"`
	// The resource_type property identifies persistence profile type.
	ResourceType string `json:"resource_type"`
}

// Paged Collection of LBPersistenceProfiles
type LbPersistenceProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBPersistenceProfile list results
	Results []LbPersistenceProfile `json:"results"`
}

// Defining access of a Group from a LBVirtualServer and binding to LBMonitorProfile.
type LbPool struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// In case of active healthchecks, load balancer itself initiates new connections (or sends ICMP ping) to the servers periodically to check their health, completely independent of any data traffic. Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the pool. If multiple active monitors are configured, the pool member status is UP only when the health check status for all the monitors are UP.
	ActiveMonitorPaths []string `json:"active_monitor_paths,omitempty"`
	// TCP multiplexing allows the same TCP connection between load balancer and the backend server to be used for sending multiple client requests from different client TCP connections.
	TcpMultiplexingEnabled bool               `json:"tcp_multiplexing_enabled,omitempty"`
	SnatTranslation        *LbSnatTranslation `json:"snat_translation,omitempty"`
	MemberGroup            *LbPoolMemberGroup `json:"member_group,omitempty"`
	// Load Balancing algorithm chooses a server for each new connection by going through the list of servers in the pool. Currently, following load balancing algorithms are supported with ROUND_ROBIN as the default. ROUND_ROBIN means that a server is selected in a round-robin fashion. The weight would be ignored even if it is configured. WEIGHTED_ROUND_ROBIN means that a server is selected in a weighted round-robin fashion. Default weight of 1 is used if weight is not configured. LEAST_CONNECTION means that a server is selected when it has the least number of connections. The weight would be ignored even if it is configured. Slow start would be enabled by default. WEIGHTED_LEAST_CONNECTION means that a server is selected in a weighted least connection fashion. Default weight of 1 is used if weight is not configured. Slow start would be enabled by default. IP_HASH means that consistent hash is performed on the source IP address of the incoming connection. This ensures that the same client IP address will always reach the same server as long as no server goes down or up. It may be used on the Internet to provide a best-effort stickiness to clients which refuse session cookies.
	Algorithm string `json:"algorithm,omitempty"`
	// The maximum number of TCP connections per pool that are idly kept alive for sending future client requests.
	TcpMultiplexingNumber int64 `json:"tcp_multiplexing_number,omitempty"`
	// Server pool consists of one or more pool members. Each pool member is identified, typically, by an IP address and a port.
	Members []LbPoolMember `json:"members,omitempty"`
	// Passive healthchecks are disabled by default and can be enabled by attaching a passive health monitor to a server pool. Each time a client connection to a pool member fails, its failed count is incremented. For pools bound to L7 virtual servers, a connection is considered to be failed and failed count is incremented if any TCP connection errors (e.g. TCP RST or failure to send data) or SSL handshake failures occur. For pools bound to L4 virtual servers, if no response is received to a TCP SYN sent to the pool member or if a TCP RST is received in response to a TCP SYN, then the pool member is considered to have failed and the failed count is incremented.
	PassiveMonitorPath string `json:"passive_monitor_path,omitempty"`
	// A pool is considered active if there are at least certain minimum number of members.
	MinActiveMembers int64 `json:"min_active_members,omitempty"`
}

// Paged Collection of LBPool.
type LbPoolListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBPool list results.
	Results []LbPool `json:"results"`
}

// Pool member.
type LbPoolMember struct {
	// To ensure members are not overloaded, connections to a member can be capped by the load balancer. When a member reaches this limit, it is skipped during server selection. If it is not specified, it means that connections are unlimited.
	MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`
	// Member admin state.
	AdminState string `json:"admin_state,omitempty"`
	// Backup servers are typically configured with a sorry page indicating to the user that the application is currently unavailable. While the pool is active (a specified minimum number of pool members are active) BACKUP members are skipped during server selection. When the pool is inactive, incoming connections are sent to only the BACKUP member(s).
	BackupMember bool `json:"backup_member,omitempty"`
	// Pool member weight is used for WEIGHTED_ROUND_ROBIN balancing algorithm. The weight value would be ignored in other algorithms.
	Weight int64 `json:"weight,omitempty"`
	// Pool member name.
	DisplayName string `json:"display_name,omitempty"`
	// Pool member IP address.
	IpAddress string `json:"ip_address"`
	// If port is specified, all connections will be sent to this port. Only single port is supported. If unset, the same port the client connected to will be used, it could be overrode by default_pool_member_port setting in virtual server. The port should not specified for port range case.
	Port string `json:"port,omitempty"`
}

// Pool member group.
type LbPoolMemberGroup struct {
	// Ip revision filter is used to filter IPv4 or IPv6 addresses from the grouping object. If the filter is not specified, both IPv4 and IPv6 addresses would be used as server IPs. The link local and loopback addresses would be always filtered out.
	IpRevisionFilter string `json:"ip_revision_filter,omitempty"`
	// The list is used to show the customized pool member settings. User can only user pool member action API to update the admin state for a specific IP address.
	CustomizedMembers []PoolMemberSetting `json:"customized_members,omitempty"`
	// The size is used to define the maximum number of grouping object IP address list. These IP addresses would be used as pool members. If the grouping object includes more than certain number of IP addresses, the redundant parts would be ignored and those IP addresses would not be treated as pool members. If the size is not specified, one member is budgeted for this dynamic pool so that the pool has at least one member even if some other dynamic pools grow beyond the capacity of load balancer service. Other members are picked according to available dynamic capacity. The unused members would be set to DISABLED so that the load balancer system itself is not overloaded during runtime.
	MaxIpListSize int64 `json:"max_ip_list_size,omitempty"`
	// Load balancer pool support Group as dynamic pool members. The IP list of the Group would be used as pool member IP setting.
	GroupPath string `json:"group_path"`
	// If port is specified, all connections will be sent to this port. If unset, the same port the client connected to will be used, it could be overridden by default_pool_member_ports setting in virtual server. The port should not specified for multiple ports case.
	Port int32 `json:"port,omitempty"`
}

type LbPoolMemberStatistics struct {
	Statistics *LbStatisticsCounter `json:"statistics,omitempty"`
	// Pool member IP address.
	IpAddress string `json:"ip_address,omitempty"`
	// The port is configured in pool member. For virtual server port range case, pool member port must be null.
	Port string `json:"port,omitempty"`
}

type LbPoolMemberStatus struct {
	// UP means that pool member is enabled and monitors have marked the pool member as UP. If the pool member has no monitor configured, it would be treated as UP. DOWN means that pool member is enabled and monitors have marked the pool member as DOWN. DISABLED means that admin state of pool member is set to DISABLED. GRACEFUL_DISABLED means that admin state of pool member is set to GRACEFUL_DISABLED. UNUSED means that the pool member is not used when the IP list size of member group exceeds the maximum setting. The remaining IP addresses would not be used as available backend servers, hence mark the status as UNUSED. UNKNOWN means that the related pool is not associated to any enabled virtual servers, or no status reported from transport-nodes, the associated load balancer service may be working(or not working).
	Status string `json:"status,omitempty"`
	// If multiple active monitors are configured, the failure_cause contains failure cause for each monitors. Like \"Monitor_1:failure_cause_1. Monitor_2:failure_cause_2.\"
	FailureCause string `json:"failure_cause,omitempty"`
	// If multiple active monitors are configured, the property value is the latest last_check_time among all the monitors.
	LastCheckTime int64 `json:"last_check_time,omitempty"`
	// Pool member IP address.
	IpAddress string `json:"ip_address,omitempty"`
	// If multiple active monitors are configured, the property value is the latest last_state_change_time among all the monitors.
	LastStateChangeTime int64 `json:"last_state_change_time,omitempty"`
	// The port is configured in pool member. For virtual server port range case, pool member port must be null.
	Port string `json:"port,omitempty"`
}

type LbPoolStatistics struct {
	ResourceType string `json:"resource_type"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64                `json:"last_update_timestamp,omitempty"`
	Statistics          *LbStatisticsCounter `json:"statistics,omitempty"`
	// Load balancer pool object path.
	PoolPath string `json:"pool_path,omitempty"`
	// Statistics of load balancer pool members.
	Members []LbPoolMemberStatistics `json:"members,omitempty"`
}

// LBPoolStatistics on specific Enforcement Point
type LbPoolStatisticsPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

type LbPoolStatus struct {
	ResourceType string `json:"resource_type"`
	// UP means that all primary members are in UP status. PARTIALLY_UP means that some(not all) primary members are in UP status, the number of these active members is larger or equal to certain number(min_active_members) which is defined in LBPool. When there are no backup members which are in the UP status, the number(min_active_members) would be ignored. PRIMARY_DOWN means that less than certain(min_active_members) primary members are in UP status but backup members are in UP status, connections to this pool would be dispatched to backup members. DOWN means that all primary and backup members are DOWN. DETACHED means that the pool is not bound to any virtual server. UNKOWN means that no status reported from transport-nodes. The associated load balancer service may be working(or not working).
	Status string `json:"status,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Load balancer pool object path.
	PoolPath string `json:"pool_path,omitempty"`
	// Status of load balancer pool members.
	Members []LbPoolMemberStatus `json:"members,omitempty"`
}

// LBPoolStatus on specific Enforcement Point
type LbPoolStatusPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Binding of a LBPool and Group to a LBVirtualServer used to route application traffic passing through load balancers. LBRule uses match conditions to match application traffic passing through a LBVirtualServer using HTTP or HTTPS. Can bind multiple LBVirtualServers to a Group. Each LBRule consists of two optional match conditions, each match contidion defines a criterion for application traffic.  If no match conditions are specified, then the LBRule will always match and it is used typically to define default rules. If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LBRule to be considered a match.  A match indicates that the LBVirtualServer should route the request to the Group (parent of LBRule).
type LbRule struct {
	// Each load balancer rule is used at a specific phase of load balancer processing. Currently five phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING, HTTP_RESPONSE_REWRITE, HTTP_ACCESS and TRANSPORT. When an HTTP request message is received by load balancer, all HTTP_REQUEST_REWRITE rules, if present are executed in the order they are applied to virtual server. And then if HTTP_FORWARDING rules present, only first matching rule's action is executed, remaining rules are not checked. HTTP_FORWARDING rules can have only one action. If the request is forwarded to a backend server and the response goes back to load balancer, all HTTP_RESPONSE_REWRITE rules, if present, are executed in the order they are applied to the virtual server. In HTTP_ACCESS phase, user can define action to control access using JWT authentication. In TRANSPORT phase, user can define the condition to match SNI in TLS client hello and define the action to do SSL end-to-end, SSL offloading or SSL passthrough using a specific load balancer server pool.
	Phase string `json:"phase,omitempty"`
	// A list of match conditions used to match application traffic. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion to match application traffic. If no match conditions are specified, then the load balancer rule will always match and it is used typically to define default rules. If more than one match condition is specified, then match strategy determines if all conditions should match or any one condition should match for the load balancer rule to considered a match.
	MatchConditions []LbRuleCondition `json:"match_conditions,omitempty"`
	// A display name useful for identifying an LBRule.
	DisplayName string `json:"display_name,omitempty"`
	// A list of actions to be executed at specified phase when load balancer rule matches. The actions are used to manipulate application traffic, such as rewrite URI of HTTP messages, redirect HTTP messages, etc.
	Actions []LbRuleAction `json:"actions"`
	// If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LB Rule to be considered a match. - ALL indicates that both host_match and path_match must match for this LBRule to be considered a match. - ANY indicates that either host_match or patch match may match for this LBRule to be considered a match.
	MatchStrategy string `json:"match_strategy,omitempty"`
}

// Load balancer rule actions are used to manipulate application traffic. Currently load balancer rules can be used at three load balancer processing phases. Each phase has its own supported type of actions. Supported actions in HTTP_REQUST_REWRITE phase are:   LBHttpRequestUriRewriteAction   LBHttpRequestHeaderRewriteAction   LBHttpRequestHeaderDeleteAction   LBVariableAssignmentAction Supported actions in HTTP_FORWARDING phase are:   LBHttpRejectAction   LBHttpRedirectAction   LBSelectPoolAction   LBVariablePersistenceOnAction   LBConnectionDropAction Supported action in HTTP_RESPONSE_REWRITE phase is:   LBHttpResponseHeaderRewriteAction   LBHttpResponseHeaderDeleteAction   LBVariablePersistenceLearnAction Supported action in HTTP_ACCESS phase is:   LBJwtAuthAction   LBConnectionDropAction   LBVariableAssignmentAction Supported action in TRANSPORT phase is:   LBSslModeSelectionAction   LBSelectPoolAction  If the match type of an LBRuleCondition field is specified as REGEX and named capturing groups are used in the specified regular expression. The groups can be used as variables in LBRuleAction fields. For example, define a rule with LBHttpRequestUriCondition as match condition and LBHttpRequestUriRewriteAction as action. Set match_type field of LBHttpRequestUriCondition to REGEX, and set uri field to   \"/news/(?&lt;year&gt;\\d+)/(?&lt;month&gt;\\d+)/(?&lt;article&gt;.*)\". Set uri field of LBHttpRequestUriRewriteAction to:   \"/news/$year-$month/$article\" In uri field of LBHttpRequestUriCondition, the (?&lt;year&gt;\\d+), (?&lt;month&gt;\\d+) and (?&lt;article&gt;.*) are named capturing groups, they define variables named $year, $month and $article respectively. The defined variables are used in LBHttpRequestUriRewriteAction. For a matched HTTP request with URI \"/news/2017/06/xyz.html\", the substring \"2017\" is captured in variable $year, \"06\" is captured in variable $month, and \"xyz.html\" is captured in variable $article. The LBHttpRequestUriRewriteAction will rewrite the URI to:   \"/news/2017-06/xyz.html\" A set of built-in variables can be used in LBRuleAction as well. The name of built-in variables start with underscore, the name of user defined variables is not allowed to start with underscore. Following are some of the built-in variables:   $_scheme: Reference the scheme part of matched HTTP messages, could be \"http\" or \"https\".   $_host: Host of matched HTTP messages, for example \"www.example.com\".   $_server_port: Port part of URI, it is also the port of the server which accepted a request. Default port is 80 for http and 443 for https.   $_uri: The URI path, for example \"/products/sample.html\".   $_request_uri: Full original request URI with arguments, for example,     \"/products/sample.html?a=b&c=d\".   $_args: URI arguments, for instance \"a=b&c=d\"   $_is_args: \"?\" if a request has URI arguments, or an empty string otherwise. For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
type LbRuleAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
}

// Match conditions are used to match application traffic passing through load balancers. Multiple match conditions can be specified in one load balancer rule, each match condition defines a criterion for application traffic. If inverse field is set to true, the match result of the condition is inverted. If more than one match condition is specified, match strategy determines if all conditions should match or any one condition should match for the load balancer rule to be considered a match. Currently only HTTP messages are supported by load balancer rules. Each load balancer rule is used at a specific phase of load balancer processing. Currently three phases are supported, HTTP_REQUEST_REWRITE, HTTP_FORWARDING and HTTP_RESPONSE_REWRITE. Each phase supports certain types of match conditions, supported match conditions in HTTP_REQUEST_REWRITE phase are: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match conditions in HTTP_FORWARDING phase are: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition LBSslSniCondition Supported match conditions in HTTP_RESPONSE_REWRITE phase are: LBHttpResponseHeaderCondition LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match condition in HTTP_ACCESS phase is: LBHttpRequestMethodCondition LBHttpRequestUriCondition LBHttpRequestUriArgumentsCondition LBHttpRequestVersionCondition LBHttpRequestHeaderCondition LBHttpRequestCookieCondition LBHttpRequestBodyCondition LBTcpHeaderCondition LBIpHeaderCondition LBVariableCondition LBHttpSslCondition Supported match condition in TRANSPORT phase is: LBSslSniCondition
type LbRuleCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
}

// This action is used to select a pool for matched HTTP request messages. The pool is specified by path. The matched HTTP request messages are forwarded to the specified pool.
type LbSelectPoolAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Path of load balancer pool.
	PoolId string `json:"pool_id"`
}

// Server SSL profile.
type LbServerSslProfile struct {
	// SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	SessionCacheEnabled bool `json:"session_cache_enabled,omitempty"`
	// This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant.
	IsFips bool `json:"is_fips,omitempty"`
	// It is a label of cipher group which is mostly consumed by GUI.
	CipherGroupLabel string `json:"cipher_group_label,omitempty"`
	// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure.
	IsSecure bool `json:"is_secure,omitempty"`
	// Supported SSL cipher list to client side.
	Ciphers []string `json:"ciphers,omitempty"`
	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default.
	Protocols []string `json:"protocols,omitempty"`
}

// Server SSL profile binding.
type LbServerSslProfileBinding struct {
	// If server auth type is REQUIRED, server certificate must be signed by one of the trusted Certificate Authorities (CAs), also referred to as root CAs, whose self signed certificates are specified.
	ServerAuthCaPaths []string `json:"server_auth_ca_paths,omitempty"`
	// To support client authentication (load balancer acting as a client authenticating to the backend server), client certificate can be specified in the server-side SSL profile binding
	ClientCertificatePath string `json:"client_certificate_path,omitempty"`
	// Server authentication mode.
	ServerAuth string `json:"server_auth,omitempty"`
	// Authentication depth is used to set the verification depth in the server certificates chain.
	CertificateChainDepth int64 `json:"certificate_chain_depth,omitempty"`
	// A Certificate Revocation List (CRL) can be specified in the server-side SSL profile binding to disallow compromised server certificates.
	ServerAuthCrlPaths []string `json:"server_auth_crl_paths,omitempty"`
	// Server SSL profile defines reusable, application-independent server side SSL properties.
	SslProfilePath string `json:"ssl_profile_path,omitempty"`
}

type LbServerSslProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of load balancer server SSL profiles
	Results []LbServerSslProfile `json:"results"`
}

// Loadbalancer Service.
type LbService struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to enable access log
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// LBS could be instantiated (or created) on the Tier-1, etc. For now, only the Tier-1 object is supported.
	ConnectivityPath string `json:"connectivity_path,omitempty"`
	// Load balancer engine writes information about encountered issues of different severity levels to the error log. This setting is used to define the severity level of the error log.
	ErrorLogLevel string `json:"error_log_level,omitempty"`
	// If relax_scale_validation is true, the scale validations for virtual servers/pools/pool members/rules are relaxed for load balancer service. When load balancer service is deployed on edge nodes, the scale of virtual servers/pools/pool members for the load balancer service should not exceed the scale number of the largest load balancer size which could be configured on a certain edge form factor. For example, the largest load balancer size supported on a MEDIUM edge node is MEDIUM. So one SMALL load balancer deployed on MEDIUM edge nodes can support the scale number of MEDIUM load balancer. It is not recommended to enable active monitors if relax_scale_validation is true due to performance consideration. If relax_scale_validation is false, scale numbers should be validated for load balancer service.
	RelaxScaleValidation bool `json:"relax_scale_validation,omitempty"`
	// Flag to enable the load balancer service.
	Enabled bool `json:"enabled,omitempty"`
	// Load balancer service size.
	Size string `json:"size,omitempty"`
}

// The service count for specific load balancer usage severity.
type LbServiceCountPerSeverity struct {
	// Service count for specific serverity.
	ServiceCount int64 `json:"service_count,omitempty"`
	// The severity calculation is based on current usage percentage for one load balancer service.
	Severity string `json:"severity,omitempty"`
}

// Paged Collection of LBServices
type LbServiceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBService list results
	Results []LbService `json:"results"`
}

type LbServiceStatistics struct {
	ResourceType string `json:"resource_type"`
	// Statistics of load balancer pools
	Pools []LbPoolStatistics `json:"pools,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Statistics of load balancer virtual servers.
	VirtualServers []LbVirtualServerStatistics `json:"virtual_servers,omitempty"`
	// load balancer service identifier.
	ServicePath string                      `json:"service_path,omitempty"`
	Statistics  *LbServiceStatisticsCounter `json:"statistics,omitempty"`
}

type LbServiceStatisticsCounter struct {
	// Number of l4 total sessions.
	L4TotalSessions int64 `json:"l4_total_sessions,omitempty"`
	// Number of l7 current sessions.
	L7CurrentSessions int64 `json:"l7_current_sessions,omitempty"`
	// L4 max sessions is used to show the peak L4 max session data since load balancer starts to provide service.
	L4MaxSessions int64 `json:"l4_max_sessions,omitempty"`
	// Number of l4 current sessions.
	L4CurrentSessions int64 `json:"l4_current_sessions,omitempty"`
	// Number of l7 total sessions.
	L7TotalSessions int64 `json:"l7_total_sessions,omitempty"`
	// The average number of l4 current sessions per second, the number is averaged over the last 5 one-second intervals.
	L4CurrentSessionRate float64 `json:"l4_current_session_rate,omitempty"`
	// The average number of l7 current requests per second, the number is averaged over the last 5 one-second intervals.
	L7CurrentSessionRate float64 `json:"l7_current_session_rate,omitempty"`
	// L7 max sessions is used to show the peak L7 max session data since load balancer starts to provide service.
	L7MaxSessions int64 `json:"l7_max_sessions,omitempty"`
}

// LBServiceStatistics on specific Enforcement Point
type LbServiceStatisticsPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

type LbServiceStatus struct {
	ResourceType string `json:"resource_type"`
	// Ids of load balancer service related active transport nodes.
	ActiveTransportNodes []string `json:"active_transport_nodes,omitempty"`
	// status of load balancer pools.
	Pools []LbPoolStatus `json:"pools,omitempty"`
	// Cpu usage in percentage.
	CpuUsage int64 `json:"cpu_usage,omitempty"`
	// Ids of load balancer service related standby transport nodes.
	StandbyTransportNodes []string `json:"standby_transport_nodes,omitempty"`
	// Memory usage in percentage.
	MemoryUsage int64 `json:"memory_usage,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// UP means the load balancer service is working fine on both transport-nodes(if have); DOWN means the load balancer service is down on both transport-nodes (if have), hence the load balancer will not respond to any requests; ERROR means error happens on transport-node(s) or no status is reported from transport-node(s). The load balancer service may be working (or not working); NO_STANDBY means load balancer service is working in one of the transport node while not in the other transport-node (if have). Hence if the load balancer service in the working transport-node goes down, the load balancer service will go down; DETACHED means that the load balancer service has no attachment setting and is not instantiated in any transport nodes; DISABLED means that admin state of load balancer service is DISABLED; UNKNOWN means that no status reported from transport-nodes.The load balancer service may be working(or not working).
	ServiceStatus string `json:"service_status,omitempty"`
	// Error message, if available.
	ErrorMessage string `json:"error_message,omitempty"`
	// status of load balancer virtual servers.
	VirtualServers []LbVirtualServerStatus `json:"virtual_servers,omitempty"`
	// Load balancer service object path.
	ServicePath string `json:"service_path,omitempty"`
}

// LBServiceStatus on specific Enforcement Point
type LbServiceStatusPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Describes the capacity and current usage of virtual servers, pools and pool members for the given load balancer service.
type LbServiceUsage struct {
	ResourceType string `json:"resource_type"`
	// Pool capacity means maximum number of pools which could be configured in the given load balancer service.
	PoolCapacity int64 `json:"pool_capacity,omitempty"`
	// The size of load balancer service.
	ServiceSize string `json:"service_size,omitempty"`
	// The severity calculation is based on the largest usage percentage from virtual servers, pools and pool members for one load balancer service.
	Severity string `json:"severity,omitempty"`
	// Pool member capacity means maximum number of pool members which could be configured in the given load balancer service.
	PoolMemberCapacity int64 `json:"pool_member_capacity,omitempty"`
	// The current number of virtual servers which has been configured in the given load balancer service.
	CurrentVirtualServerCount int64 `json:"current_virtual_server_count,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The current number of pools which has been configured in the given load balancer service.
	CurrentPoolCount int64 `json:"current_pool_count,omitempty"`
	// The current number of pool members which has been configured in the given load balancer service.
	CurrentPoolMemberCount int64 `json:"current_pool_member_count,omitempty"`
	// The usage percentage is the largest usage percentage from virtual servers, pools and pool members for the load balancer service. If the property relax_scale_validation is set as true for LBService, it is possible that the value is larger than 100.0. For example, if SMALL LBS is deployed on MEDIUM edge node and configured with MEDIUM LBS virtual server scale number, LBS usage percentage is shown larger than 100.0.
	UsagePercentage float64 `json:"usage_percentage,omitempty"`
	// Virtual server capacity means maximum number of virtual servers which could be configured in the given load balancer service.
	VirtualServerCapacity int64 `json:"virtual_server_capacity,omitempty"`
	// LBService object path.
	ServicePath string `json:"service_path,omitempty"`
}

// LBServiceUsage on specific Enforcement Point
type LbServiceUsagePerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// Describes usage summary of virtual servers, pools and pool members for all load balancer services.
type LbServiceUsageSummary struct {
	// Overall pool usage percentage for all load balancer services.
	PoolUsagePercentage float64 `json:"pool_usage_percentage,omitempty"`
	// Pool capacity means maximum number of pools which can be configured for all load balancer services.
	PoolCapacity int64 `json:"pool_capacity,omitempty"`
	// The severity calculation is based on the overall usage percentage of pool members for all load balancer services.
	PoolMemberSeverity string `json:"pool_member_severity,omitempty"`
	// Pool capacity means maximum number of pool members which can be configured for all load balancer services.
	PoolMemberCapacity int64 `json:"pool_member_capacity,omitempty"`
	// Overall pool member usage percentage for all load balancer services.
	PoolMemberUsagePercentage float64 `json:"pool_member_usage_percentage,omitempty"`
	// The current count of virtual servers configured for all load balancer services.
	CurrentVirtualServerCount int64 `json:"current_virtual_server_count,omitempty"`
	// The current count of pools configured for all load balancer services.
	CurrentPoolCount int64 `json:"current_pool_count,omitempty"`
	// The current count of pool members configured for all load balancer services.
	CurrentPoolMemberCount int64 `json:"current_pool_member_count,omitempty"`
	// The severity calculation is based on the overall usage percentage of pools for all load balancer services.
	PoolSeverity string `json:"pool_severity,omitempty"`
	// The property identifies all lb service usages. By default, it is not included in response. It exists when parameter ?include_usages=true.
	ServiceUsages []LbServiceUsage `json:"service_usages,omitempty"`
	// Overall virtual server usage percentage for all load balancer services.
	VirtualServerUsagePercentage float64 `json:"virtual_server_usage_percentage,omitempty"`
	// The severity calculation is based on the overall usage percentage of virtual servers for all load balancer services.
	VirtualServerSeverity string `json:"virtual_server_severity,omitempty"`
	// The service count for each load balancer usage severity.
	ServiceCounts []LbServiceCountPerSeverity `json:"service_counts,omitempty"`
	// Virtual server capacity means maximum number of virtual servers which can be configured for all load balancer services.
	VirtualServerCapacity int64 `json:"virtual_server_capacity,omitempty"`
}

// Session cookie time.
type LbSessionCookieTime struct {
	// Both session cookie and persistence cookie are supported, Use LbSessionCookieTime for session cookie time setting, Use LbPersistenceCookieTime for persistence cookie time setting
	Type_ string `json:"type"`
	// Instead of using HTTP Cookie max-age and relying on client to expire the cookie, max idle time and/or max lifetime of the cookie can be used. Max idle time, if configured, specifies the maximum interval the cookie is valid for from the last time it was seen in a request. It is available for insert mode.
	CookieMaxIdle int64 `json:"cookie_max_idle,omitempty"`
	// Max life time, if configured, specifies the maximum interval the cookie is valid for from the first time the cookie was seen in a request. It is available for insert mode.
	CookieMaxLife int64 `json:"cookie_max_life,omitempty"`
}

// Snat auto map.
type LbSnatAutoMap struct {
	// Snat translation type.
	Type_ string `json:"type"`
}

// Snat disabled.
type LbSnatDisabled struct {
	// Snat translation type.
	Type_ string `json:"type"`
}

// Snat Ip element.
type LbSnatIpElement struct {
	// Ip address or ip range such as 1.1.1.1 or 1.1.1.101-1.1.1.160.
	IpAddress string `json:"ip_address"`
	// Subnet prefix length should be not specified if there is only one single IP address or IP range.
	PrefixLength int64 `json:"prefix_length,omitempty"`
}

// Snat Ip pool.
type LbSnatIpPool struct {
	// Snat translation type.
	Type_ string `json:"type"`
	// If an IP range is specified, the range may contain no more than 64 IP addresses.
	IpAddresses []LbSnatIpElement `json:"ip_addresses"`
}

// Snat Translation.
type LbSnatTranslation struct {
	// Snat translation type.
	Type_ string `json:"type"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a LBVirtualServer by binding a persistence profile to it.
type LbSourceIpPersistenceProfile struct {
	defaultStruct
	// Persistence shared setting indicates that all LBVirtualServers that consume this LBPersistenceProfile should share the same persistence mechanism when enabled.  Meaning, persistence entries of a client accessing one virtual server will also affect the same client's connections to a different virtual server. For example, say there are two virtual servers vip-ip1:80 and vip-ip1:8080 bound to the same Group g1 consisting of two servers (s11:80 and s12:80). By default, each virtual server will have its own persistence table or cookie. So, in the earlier example, there will be two tables (vip-ip1:80, p1) and (vip-ip1:8080, p1) or cookies. So, if a client connects to vip1:80 and later connects to vip1:8080, the second connection may be sent to a different server than the first.  When persistence_shared is enabled, then the second connection will always connect to the same server as the original connection. For COOKIE persistence type, the same cookie will be shared by multiple virtual servers. For SOURCE_IP persistence type, the persistence table will be shared across virtual servers. For GENERIC persistence type, the persistence table will be shared across virtual servers which consume the same persistence profile in LBRule actions.
	PersistenceShared bool `json:"persistence_shared,omitempty"`
	// The resource_type property identifies persistence profile type.
	ResourceType string `json:"resource_type"`
	// Persistence purge setting.
	Purge string `json:"purge,omitempty"`
	// Persistence entries are not synchronized to the HA peer by default.
	HaPersistenceMirroringEnabled bool `json:"ha_persistence_mirroring_enabled,omitempty"`
	// When all connections complete (reference count reaches 0), persistence entry timer is started with the expiration time.
	Timeout int64 `json:"timeout,omitempty"`
}

type LbSslCipherAndProtocolListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of SSL ciphers
	Ciphers []LbSslCipherInfo `json:"ciphers"`
	// List of SSL protocols
	Protocols []LbSslProtocolInfo `json:"protocols"`
}

// SSL cipher
type LbSslCipherInfo struct {
	// Default SSL cipher flag
	IsDefault bool `json:"is_default"`
	// Secure/insecure SSL cipher flag
	IsSecure bool `json:"is_secure"`
	// Several cipher groups might contain the same cipher suite, each cipher suite could have multiple cipher group labels.
	CipherGroupLabels []string `json:"cipher_group_labels,omitempty"`
	// SSL cipher
	Cipher string `json:"cipher"`
}

// This action is used to select SSL mode. Three types of SSL mode actions can be specified in Transport phase, ssl passthrough, ssl offloading and ssl end-to-end.
type LbSslModeSelectionAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// SSL Passthrough: LB establishes a TCP connection with client and another connection with selected backend server. LB won't inspect the stream data between client and backend server, but just pass it through. Backend server exchanges SSL connection with client. SSL Offloading: LB terminiates the connections from client, and establishes SSL connection with it. After receiving the HTTP request, LB connects the selected backend server and talk with it via HTTP without SSL. LB estalishes new connection to selected backend server for each HTTP request, in case ntlm or multiplexing are NOT configured. SSL End-to-End: LB terminiates the connections from client, and establishes SSL connection with it. After receiving the HTTP request, LB connects the selected backend server and talk with it via HTTPS. LB estalishes new SSL connection to selected backend server for each HTTP request, in case ntlm or multiplexing are NOT configured.
	SslMode string `json:"ssl_mode"`
}

// Load balancer abstract SSL profile.
type LbSslProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// SSL protocol
type LbSslProtocolInfo struct {
	// Default SSL protocol flag
	IsDefault bool `json:"is_default"`
	// Secure/insecure SSL protocol flag
	IsSecure bool `json:"is_secure"`
	// SSL protocol
	Protocol string `json:"protocol"`
}

// This condition is used to match SSL SNI in client hello. This condition is only supported in TRANSPORT phase. Only if virtual server is associated with client SSL profile, matching SNI condition in transport phase is available to be configured.
type LbSslSniCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// If true, case is significant when comparing SNI value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of SNI
	MatchType string `json:"match_type,omitempty"`
	// The SNI(Server Name indication) in client hello message.
	Sni string `json:"sni"`
}

type LbStatisticsCounter struct {
	// Number of source IP persistence entries
	SourceIpPersistenceEntrySize int64 `json:"source_ip_persistence_entry_size,omitempty"`
	// Number of packets out.
	PacketsOut int64 `json:"packets_out,omitempty"`
	// The total number of dropped TCP SYN or UDP packets by access list control.
	DroppedPacketsByAccessList int64 `json:"dropped_packets_by_access_list,omitempty"`
	// The average number of outbound bytes per second, the number is averaged over the last 5 one-second intervals.
	BytesOutRate float64 `json:"bytes_out_rate,omitempty"`
	// Number of total sessions.
	TotalSessions int64 `json:"total_sessions,omitempty"`
	// The average number of http requests per second, the number is averaged over the last 5 one-second intervals.
	HttpRequestRate float64 `json:"http_request_rate,omitempty"`
	// Number of bytes out.
	BytesOut int64 `json:"bytes_out,omitempty"`
	// The average number of inbound packets per second, the number is averaged over the last 5 one-second intervals.
	PacketsInRate float64 `json:"packets_in_rate,omitempty"`
	// The average number of inbound bytes per second, the number is averaged over the last 5 one-second intervals.
	BytesInRate float64 `json:"bytes_in_rate,omitempty"`
	// Number of current sessions.
	CurrentSessions int64 `json:"current_sessions,omitempty"`
	// Number of maximum sessions.
	MaxSessions int64 `json:"max_sessions,omitempty"`
	// The average number of outbound packets per second, the number is averaged over the last 5 one-second intervals.
	PacketsOutRate float64 `json:"packets_out_rate,omitempty"`
	// The total number of http requests.
	HttpRequests int64 `json:"http_requests,omitempty"`
	// Number of bytes in.
	BytesIn int64 `json:"bytes_in,omitempty"`
	// The average number of current sessions per second, the number is averaged over the last 5 one-second intervals.
	CurrentSessionRate float64 `json:"current_session_rate,omitempty"`
	// The total number of dropped sessions by LB rule action.
	DroppedSessionsByLbruleAction int64 `json:"dropped_sessions_by_lbrule_action,omitempty"`
	// Number of packets in.
	PacketsIn int64 `json:"packets_in,omitempty"`
}

// This condition is used to match TCP header fields of HTTP messages. Currently, only the TCP source port is supported. Ports can be expressed as a single port number like 80, or a port range like 1024-1030.
type LbTcpHeaderCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// TCP source port of HTTP message
	SourcePort string `json:"source_port"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over TCP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified  number of consecutive successful healthchecks (rise_count) will bring  the member back to UP state. After a healthcheck is initiated, if it  does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LbTcpMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported.
	Receive string `json:"receive,omitempty"`
	// If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.
	Send string `json:"send,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the LBRule object. This represents active health monitoring over UDP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type LbUdpMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value. For ICMP monitor, monitor_port is not required.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount int64 `json:"rise_count,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Expected data, can be anywhere in the response and it has to be a string, regular expressions are not supported. UDP healthcheck is considered failed if there is no server response within the timeout period.
	Receive string `json:"receive"`
	// The data to be sent to the monitored server.
	Send string `json:"send"`
}

// This action is used to create a new variable and assign value to it. One action can be used to create one variable. To create multiple variables, multiple actions must be defined. The variables can be used by LBVariableCondition, etc.
type LbVariableAssignmentAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// Value of variable.
	VariableValue string `json:"variable_value"`
	// Name of the variable to be assigned.
	VariableName string `json:"variable_name"`
}

// This condition is used to match variable's name and value at all phases. The variables could be captured from REGEX or assigned by LBVariableAssignmentAction or system embedded variable. Varialbe_name and variable_value should be matched at the same time.
type LbVariableCondition struct {
	// A flag to indicate whether reverse the match result of this condition
	Inverse bool `json:"inverse,omitempty"`
	// Type of load balancer rule condition
	Type_ string `json:"type"`
	// Value of variable to be matched
	VariableValue string `json:"variable_value"`
	// If true, case is significant when comparing variable value.
	CaseSensitive bool `json:"case_sensitive,omitempty"`
	// Match type of variable value
	MatchType string `json:"match_type,omitempty"`
	// Name of the variable to be matched
	VariableName string `json:"variable_name"`
}

// This action is performed in HTTP response rewrite phase. It is used to learn the value of variable from the HTTP response, and insert an entry into the persistence table if the entry doesn't exist.
type LbVariablePersistenceLearnAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// The property is used to enable a hash operation for variable value when composing the persistence key.
	VariableHashEnabled bool `json:"variable_hash_enabled,omitempty"`
	// The property is the name of variable to be learnt. It is used to identify which variable's value is learnt from HTTP response. The variable can be a built-in variable such as \"_cookie_JSESSIONID\", a customized variable defined in LBVariableAssignmentAction or a captured variable in regular expression such as \"article\". For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
	VariableName string `json:"variable_name"`
	// If the persistence profile path is not specified, a default persistence table is created per virtual server. Currently, only LBGenericPersistenceProfile is supported.
	PersistenceProfilePath string `json:"persistence_profile_path,omitempty"`
}

// This action is performed in HTTP forwarding phase. It is used to inspect the variable of HTTP request, and look up the persistence entry with its value and pool uuid as key. If the persistence entry is found, the HTTP request is forwarded to the recorded backend server according to the persistence entry. If the persistence entry is not found, a new entry is created in the table after backend server is selected.
type LbVariablePersistenceOnAction struct {
	// The property identifies the load balancer rule action type.
	Type_ string `json:"type"`
	// The property is used to enable a hash operation for variable value when composing the persistence key.
	VariableHashEnabled bool `json:"variable_hash_enabled,omitempty"`
	// The property is the name of variable to be used. It specifies which variable's value of a HTTP Request will be used in the key of persistence entry. The variable can be a built-in variable such as \"_cookie_JSESSIONID\", a customized variable defined in LBVariableAssignmentAction or a captured variable in regular expression such as \"article\". For the full list of built-in variables, please reference the NSX-T Administrator's Guide.
	VariableName string `json:"variable_name"`
	// If the persistence profile path is not specified, a default persistence table is created per virtual server. Currently, only LBGenericPersistenceProfile is supported.
	PersistenceProfilePath string `json:"persistence_profile_path,omitempty"`
}

// All the types of LBVirtualServer extend from this abstract class. This is present for extensibility.
type LbVirtualServer struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfilePath string               `json:"lb_persistence_profile_path,omitempty"`
	AccessListControl        *LbAccessListControl `json:"access_list_control,omitempty"`
	// The server pool(LBPool) contains backend servers. Server pool consists of one or more servers, also referred to as pool members, that are similarly configured and are running the same application.
	PoolPath string `json:"pool_path,omitempty"`
	// The property log_significant_event_only can take effect only when access_log_enabled is true. If log_significant_event_only is true, significant events are logged in access log. For L4 virtual server, significant event means unsuccessful(error or dropped) TCP/UDP connections. For L7 virtual server, significant event means unsuccessful connections or HTTP/HTTPS requests which have error response code(e.g. 4xx, 5xx).
	LogSignificantEventOnly bool `json:"log_significant_event_only,omitempty"`
	// Load balancer rules allow customization of load balancing behavior using match/action rules. Currently, load balancer rules are supported for only layer 7 virtual servers with LBHttpProfile.
	Rules []LbRule `json:"rules,omitempty"`
	// Default pool member ports when member port is not defined.
	DefaultPoolMemberPorts  []string                   `json:"default_pool_member_ports,omitempty"`
	ServerSslProfileBinding *LbServerSslProfileBinding `json:"server_ssl_profile_binding,omitempty"`
	// The application profile defines the application protocol characteristics. It is used to influence how load balancing is performed. Currently, LBFastTCPProfile, LBFastUDPProfile and LBHttpProfile, etc are supported.
	ApplicationProfilePath string `json:"application_profile_path"`
	// If access log is enabled, all HTTP requests sent to L7 virtual server are logged to the access log file. Both successful returns information responses(1xx), successful responses(2xx), redirection messages(3xx) and unsuccessful requests, backend server returns 4xx or 5xx, are logged to access log, if enabled. All L4 virtual server connections are also logged to the access log if enabled. The non-significant events such as successful requests are not logged if log_significant_event_only is set to true.
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// To ensure one virtual server does not over consume resources, affecting other applications hosted on the same LBS, connections to a virtual server can be capped. If it is not specified, it means that connections are unlimited.
	MaxConcurrentConnections int64 `json:"max_concurrent_connections,omitempty"`
	// To ensure one virtual server does not over consume resources, connections to a member can be rate limited. If it is not specified, it means that connection rate is unlimited.
	MaxNewConnectionRate int64 `json:"max_new_connection_rate,omitempty"`
	// virtual servers can be associated to LBService(which is similar to physical/virtual load balancer), LB virtual servers, pools and other entities could be defined independently, the LBService identifier list here would be used to maintain the relationship of LBService and other LB entities.
	LbServicePath           string                     `json:"lb_service_path,omitempty"`
	ClientSslProfileBinding *LbClientSslProfileBinding `json:"client_ssl_profile_binding,omitempty"`
	// When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool.
	SorryPoolPath string `json:"sorry_pool_path,omitempty"`
	// Configures the IP address of the LBVirtualServer where it receives all client connections and distributes them among the backend servers.
	IpAddress string `json:"ip_address"`
	// Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range.
	Ports []string `json:"ports"`
	// Flag to enable the load balancer virtual server.
	Enabled bool `json:"enabled,omitempty"`
}

// Paged Collection of LBVirtualServers
type LbVirtualServerListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LBVirtualServer list results
	Results []LbVirtualServer `json:"results"`
}

type LbVirtualServerStatistics struct {
	ResourceType string `json:"resource_type"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64                `json:"last_update_timestamp,omitempty"`
	Statistics          *LbStatisticsCounter `json:"statistics,omitempty"`
	// load balancer virtual server object path.
	VirtualServerPath string `json:"virtual_server_path,omitempty"`
}

// LBVirtualServerStatistics on specific Enforcement Point
type LbVirtualServerStatisticsPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

type LbVirtualServerStatus struct {
	ResourceType string `json:"resource_type"`
	// UP means that all primary members in default pool are in UP status. For L7 virtual server, if there is no default pool, the virtual server would be treated as UP. PARTIALLY_UP means that some(not all) primary members in default pool are in UP status. The size of these active primary members should be larger than or equal to the certain number(min_active_members) which is defined in LBPool. When there are no backup members which are in the UP status, the number(min_active_members) would be ignored. PRIMARY_DOWN means that less than certain(min_active_members) primary members in default pool are in UP status but backup members are in UP status, the connections would be dispatched to backup members. DOWN means that all primary and backup members are in DOWN status. DETACHED means that the virtual server is not bound to any service. DISABLED means that the admin state of the virtual server is disabled. UNKOWN means that no status reported from transport-nodes. The associated load balancer service may be working(or not working).
	Status string `json:"status,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// load balancer virtual server object path.
	VirtualServerPath string `json:"virtual_server_path,omitempty"`
}

// LBVirtualServerStatus on specific Enforcement Point
type LbVirtualServerStatusPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	ResourceType         string `json:"resource_type"`
}

// This is the base type for all identity sources that use LDAP for authentication and group membership.
type LdapIdentitySource struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id           string `json:"id,omitempty"`
	ResourceType string `json:"resource_type"`
	// The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer `json:"ldap_servers,omitempty"`
	// The name of the authentication domain. When users log into NSX using an identity of the form \"user@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName string `json:"domain_name"`
	// The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn string `json:"base_dn"`
}

// The results of listing LDAP identity sources.
type LdapIdentitySourceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64                `json:"result_count,omitempty"`
	Results     []LdapIdentitySource `json:"results,omitempty"`
}

// Results from probing all LDAP servers in an LDAP identity source configuration.
type LdapIdentitySourceProbeResults struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Probe results for all probed LDAP servers.
	Results []IdentitySourceLdapServerProbeResult `json:"results,omitempty"`
}

type LdapIdentitySourceSearchResultItem struct {
	// Distinguished name (DN) of the entry.
	Dn string `json:"dn,omitempty"`
	// The Common Name (CN) of the entry, if available.
	CommonName string `json:"common_name,omitempty"`
	// For Active Directory (AD) users, this will be the user principal name (UPN), in the format user@domain. For non-AD users, this will be the user's uid property, followed by \"@\" and the domain of the directory. For groups, this will be the group's common name, followed by \"@\" and the domain of the directory.
	PrincipalName string `json:"principal_name,omitempty"`
	// Describes the type of the entry
	Type_ string `json:"type,omitempty"`
}

// A list of LDA entries returned from a search of an LDAP identity source.
type LdapIdentitySourceSearchResultList struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema  string                               `json:"_schema,omitempty"`
	Results []LdapIdentitySourceSearchResultItem `json:"results,omitempty"`
}

// Detail about one error encountered during a probe.
type LdapProbeError struct {
	// The cause of the error. CONNECTION_TIMEOUT: The connection timed out when contating the                     LDAP server. Check the hostname/ip. CONNECTION_REFUSED: The connection was refused when contacting the                     LDAP server. Ensure that the LDAP server is                     up and that you have the correct ip/hostname. STARTTLS_FAILED: Unable to use StartTLS to upgrade the                  connection to use TLS. Ensure the LDAP server                  supports TLS and if not, use LDAP or LDAPS                  as the protocol. INVALID_CREDENTIALS: The username and/or password are incorrect. THUMBPRINT_MISMATCH: A certificate thumbprint was provided in the                      LDAP server configuration, but did not match                      the certificate presented by the LDAP server. BASE_DN_NOT_FOUND: The configured base_dn does not                    exist on the LDAP server or is not                    readable. SSL_HANDSHAKE_ERROR: An error occurred while establishing a secure                      connection with the LDAP server. GENERAL_ERROR: An undetermined error occurred.
	ErrorType string `json:"error_type,omitempty"`
}

// Represents legend that describes the entities of the widget.
type Legend struct {
	// Describes the relative placement of legend. The legend of a widget can be placed either to the TOP or BOTTOM or LEFT or RIGHT relative to the widget. For example, if RIGHT is chosen then legend is placed to the right of the widget.
	Position string `json:"position,omitempty"`
	// If set to true, it will display the counts in legend. If set to false, counts of entities are not displayed in the legend.
	DisplayCount bool `json:"display_count,omitempty"`
	// Describes the render type for the legend. The legend for an entity describes the entity in the widget. The supported legend type is a circle against which the entity's details such as display_name are shown. The color of the circle denotes the color of the entity shown inside the widget.
	Type_ string `json:"type,omitempty"`
	// Show unit of entities in the legend.
	Unit string `json:"unit,omitempty"`
	// Describes the alignment of legend. Alignment of a legend denotes how individual items of the legend are aligned in a container. For example, if VERTICAL is chosen then the items of the legend will appear one below the other and if HORIZONTAL is chosen then the items will appear side by side.
	Alignment string `json:"alignment,omitempty"`
}

// Base class for list results from collections
type ListResult struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
}

// Local Egress is used on both server and client sites so that the gateway is used for N-S traffic and overhead on L2VPN tunnel is reduced.
type LocalEgress struct {
	// Gateway IP for Local Egress. Local egress is enabled only when this list is not empty.
	OptimizedIps []string `json:"optimized_ips,omitempty"`
}

// Local egress rounting policy
type LocalEgressRoutingEntry struct {
	// Next hop address for proximity routing.
	NexthopAddress string `json:"nexthop_address"`
	// The destination address of traffic matching a prefix-list is forwarded to the nexthop_address. Traffic matching a prefix list with Action DENY will be dropped. Individual prefix-lists specified could have different actions.
	PrefixListPaths []string `json:"prefix_list_paths"`
}

// Site specific configuration of Tier0 in multi-site scenario
type LocaleServices struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy paths to edge nodes. Specified edge is used as preferred edge cluster member when failover mode is set to PREEMPTIVE, not applicable otherwise.
	PreferredEdgePaths []string `json:"preferred_edge_paths,omitempty"`
	// This configuration can be defined only for Active-Standby Tier0 gateway to provide redundancy. For mulitple external interfaces, multiple HA VIP configs must be defined and each config will pair exactly two external interfaces. The VIP will move and will always be owned by the Active node. When this property is configured, configuration of dynamic-routing is not allowed.
	HaVipConfigs []Tier0HaVipConfig `json:"ha_vip_configs,omitempty"`
	// Policy path to edge cluster. Auto-assigned on Tier0 if associated enforcement-point has only one edge cluster.
	EdgeClusterPath           string                          `json:"edge_cluster_path,omitempty"`
	RouteRedistributionConfig *Tier0RouteRedistributionConfig `json:"route_redistribution_config,omitempty"`
	// Enable redistribution of different types of routes on Tier-0. This property is only valid for locale-service under Tier-0. This property is deprecated, please use \"route_redistribution_config\" property to configure redistribution rules.
	RouteRedistributionTypes []string `json:"route_redistribution_types,omitempty"`
}

// Paged collection of LocaleServices
type LocaleServicesListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// LocaleServices results
	Results []LocaleServices `json:"results"`
}

type LogicalPortStatistics struct {
	MacLearning              *MacLearningCounters      `json:"mac_learning,omitempty"`
	DroppedBySecurityPackets *PacketsDroppedBySecurity `json:"dropped_by_security_packets,omitempty"`
	// The id of the logical port
	LogicalPortId string `json:"logical_port_id,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
}

type LogicalRouterPortCounters struct {
	// The number of dropped packets
	DroppedPackets int64 `json:"dropped_packets,omitempty"`
	// The total number of bytes
	TotalBytes int64 `json:"total_bytes,omitempty"`
	// The total number of packets
	TotalPackets int64 `json:"total_packets,omitempty"`
}

type LogicalRouterPortStatistics struct {
	// Per Node Statistics
	PerNodeStatistics []LogicalRouterPortStatisticsPerNode `json:"per_node_statistics,omitempty"`
	// The ID of the logical router port
	LogicalRouterPortId string `json:"logical_router_port_id"`
}

type LogicalRouterPortStatisticsPerNode struct {
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64                      `json:"last_update_timestamp,omitempty"`
	Rx                  *LogicalRouterPortCounters `json:"rx,omitempty"`
	Tx                  *LogicalRouterPortCounters `json:"tx,omitempty"`
	// The ID of the TransportNode
	TransportNodeId string `json:"transport_node_id,omitempty"`
}

type LogicalRouterPortStatisticsSummary struct {
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64                      `json:"last_update_timestamp,omitempty"`
	Rx                  *LogicalRouterPortCounters `json:"rx,omitempty"`
	Tx                  *LogicalRouterPortCounters `json:"tx,omitempty"`
	// The ID of the logical router port
	LogicalRouterPortId string `json:"logical_router_port_id"`
}

// This holds the state of Logical Router. If there are errors in realizing LR outside of MP, it gives details of the components and specific errors.
type LogicalRouterState struct {
	// Request identifier of the API which modified the entity.
	PendingChangeList []string `json:"pending_change_list,omitempty"`
}

type LogicalRouterStatus struct {
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The id of the logical router
	LogicalRouterId string `json:"logical_router_id"`
	// Per Node Status
	PerNodeStatus []LogicalRouterStatusPerNode `json:"per_node_status,omitempty"`
	// Egress mode for the logical router at given mode
	LocaleOperationMode string `json:"locale_operation_mode,omitempty"`
}

type LogicalRouterStatusPerNode struct {
	// A service router's HA status on an edge node
	HighAvailabilityStatus string `json:"high_availability_status"`
	// id of the service router where the router status is retrieved.
	ServiceRouterId string `json:"service_router_id,omitempty"`
	// id of the transport node where the router status is retrieved.
	TransportNodeId string `json:"transport_node_id"`
}

type LogicalSwitchStatistics struct {
	MacLearning              *MacLearningCounters      `json:"mac_learning,omitempty"`
	DroppedBySecurityPackets *PacketsDroppedBySecurity `json:"dropped_by_security_packets,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The id of the logical Switch
	LogicalSwitchId string `json:"logical_switch_id,omitempty"`
}

// Represents MAC address expressions in the form of an array, to support addition of MAC addresses in a group. Avoid creating groups with multiple MACAddressExpression. In future releases, group will be restricted to contain a single MACAddressExpression. To group MAC addresses, use nested groups instead of multiple MACAddressExpression.
type MacAddressExpression struct {
	ResourceType string `json:"resource_type"`
	// This array can consist of one or more MAC addresses.
	MacAddresses []string `json:"mac_addresses"`
}

// List of MAC Addresses.
type MacAddressList struct {
	// The array contains MAC addresses.
	MacAddresses []string `json:"mac_addresses"`
}

// Mac Discovery Profile
type MacDiscoveryProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Indicates how long learned MAC address remain.
	MacLearningAgingTime int32 `json:"mac_learning_aging_time,omitempty"`
	// Allowing source MAC address learning
	MacLearningEnabled bool `json:"mac_learning_enabled"`
	// The policy after MAC Limit is exceeded
	MacLimitPolicy string `json:"mac_limit_policy,omitempty"`
	// This property specifies the limit on the maximum number of MACs learned for a remote virtual machine's MAC to VTEP binding per overlay logical switch.
	RemoteOverlayMacLimit int32 `json:"remote_overlay_mac_limit,omitempty"`
	// The maximum number of MAC addresses that can be learned on this port
	MacLimit int32 `json:"mac_limit,omitempty"`
	// Allowing source MAC address change
	MacChangeEnabled bool `json:"mac_change_enabled,omitempty"`
	// Allowing flooding for unlearned MAC for ingress traffic
	UnknownUnicastFloodingEnabled bool `json:"unknown_unicast_flooding_enabled,omitempty"`
}

// Paged collection of Mac Discovery Profiles
type MacDiscoveryProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Mac Discovery profile list results
	Results []MacDiscoveryProfile `json:"results"`
}

type MacLearningCounters struct {
	// Number of MACs learned
	MacsLearned int64 `json:"macs_learned,omitempty"`
	// The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.
	MacNotLearnedPacketsDropped int64 `json:"mac_not_learned_packets_dropped,omitempty"`
	// The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.
	MacNotLearnedPacketsAllowed int64 `json:"mac_not_learned_packets_allowed,omitempty"`
}

// Base type for resources that are managed by API clients
type ManagedResource struct {
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
	Revision int32 `json:"_revision,omitempty"`
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
}

type ManagementConfig struct {
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
	Revision int32 `json:"_revision,omitempty"`
	// True if Management nodes publish their fqdns(instead of default IP addresses) across NSX for its reachability.
	PublishFqdns bool `json:"publish_fqdns"`
}

// Metadata Proxy Configuration
type MetadataProxyConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Secret word or phrase to access metadata server.
	Secret string `json:"secret"`
	// Valid certificates should be configured. The validity of certificates is not checked. Certificates are managed through /infra/certificates API on Policy.
	ServerCertificates []string `json:"server_certificates,omitempty"`
	// Edge clusters configured on MP are auto-discovered by Policy and create corresponding read-only intent objects.
	EdgeClusterPath string `json:"edge_cluster_path"`
	// Edge nodes should be members of edge cluster configured in edge_cluster_path.
	PreferredEdgePaths []string `json:"preferred_edge_paths,omitempty"`
	// The cryptographic protocols listed here are supported by the metadata proxy. TLSv1.1 and TLSv1.2 are supported by default
	CryptoProtocols []string `json:"crypto_protocols,omitempty"`
	// This field is a URL. Example formats - http://1.2.3.4:3888/path, http://text-md-proxy:5001/. Port number should be between 3000-9000.
	ServerAddress string `json:"server_address"`
	// Only auto-placed metadata proxies are considered for relocation. Must be FALSE, when the preferred_edge_paths property is configured.
	EnableStandbyRelocation bool `json:"enable_standby_relocation,omitempty"`
}

type MetadataProxyConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of metadata proxy configurations
	Results []MetadataProxyConfig `json:"results"`
}

// Base Monitoring Profile Binding Map
type MonitoringProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// Combines two or more widgetconfigurations into a multi-widget
type MultiWidgetConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Array of widgets that are part of the multi-widget.
	Widgets []WidgetItem `json:"widgets"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
}

// Multicast forwarding entry.
type MulticastForwarding struct {
	// Multicast source address.
	Source string `json:"source,omitempty"`
	// Array of egress interfaces on whic multicast traffic is forwarded.
	OutgoingInterfaces []MulticastForwardingInterface `json:"outgoing_interfaces,omitempty"`
	IncomingInterface  *MulticastForwardingInterface  `json:"incoming_interface,omitempty"`
	// Multicast group address.
	MulticastGroup string `json:"multicast_group,omitempty"`
}

type MulticastForwardingCsvRecord struct {
	// Transport node uuid or policy path.
	TransportNode string `json:"transport_node,omitempty"`
	// Multicast source address.
	Source string `json:"source,omitempty"`
	// Array of egress interfaces on whic multicast traffic is forwarded.
	OutgoingInterfaces string `json:"outgoing_interfaces,omitempty"`
	// Ingress interface on whic multicast traffic is learned.
	IncomingInterface string `json:"incoming_interface,omitempty"`
	// Multicast group address.
	MulticastGroup string `json:"multicast_group,omitempty"`
}

// Multicast forwarding interface details.
type MulticastForwardingInterface struct {
	// Interface id.
	Ifuid string `json:"ifuid,omitempty"`
}

// Multicast Forwarding Per Edge.
type MulticastForwardingPerEdge struct {
	McastForwarding []MulticastForwarding `json:"mcast_forwarding,omitempty"`
	// Policy path to edge node.
	EdgePath string `json:"edge_path"`
}

// Multicast route details.
type MulticastRoute struct {
	// Time for which multicast route entry is active.
	Uptime string `json:"uptime,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// Time-to-live value for multicast packets.
	Ttl int64 `json:"ttl,omitempty"`
	// Ingress interface on which multicast traffic is learned.
	InputInterface string `json:"input_interface,omitempty"`
	// Multicast source address.
	SourceAddress string `json:"source_address,omitempty"`
	// Egress interface on which multicast traffic is forwarded.
	OutputInterface string `json:"output_interface,omitempty"`
}

type MulticastRouteCsvRecord struct {
	// Transport node uuid or policy path.
	TransportNode string `json:"transport_node,omitempty"`
	// Time for which multicast route entry is active.
	Uptime string `json:"uptime,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// Time-to-live value for multicast packets.
	Ttl int64 `json:"ttl,omitempty"`
	// Ingress interface on which multicast traffic is learned.
	InputInterface string `json:"input_interface,omitempty"`
	// Multicast source address.
	SourceAddress string `json:"source_address,omitempty"`
	// Egress interface on which multicast traffic is forwarded.
	OutputInterface string `json:"output_interface,omitempty"`
}

// Multicast Routes Per Edge.
type MulticastRoutesPerEdge struct {
	McastRoutes []MulticastRoute `json:"mcast_routes,omitempty"`
	// Policy path to edge node.
	EdgePath string `json:"edge_path"`
}

// Contains Neighbor Discovery Protocol (ND) snooping related configuration.
type NdSnoopingConfig struct {
	// Maximum number of ND (Neighbor Discovery Protocol) snooped IPv6 addresses
	NdSnoopingLimit int32 `json:"nd_snooping_limit,omitempty"`
	// Enable this method will snoop the NS (Neighbor Solicitation) and NA (Neighbor Advertisement) messages in the ND (Neighbor Discovery Protocol) family of messages which are transmitted by a VM. From the NS messages, we will learn about the source which sent this NS message. From the NA message, we will learn the resolved address in the message which the VM is a recipient of. Addresses snooped by this method are subject to TOFU (Trust on First Use) policies as enforced by the system.
	NdSnoopingEnabled bool `json:"nd_snooping_enabled,omitempty"`
}

// Neighbor discovery protocol header
type NdpHeader struct {
	// The IP address of the destination of the solicitation. It MUST NOT be a multicast address.
	DstIp string `json:"dst_ip,omitempty"`
	// This field specifies the type of the Neighbor discover message being sent. NEIGHBOR_SOLICITATION - Neighbor Solicitation message to discover the link-layer address of an on-link IPv6 node or to confirm a previously determined link-layer address. NEIGHBOR_ADVERTISEMENT - Neighbor Advertisement message in response to a Neighbor Solicitation message.
	MsgType string `json:"msg_type,omitempty"`
}

// Nested expressions is a list of condition expressions that must follow the below criteria: 0. Only allowed expressions in a NestedExpression are Condition and ConjunctionOperator. 1. A non-empty expression list, must be of odd size. In a list, with indices starting from 0, all condition expressions must be at even indices, separated by the conjunction expressions AND at odd indices. 2. There may be at most 5 condition expressions inside a list. 3. NestedExpressions are homogeneous in nature, i.e, all expressions inside a nested expression must have the same member type.
type NestedExpression struct {
	ResourceType string `json:"resource_type"`
	// Expression.
	Expressions []Expression `json:"expressions"`
}

// A ServiceEntry that represents nesting service
type NestedServiceServiceEntry struct {
	ResourceType string `json:"resource_type"`
	// path of nested service
	NestedServicePath string `json:"nested_service_path"`
}

// Network error related to container objects.
type NetworkError struct {
	// Detailed message of network related error.
	ErrorMessage string `json:"error_message,omitempty"`
	// Error code of network related error.
	ErrorCode string `json:"error_code,omitempty"`
	// Additional error information in json format.
	Spec string `json:"spec,omitempty"`
}

// Information on the Network interfaces present on the partner appliance that needs to be configured by the NSX Manager.
type NicMetadata struct {
	// Network Interface label.
	InterfaceLabel string `json:"interface_label"`
	// Interface that needs to be configured on the partner appliance. Ex. MANAGEMENT, DATA1, DATA2, HA1, HA2, CONTROL.
	InterfaceType string `json:"interface_type"`
	// Transport Type of the service, which is the mechanism of redirecting the traffic to the the partner appliance. Transport type is required if Service caters to any functionality other than EPP. Here, the transports array specifies the kinds of transport where this particular NIC is user configurable. If nothing is specified, and the \"user_configurable\" flag is true, then user configuration will be allowed for all transports. If any transport is/are specified, then it will be considered as user configurable for the specified transports only.\"
	Transports []string `json:"transports,omitempty"`
	// Used to specify if the given interface needs configuration. Management nics will always need the configuration, for others it will be use case specific. For example, a DATA NIC may be user configurable if the appliance is deployed in certain mode, such as L3_ROUTED.
	UserConfigurable bool `json:"user_configurable,omitempty"`
	// Network Interface index.
	InterfaceIndex int64 `json:"interface_index"`
}

// Role
type NsxRole struct {
	// This field represents the identifier of the role. With the introduction of custom roles, this field is no longer an enum.
	Role string `json:"role"`
	// Please use the /user-info/permissions api to get the permission that the user has on each feature.
	Permissions []string `json:"permissions,omitempty"`
}

// Answer of dns nslookup
type NsxTDnsAnswer struct {
	// Resource type of the DNS forwarder nslookup answer.
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the DNS forwarder nslookup answer is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// Authoritative answers
	AuthoritativeAnswers []NsxTDnsQueryAnswer `json:"authoritative_answers,omitempty"`
	// ID of the edge node that performed the query.
	EdgeNodeId string `json:"edge_node_id"`
	// Dns server ip address and port, format is \"ip address#port\".
	DnsServer string `json:"dns_server"`
	// Non authoritative answers
	NonAuthoritativeAnswers []NsxTDnsQueryAnswer `json:"non_authoritative_answers,omitempty"`
	// It can be NXDOMAIN or error message which is not consisted of authoritative_answer or non_authoritative_answer.
	RawAnswer string `json:"raw_answer,omitempty"`
}

// Answer of nslookup
type NsxTDnsQueryAnswer struct {
	// Matched name of the given address.
	Name string `json:"name,omitempty"`
	// Resolved IP address matched with the nslookup address provided as a request parameter.
	Address string `json:"address,omitempty"`
}

// Query statistics counters of used cache from node
type NsxTPerNodeUsedCacheStatistics struct {
	// The total number of cached entries
	CachedEntries int64 `json:"cached_entries,omitempty"`
	// UUID of active/standby transport node
	NodeId string `json:"node_id,omitempty"`
	// The memory size used in cache, in kb
	UsedCacheSize int64 `json:"used_cache_size,omitempty"`
}

// Query statistics counters to an upstream server including successfully forwarded queries and failed queries.
type NsxTUpstreamServerStatistics struct {
	// Queries failed to forward.
	QueriesFailed int64 `json:"queries_failed,omitempty"`
	// Upstream server ip
	UpstreamServer string `json:"upstream_server,omitempty"`
	// Queries forwarded successfully
	QueriesSucceeded int64 `json:"queries_succeeded,omitempty"`
}

// The current statistics counters of the DNS forwarder including cache usages and query numbers per forwarders, on an NSX-T type of enforcement point.
type NsxTdnsForwarderStatistics struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// The total number of forwarded DNS queries
	QueriesForwarded int64 `json:"queries_forwarded,omitempty"`
	// The total number of cached entries
	CachedEntries              int64                           `json:"cached_entries,omitempty"`
	DefaultForwarderStatistics *NsxTdnsForwarderZoneStatistics `json:"default_forwarder_statistics,omitempty"`
	// The total number of queries answered from local cache
	QueriesAnsweredLocally int64 `json:"queries_answered_locally,omitempty"`
	// The statistics of used cache
	UsedCacheStatistics []NsxTPerNodeUsedCacheStatistics `json:"used_cache_statistics,omitempty"`
	// The configured cache size, in kb
	ConfiguredCacheSize int64 `json:"configured_cache_size,omitempty"`
	// Time stamp of the current statistics, in ms
	Timestamp int64 `json:"timestamp,omitempty"`
	// The statistics of conditional forwarder zones
	ConditionalForwarderStatistics []NsxTdnsForwarderZoneStatistics `json:"conditional_forwarder_statistics,omitempty"`
	// The total number of received DNS queries
	TotalQueries int64 `json:"total_queries,omitempty"`
}

// The current runtime status of the DNS forwarder.
type NsxTdnsForwarderStatus struct {
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the status is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
	// UP means the DNS forwarder is working correctly on the active transport node and the stand-by transport node (if present). Failover will occur if either node goes down. DOWN means the DNS forwarder is down on both active transport node and standby node (if present). The DNS forwarder does not function in this situation. Error means there is some error on one or both transport node, or no status was reported from one or both transport nodes. The DNS forwarder may be working (or not working). NO_BACKUP means DNS forwarder is working in only one transport node, either because it is down on the standby node, or no standby is configured. An forwarder outage will occur if the active node goes down.
	Status string `json:"status,omitempty"`
	// Time stamp of the current status, in ms
	Timestamp int64 `json:"timestamp,omitempty"`
	// Extra message, if available
	ExtraMessage string `json:"extra_message,omitempty"`
}

// Statistics counters of the DNS forwarder zone.
type NsxTdnsForwarderZoneStatistics struct {
	// Statistics per upstream server.
	UpstreamStatistics []NsxTUpstreamServerStatistics `json:"upstream_statistics,omitempty"`
	// Domain names configured for the forwarder. Empty if this is the default forwarder.
	DomainNames []string `json:"domain_names,omitempty"`
}

// Credential info to connect to an NSX-T type of enforcement point.
type NsxtConnectionInfo struct {
	// Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress string `json:"enforcement_point_address"`
	// Resource Type of Enforcement Point Connection Info.
	ResourceType string `json:"resource_type"`
	// Username.
	Username string `json:"username,omitempty"`
	// Transport Zone UUIDs on enforcement point. Transport zone information is required for creating logical L2, L3 constructs on enforcement point. Max 1 transport zone ID. This is a deprecated property. The transport zone id is now auto populated from enforcement point and its value can be read using APIs GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/transport-zones and GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/transport-zones/transport-zone-id. The value passed through this property will be ignored.
	TransportZoneIds []string `json:"transport_zone_ids,omitempty"`
	// Password.
	Password string `json:"password,omitempty"`
	// Edge Cluster UUIDs on enforcement point. Edge cluster information is required for creating logical L2, L3 constructs on enforcement point. Max 1 edge cluster ID. This is a deprecated property. The edge cluster id is now auto populated from enforcement point and its value can be read using APIs GET /infra/sites/site-id/enforcement-points/enforcementpoint-id/edge-clusters and GET /infra/sites/site-id/enforcement-points/enforcementpoint-1/edge-clusters/edge-cluster-id. The value passed through this property will be ignored.
	EdgeClusterIds []string `json:"edge_cluster_ids,omitempty"`
	// Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint string `json:"thumbprint,omitempty"`
}

// Credential info to connect to an NSX-V type of enforcement point.
type NsxvConnectionInfo struct {
	// Value of this property could be Hostname or IP. For instance: - On an NSX-T MP running on default port, the value could be \"10.192.1.1\" - On an NSX-T MP running on custom port, the value could be \"192.168.1.1:32789\" - On an NSX-T MP in VMC deployments, the value could be \"192.168.1.1:5480/nsxapi\"
	EnforcementPointAddress string `json:"enforcement_point_address"`
	// Resource Type of Enforcement Point Connection Info.
	ResourceType string `json:"resource_type"`
	// Username.
	Username string `json:"username,omitempty"`
	// Password.
	Password string `json:"password,omitempty"`
	// Thumbprint of EnforcementPoint in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint string `json:"thumbprint"`
}

// RBAC Objects qualifier
type ObjectRolePermissionGroup struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Allowed operation
	Operation string `json:"operation,omitempty"`
	// Role name
	RoleName string `json:"role_name"`
	// Is rule disabled or not
	RuleDisabled bool `json:"rule_disabled,omitempty"`
	// Does children of this object inherit this rule
	InheritanceDisabled bool `json:"inheritance_disabled,omitempty"`
	// Path prefix
	PathPrefix string `json:"path_prefix"`
}

// Paged collection of RBAC Objects
type ObjectRolePermissionGroupListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// ObjectRolePermissionGroup list results
	Results []ObjectRolePermissionGroup `json:"results"`
}

// An identity source service that runs OpenLDAP. The service allows selected user accounts defined in OpenLDAP to log into and access NSX-T.
type OpenLdapIdentitySource struct {
	// The list of LDAP servers that provide LDAP service for this identity source. Currently, only one LDAP server is supported.
	LdapServers []IdentitySourceLdapServer `json:"ldap_servers,omitempty"`
	// The name of the authentication domain. When users log into NSX using an identity of the form \"user@domain\", NSX uses the domain portion to determine which LDAP identity source to use. For Active Directory, this domain name must match the domain of the Active Directory.
	DomainName   string `json:"domain_name"`
	ResourceType string `json:"resource_type"`
	// The subtree of the LDAP identity source to search when locating users and groups.
	BaseDn string `json:"base_dn"`
}

// Represents which federated global resources have been overrriden on a specific Site.
type OverriddenResource struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Site path to the specific site that has overridden the global resource.
	SitePath string `json:"site_path,omitempty"`
	// Policy resource path of the overridden resource.
	IntentPath string `json:"intent_path,omitempty"`
}

// Paged Collection of OverriddenResource.
type OverriddenResourceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// OverriddenResource list results.
	Results []OverriddenResource `json:"results"`
}

type PacketData struct {
	// A flag, when set true, indicates that the traceflow packet is of L3 routing.
	Routed bool `json:"routed,omitempty"`
	// transport type of the traceflow packet
	TransportType string `json:"transport_type,omitempty"`
	// Packet configuration
	ResourceType string `json:"resource_type"`
	// If the requested frame_size is too small (given the payload and traceflow metadata requirement of 16 bytes), the traceflow request will fail with an appropriate message.  The frame will be zero padded to the requested size.
	FrameSize int64 `json:"frame_size,omitempty"`
}

type PacketTypeAndCounter struct {
	// The number of packets.
	Counter int64 `json:"counter"`
	// The type of the packets
	PacketType string `json:"packet_type"`
}

type PacketsDroppedBySecurity struct {
	// The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.
	SpoofGuardDropped []PacketTypeAndCounter `json:"spoof_guard_dropped,omitempty"`
	// The number of IPv4 packets dropped by \"DHCP server block\".
	DhcpServerDroppedIpv4 int64 `json:"dhcp_server_dropped_ipv4,omitempty"`
	// The number of IPv6 packets dropped by \"DHCP server block\".
	DhcpServerDroppedIpv6 int64 `json:"dhcp_server_dropped_ipv6,omitempty"`
	// The number of IPv4 packets dropped by \"DHCP client block\".
	DhcpClientDroppedIpv4 int64 `json:"dhcp_client_dropped_ipv4,omitempty"`
	// The number of packets dropped by \"BPDU filter\".
	BpduFilterDropped int64 `json:"bpdu_filter_dropped,omitempty"`
	// The number of IPv6 packets dropped by \"DHCP client block\".
	DhcpClientDroppedIpv6 int64 `json:"dhcp_client_dropped_ipv6,omitempty"`
}

// This object allows enabling or disabling of partial patch functionality. Enabling partial patch allows patching of a subset of the fields of any object. After enabling partial patching, any object payload provided will be merged with the existing object payload. Note that while all mandatory fields are expected to be provided during the creation of any object, enabling partial patch will allow patching of existing objects with a subset of mandatory fields.
type PartialPatchConfig struct {
	// boolean value used to enable/disable partial patch
	EnablePartialPatch bool `json:"enable_partial_patch"`
}

// Patch Resources is an action to create/patch resources in response to an event.
type PatchResources struct {
	// Reaction Action resource type.
	ResourceType string `json:"resource_type"`
	// Injections holding keys (variables) and their corresponding values.
	Injections []Injection `json:"injections,omitempty"`
	// Patch body representing a Hierarchical Patch payload. The resources included in the body are patched replacing the injections' keys with their actual values.
	Body *interface{} `json:"body"`
}

// Represents policy path expressions in the form of an array, to support addition of objects like groups, segments and policy logical ports in a group.
type PathExpression struct {
	ResourceType string `json:"resource_type"`
	// This array can consist of one or more policy paths. Only policy paths of groups, segments and policy logical ports are allowed.
	Paths []string `json:"paths"`
}

// RBAC Objects qualifier
type PathPermissionGroup struct {
	// Allowed operation
	Operation string `json:"operation"`
	// Full Object Path
	ObjectPath string `json:"object_path"`
}

// The certificate chain presented by a remote TLS service.
type PeerCertificateChain struct {
	// List of X509Certificates.
	Details []X509Certificate `json:"details,omitempty"`
	// PEM encoded certificate data.
	PemEncoded string `json:"pem_encoded"`
}

// Information about recent changes, if any, that are not reflected in the Enforced Realized Status.
type PendingChangesInfoNsxT struct {
	// Flag describing whether there are any pending changes that are not reflected in the status.
	PendingChangesFlag bool `json:"pending_changes_flag,omitempty"`
}

// Restore step status
type PerStepRestoreStatus struct {
	// A description of the restore status
	Description string `json:"description,omitempty"`
	// Per step restore status value
	Value string `json:"value,omitempty"`
}

// PIM (Protocol Independent Multicast) RP (Randezvous Point) mapping details.
type PimRpMapping struct {
	// Value of this field will be true if this edge transport node acts as rendezvous point, otherwise false.
	IsRp bool `json:"is_rp,omitempty"`
	// Outgoing/Egress interface for multicast traffic.
	OutgoingInterface string `json:"outgoing_interface,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// RP (Randezvous Point) address.
	RpAddress string `json:"rp_address,omitempty"`
	// Source of learning RP information. Either Static RP configured or RP learned via BSR (Bootstrap Router).
	Source string `json:"source,omitempty"`
}

type PimRpMappingCsvRecord struct {
	// Value of this field will be true if this edge transport node acts as rendezvous point, otherwise false.
	IsRp bool `json:"is_rp,omitempty"`
	// Transport node uuid or policy path.
	TransportNode string `json:"transport_node,omitempty"`
	// Multicast group address.
	Group string `json:"group,omitempty"`
	// Source of learning RP information. Either Static RP configured or RP learned via BSR (Bootstrap Router).
	Source string `json:"source,omitempty"`
	// Outgoing/Egress interface for multicast traffic.
	OutgoingInterface string `json:"outgoing_interface,omitempty"`
	// RP (Randezvous Point) address.
	RpAddress string `json:"rp_address,omitempty"`
}

// PIM Rendezvous Point Mappings.
type PimRpMappings struct {
	// Policy path to Tier0 gateway.
	GatewayPath          string                 `json:"gateway_path"`
	PimRpMappingsPerEdge []PimRpMappingsPerEdge `json:"pim_rp_mappings_per_edge,omitempty"`
}

type PimRpMappingsInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string                  `json:"file_name,omitempty"`
	Results  []PimRpMappingCsvRecord `json:"results,omitempty"`
}

// PIM Rendezvous Point Mappings Per Edge.
type PimRpMappingsPerEdge struct {
	PimRpMappings []PimRpMapping `json:"pim_rp_mappings,omitempty"`
	// Policy path to edge node.
	EdgePath string `json:"edge_path"`
}

// Defines the point of a graph.
type PointDefinition struct {
	// Represents the variable for the Y value of points that are plotted on the graph.
	YValue string `json:"y_value"`
	// An expression that represents the points of the graph
	Field string `json:"field"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Represents the variable for the X value of points that are plotted on the graph.
	XValue string `json:"x_value"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string `json:"navigation,omitempty"`
	// Multi-line text to be shown on tooltip while hovering over the point of a graph.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
}

// Ordered list of Rules. This object is created by default along with the Domain.
type Policy struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
}

// Alarm base class of realized policy object
type PolicyAlarmResource struct {
	// Absolute path of this object
	Path string `json:"path,omitempty"`
	// Path of its parent
	ParentPath string `json:"parent_path,omitempty"`
	// This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId string `json:"unique_id,omitempty"`
	// Path relative from its parent
	RelativePath string `json:"relative_path,omitempty"`
	// path of the object on which alarm is created
	SourceReference string `json:"source_reference,omitempty"`
	// error message to describe the issue
	Message      string          `json:"message,omitempty"`
	ErrorDetails *PolicyApiError `json:"error_details,omitempty"`
	// This field will refer to the source site on which the alarm is generated. This field is populated by GM, when it receives corresponding notification from LM.
	SourceSiteId string `json:"source_site_id,omitempty"`
}

// PolicyAlarmResource list result
type PolicyAlarmResourceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of alarm resources
	Results []PolicyAlarmResource `json:"results,omitempty"`
}

// Detailed information about an API Error
type PolicyApiError struct {
	// The module name where the error occurred
	ModuleName string `json:"module_name,omitempty"`
	// A description of the error
	ErrorMessage string `json:"error_message,omitempty"`
	// A numeric error code
	ErrorCode int64 `json:"error_code,omitempty"`
	// Further details about the error
	Details string `json:"details,omitempty"`
	// Additional data about the error
	ErrorData *interface{} `json:"error_data,omitempty"`
	// Other errors related to this error
	RelatedErrors []PolicyRelatedApiError `json:"related_errors,omitempty"`
}

// Policy Attributes data holder
type PolicyAttributes struct {
	// Reference to sub attributes for the attribute
	SubAttributes []PolicySubAttributes `json:"sub_attributes,omitempty"`
	// Description for attribute value
	Description string `json:"description,omitempty"`
	// Key for attribute
	Key string `json:"key"`
	// Datatype for attribute
	Datatype string `json:"datatype"`
	// Describes whether the APP_ID value is ALG type or not.
	IsALGType bool `json:"isALGType,omitempty"`
	// Multiple attribute values can be specified as elements of array.
	Value []string `json:"value"`
}

// A Policy Based VPN requires to define protect rules that match local and peer subnets. IPSec security associations is negotiated for each pair of local and peer subnet.
type PolicyBasedIpSecVpnSession struct {
	// IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk string `json:"psk,omitempty"`
	// Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath string `json:"dpd_profile_path,omitempty"`
	// Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath string `json:"ike_profile_path,omitempty"`
	// Enable/Disable IPSec VPN session.
	Enabled bool `json:"enabled,omitempty"`
	// Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode string `json:"connection_initiation_mode,omitempty"`
	// Policy path referencing Local endpoint.
	LocalEndpointPath string `json:"local_endpoint_path"`
	// Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath string `json:"tunnel_profile_path,omitempty"`
	// Compliance suite.
	ComplianceSuite string                         `json:"compliance_suite,omitempty"`
	TcpMssClamping  *TcpMaximumSegmentSizeClamping `json:"tcp_mss_clamping,omitempty"`
	// Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode string `json:"authentication_mode,omitempty"`
	// Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId string `json:"peer_id"`
	// Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress string `json:"peer_address"`
	// A Policy Based VPN requires to define protect rules that match   local and peer subnets. IPSec security associations is   negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over   policy based VPN. IP Tunnel port is created and all traffic routed via   tunnel port is protected. Routes can be configured statically   or can be learned through BGP. A route based VPN is must for establishing   redundant VPN session to remote site.
	ResourceType string `json:"resource_type"`
	// Rules
	Rules []IpSecVpnRule `json:"rules"`
}

// A Policy-based L3Vpn session is a configuration in which a specific vpn tunnel is referenced in a policy whose action is set as tunnel.
type PolicyBasedL3VpnSession struct {
	// - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string `json:"resource_type"`
	// L3Vpn rules that are specific to the L3Vpn. Only L3Vpn rules with PROTECT action are supported.
	Rules []L3VpnRule `json:"rules,omitempty"`
}

type PolicyBgpNeighborStatus struct {
	// Current state of the BGP session.
	ConnectionState string `json:"connection_state,omitempty"`
	// Count of messages received from the neighbor
	MessagesReceived int64 `json:"messages_received,omitempty"`
	// Time in ms to wait for HELLO packet from BGP peer
	KeepAliveInterval int64 `json:"keep_alive_interval,omitempty"`
	// Policy path to Tier0
	Tier0Path string `json:"tier0_path,omitempty"`
	// Router ID of the BGP neighbor.
	NeighborRouterId string `json:"neighbor_router_id,omitempty"`
	// Sum of out prefixes counts across all address families.
	TotalOutPrefixCount int64 `json:"total_out_prefix_count,omitempty"`
	// AS number of the BGP neighbor
	RemoteAsNumber string `json:"remote_as_number,omitempty"`
	// Count of messages sent to the neighbor
	MessagesSent int64 `json:"messages_sent,omitempty"`
	// Time(in milliseconds) since connection was established.
	TimeSinceEstablished int64 `json:"time_since_established,omitempty"`
	// If a HELLO packet is not seen from BGP Peer withing hold_time then BGP neighbor will be marked as down.
	HoldTime int64 `json:"hold_time,omitempty"`
	// Count of connections established
	EstablishedConnectionCount int64 `json:"established_connection_count,omitempty"`
	// Current state of graceful restart of BGP neighbor. Possible values are - 1. GR_AND_HELPER - Graceful restart with Helper 2. HELPER_ONLY - Helper only 3. DISABLE - Disabled
	GracefulRestartMode string `json:"graceful_restart_mode,omitempty"`
	// Count of connection drop
	ConnectionDropCount int64 `json:"connection_drop_count,omitempty"`
	// TCP port number of remote BGP Connection
	RemotePort int64 `json:"remote_port,omitempty"`
	// Timestamp when the data was last updated, unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Sum of in prefixes counts across all address families.
	TotalInPrefixCount int64              `json:"total_in_prefix_count,omitempty"`
	RemoteSite         *ResourceReference `json:"remote_site,omitempty"`
	// Transport node
	EdgePath string `json:"edge_path,omitempty"`
	// TCP port number of Local BGP connection
	LocalPort int64 `json:"local_port,omitempty"`
	// BGP capabilities sent to BGP neighbor.
	AnnouncedCapabilities []string `json:"announced_capabilities,omitempty"`
	// BGP capabilities negotiated with BGP neighbor.
	NegotiatedCapability []string `json:"negotiated_capability,omitempty"`
	// Address families of BGP neighbor
	AddressFamilies []BgpAddressFamily `json:"address_families,omitempty"`
	// The Ip address of logical port
	SourceAddress string `json:"source_address,omitempty"`
	// The IP of the BGP neighbor
	NeighborAddress string `json:"neighbor_address,omitempty"`
}

type PolicyBgpNeighborsStatusListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Status of BGP neighbors of the Tier0
	Results []PolicyBgpNeighborStatus `json:"results,omitempty"`
}

type PolicyCapacityDashboardUsage struct {
	// Indicate the current usage count of object type.
	CurrentUsageCount int64 `json:"current_usage_count"`
	// Indicate the object type for which usage is calculated.
	UsageType string `json:"usage_type"`
	// Display name for NSX object type.
	DisplayName string `json:"display_name"`
	// Current usage percentage for object type
	CurrentUsagePercentage float64 `json:"current_usage_percentage"`
	// This is the maximum supported count for object type in consideration.
	MaxSupportedCount int64 `json:"max_supported_count"`
}

type PolicyCapacityUsageResponse struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// List of capacity usage for NSX Objects
	CapacityUsage []PolicyCapacityDashboardUsage `json:"capacity_usage"`
}

type PolicyComplianceStatus struct {
	// Timestamp of last update
	LastUpdatedTime int64 `json:"last_updated_time,omitempty"`
	// List of non compliant configuration and impacted services
	NonCompliantConfigs []PolicyNonCompliantConfig `json:"non_compliant_configs,omitempty"`
}

// Represents an object on the desired state.
type PolicyConfigResource struct {
	// Absolute path of this object
	Path string `json:"path,omitempty"`
	// Path of its parent
	ParentPath string `json:"parent_path,omitempty"`
	// This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId string `json:"unique_id,omitempty"`
	// Path relative from its parent
	RelativePath string `json:"relative_path,omitempty"`
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// An entity that encapsulates attributes and sub-attributes of various network services (eg. L7 services, domain name, encryption algorithm) The entity will be consumed in firewall rules and can be added in new tuple called profile in firewall rules. To get a list of supported attributes and sub-attributes fire the following REST API GET https://&lt;policy-mgr&gt;/policy/api/v1/infra/context-profiles/attributes
type PolicyContextProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Property containing attributes/sub-attributes for Policy Context Profile.
	Attributes []PolicyAttributes `json:"attributes"`
}

// List result of PolicyContextProfiles
type PolicyContextProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged collection of PolicyContextProfiles
	Results []PolicyContextProfile `json:"results,omitempty"`
}

// DNS forwarder nslookup answer per enforcement point.
type PolicyDnsAnswerPerEnforcementPoint struct {
	// Resource type of the DNS forwarder nslookup answer.
	ResourceType string `json:"resource_type"`
	// Policy path referencing the enforcement point from where the DNS forwarder nslookup answer is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Used to configure DNS Forwarder
type PolicyDnsForwarder struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The flag, which suggests whether the DNS forwarder is enabled or disabled. The default is True.
	Enabled bool `json:"enabled,omitempty"`
	// Set log_level to DISABLED will stop dumping fowarder log.
	LogLevel string `json:"log_level,omitempty"`
	// Max of 5 DNS servers can be configured
	ConditionalForwarderZonePaths []string `json:"conditional_forwarder_zone_paths,omitempty"`
	// This is the zone to which DNS requests are forwarded by default
	DefaultForwarderZonePath string `json:"default_forwarder_zone_path"`
	// This is the IP on which the DNS Forwarder listens.
	ListenerIp string `json:"listener_ip"`
}

// Used to configure zones on DNS Forwarder
type PolicyDnsForwarderZone struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of domain names on which conditional forwarding is based. This field is required if the DNS Zone is being used for a conditional forwarder. This field will also be used for conditional reverse lookup. Example 1, if for one of the zones, one of the entries in the fqdn is example.com, all the DNS requests under the domain example.com will be served by the corresponding upstream DNS server. Example 2, if for one of the zones, one of the entries in the fqdn list is \"13.12.30.in-addr.arpa\", reverse lookup for 30.12.13.0/24 will go to the corresponding DNS server.
	DnsDomainNames []string `json:"dns_domain_names,omitempty"`
	// Max of 3 DNS servers can be configured
	UpstreamServers []string `json:"upstream_servers"`
	// The source IP used by the DNS Forwarder zone.
	SourceIp string `json:"source_ip,omitempty"`
}

// Paged Collection of DNS Forwarder Zones
type PolicyDnsForwarderZoneListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Dns Forwarder Zone list results
	Results []PolicyDnsForwarderZone `json:"results"`
}

// A draft which stores the system generated as well as user intended changes in a hierarchical body format.
type PolicyDraft struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Comments for a policy draft lock/unlock.
	LockComments string `json:"lock_comments,omitempty"`
	// Indicates whether a draft should be locked. If the draft is locked by an user, then no other user would be able to modify or publish this draft. Once the user releases the lock, other users can then modify or publish this draft.
	Locked   bool   `json:"locked,omitempty"`
	UserArea *Infra `json:"user_area,omitempty"`
	// ID of the user who last modified the lock for a policy draft.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// Policy draft locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// When specified, a manual draft will be created w.r.t. the specified draft. If not specified, manual draft will be created w.r.t. the current published configuration. For an auto draft, this will always be null.
	RefDraftPath string `json:"ref_draft_path,omitempty"`
	SystemArea   *Infra `json:"system_area,omitempty"`
	// Flag to indicate whether draft is auto created. True indicates that the draft is an auto draft. False indicates that the draft is a manual draft.
	IsAutoDraft bool `json:"is_auto_draft,omitempty"`
}

// This holds the list of policy drafts.
type PolicyDraftListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paginated list of policy drafts.
	Results []PolicyDraft `json:"results,omitempty"`
}

// Edge Cluster.
type PolicyEdgeCluster struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to indicate status of inter site l2 and l3 forwarding in federation.
	InterSiteForwardingEnabled bool `json:"inter_site_forwarding_enabled,omitempty"`
	// UUID of Edge Cluster on NSX-T enforcement point.
	NsxId string `json:"nsx_id,omitempty"`
	// List of remote tunnel endpoint ipaddress configured on edge cluster.
	RtepIps []string `json:"rtep_ips,omitempty"`
}

// Paged Collection of Edge Cluster
type PolicyEdgeClusterListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Edge Cluster list result.
	Results []PolicyEdgeCluster `json:"results"`
}

// Edge Node.
type PolicyEdgeNode struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Member index of edge node in edge cluster.
	MemberIndex int64 `json:"member_index,omitempty"`
	// UUID of edge node on NSX-T enforcement point.
	NsxId string `json:"nsx_id,omitempty"`
}

// Paged Collection of Edge Node
type PolicyEdgeNodeListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Edge Node list result.
	Results []PolicyEdgeNode `json:"results"`
}

type PolicyExcludeList struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of the members in the exclude list
	Members []string `json:"members"`
}

// It represent the resource with details of name and fields it owns.
type PolicyFineTuningResourceInfo struct {
	// List of all field of any resource
	Fields []PolicyFineTuningResourceInfoDetail `json:"fields"`
	// It will represent resource with name and fields.
	ResourceName string `json:"resource_name"`
}

// Contains the details of resource field
type PolicyFineTuningResourceInfoDetail struct {
	// It will represent resource with name and fields.
	FieldName string                        `json:"field_name"`
	SubType   *PolicyFineTuningResourceInfo `json:"sub_type"`
}

// A profile holding CPU and memory thresholds configuration.
type PolicyFirewallCpuMemThresholdsProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Heap memory thresholds percentage to monitor and report for distributed firewall.
	MemThresholdPercentage int64 `json:"mem_threshold_percentage"`
	// CPU utilization thresholds percentage to monitor and report for distributed firewall.
	CpuThresholdPercentage int64 `json:"cpu_threshold_percentage"`
}

// This entity will be used to establish association between CPU Memory Thresholds Profile and Transport Node. Using this entity, user can specify intent for applying Firewall CPU Memory Thresholds Profile to particular Transport Node.
type PolicyFirewallCpuMemThresholdsProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
	// Sequence number is used to resolve conflicts when two profiles get applied to a single node. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number.
	SequenceNumber int64 `json:"sequence_number"`
	// References of transport nodes on which the profile intended to be applied.
	TransportNodes []PolicyResourceReference `json:"transport_nodes,omitempty"`
}

// Paged collection of Firewall CPU Memory Thresholds Profile Binding Maps
type PolicyFirewallCpuMemThresholdsProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Firewall CPU Memory Thresholds Profile Binding Map list results
	Results []PolicyFirewallCpuMemThresholdsProfileBindingMap `json:"results"`
}

// Paged Collection of PolicyFirewallCpuMemThresholdsProfile
type PolicyFirewallCpuMemThresholdsProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// PolicyFirewallCpuMemThresholdsProfile list results
	Results []PolicyFirewallCpuMemThresholdsProfile `json:"results"`
}

// This entity will be used to establish association between Firewall Flood Protection profile and Group. Using this entity, user can specify intent for applying Firewall Flood Protection profile to particular Group.
type PolicyFirewallFloodProtectionProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
	// Sequence number is used to resolve conflicts when two profiles get applied to a single port. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number.
	SequenceNumber int64 `json:"sequence_number"`
}

// Paged collection of Firewall Flood Protection Profile Binding Maps
type PolicyFirewallFloodProtectionProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Firewall Flood Protection Profile Binding Map list results
	Results []PolicyFirewallFloodProtectionProfileBindingMap `json:"results"`
}

// An entity that encapsulates attributes to schedule firewall rules to be active to allow or block traffic for a specific period of time. Note that at least one property out of \"days\", \"start_time\", \"end_time\", \"start_date\", \"end_date\" is required.
type PolicyFirewallScheduler struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The recurring time interval in a day during which the schedule will be applicable. It should not be present when the recurring flag is false.
	TimeInterval []PolicyTimeIntervalValue `json:"time_interval,omitempty"`
	// If recurring field is set false, then this field must be present. The schedule will be enforced till the end time of the specified end date. If recurring field is set true, then this field should not be present.
	EndTime string `json:"end_time,omitempty"`
	// End date on which schedule to end. Example, 12/22/2019.
	EndDate string `json:"end_date"`
	// Host Timezone to be used to enforce firewall rules.
	Timezone string `json:"timezone"`
	// Time in 24 hour and minutes in multiple of 30. Example, 9:00. If recurring field is set false, then this field must be present. The schedule will start getting enforced from the start time of the specified start date. If recurring field is set true, then this field should not be present.
	StartTime string `json:"start_time,omitempty"`
	// Flag to indicate whether firewall schedule recurs or not. The default value is true and it should be set to false when the firewall schedule does not recur and is a one time time interval.
	Recurring bool `json:"recurring"`
	// Days of week on which rules will be enforced. If property is omitted, then days of the week will not considered while calculating the firewall schedule. It should not be present when the recurring flag is false.
	Days []string `json:"days,omitempty"`
	// Start date on which schedule to start. Example, 02/22/2019.
	StartDate string `json:"start_date"`
}

// List result of PolicyFirewallSchedulers
type PolicyFirewallSchedulerListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged collection of PolicyFirewallSchedulers
	Results []PolicyFirewallScheduler `json:"results,omitempty"`
}

// A profile holding TCP, UDP and ICMP session timeout configuration.
type PolicyFirewallSessionTimerProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The timeout value of connection in seconds after one endpoint sends an RST.
	TcpClosed int64 `json:"tcp_closed"`
	// The timeout value of connection in seconds after a second packet has been transferred.
	TcpOpening int64 `json:"tcp_opening"`
	// The timeout value of connection in seconds if the source host sends more than one packet but the destination host has never sent one back.
	UdpSingle int64 `json:"udp_single"`
	// The timeout value of connection in seconds after both FINs have been exchanged and connection is closed.
	TcpFinwait int64 `json:"tcp_finwait"`
	// The timeout value of connection in seconds after the first packet has been sent.
	TcpFirstPacket int64 `json:"tcp_first_packet"`
	// The timeout value of connection in seconds after the first FIN has been sent.
	TcpClosing int64 `json:"tcp_closing"`
	// The timeout value of connection in seconds once the connection has become fully established.
	TcpEstablished int64 `json:"tcp_established"`
	// The timeout value of connection in seconds if both hosts have sent packets.
	UdpMultiple int64 `json:"udp_multiple"`
	// The timeout value for the connection after an ICMP error came back in response to an ICMP packet.
	IcmpErrorReply int64 `json:"icmp_error_reply"`
	// The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new UDP flow.
	UdpFirstPacket int64 `json:"udp_first_packet"`
	// The timeout value of connection in seconds after the first packet. This will be the initial timeout for the new ICMP flow.
	IcmpFirstPacket int64 `json:"icmp_first_packet"`
}

// This entity will be used to establish association between Firewall Timer session profile and Group. Using this entity, user can specify intent for applying Firewall Timer session profile to particular Group.
type PolicyFirewallSessionTimerProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Sequence number is used to resolve conflicts when two profiles get applied to a single port. Lower value gets higher precedence. Two binding maps having the same profile path should have the same sequence number.
	SequenceNumber int64 `json:"sequence_number,omitempty"`
	// PolicyPath of associated Firewall Timer Session Profile
	FirewallSessionTimerProfilePath string `json:"firewall_session_timer_profile_path"`
}

// Paged collection of Firewall Session Timer Profile Binding Maps
type PolicyFirewallSessionTimerProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Firewall Session Timer Profile Binding Map list results
	Results []PolicyFirewallSessionTimerProfileBindingMap `json:"results"`
}

// Paged Collection of Policy Firewall Session timeout profiles
type PolicyFirewallSessionTimerProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Policy Firewall Session timeout profile list results
	Results []PolicyFirewallSessionTimerProfile `json:"results"`
}

// Paginated collection of IP members belonging to a Group.
type PolicyGroupIpMembersListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of IP addresses that belong to the given Group
	Results []string `json:"results"`
}

// Details of the member belonging to a Group
type PolicyGroupMemberDetails struct {
	// The path of the member, if relevant
	Path string `json:"path,omitempty"`
	// The display name of the member on the enforcement point
	DisplayName string `json:"display_name,omitempty"`
	// The ID of the member on the enforcement point
	Id string `json:"id,omitempty"`
}

// Paginated collection of members belonging to a Group.
type PolicyGroupMembersListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of members that belong to the given Group
	Results []PolicyGroupMemberDetails `json:"results"`
}

// Placeholder to reference group entity.
type PolicyGroupReference struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy entity paths referred by the group instance
	Refs []string `json:"refs"`
}

// IGMP profile.
type PolicyIgmpProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The query response interval(seconds) is the maximum amount of time that can elapse between when the querier router sends a host-query message and when it receives a response from a host. Configuring this interval allows admins to adjust the burstiness of IGMP messages on the subnet; larger values make the traffic less bursty, as host responses are spread out over a larger interval.  The number of seconds represented by the query_max_response_time must be less than the query_interval.
	QueryMaxResponseTime int32 `json:"query_max_response_time,omitempty"`
	// Interval(seconds) between general IGMP host-query messages.
	QueryInterval int32 `json:"query_interval,omitempty"`
	// The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses. The Robustness Variable must not be zero, and SHOULD NOT be one.
	RobustnessVariable int32 `json:"robustness_variable,omitempty"`
	// Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages. This value may be tuned to modify the \"leave latency\" of the network. A reduced value results in reduced time to detect the loss of the last member of a group.
	LastMemberQueryInterval int32 `json:"last_member_query_interval,omitempty"`
}

// Collection of Igmp Profile.
type PolicyIgmpProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Igmp Profile list results
	Results []PolicyIgmpProfile `json:"results"`
}

// Parameters to let the admin specify a relative position of a security policy or rule w.r.t to another one.
type PolicyInsertParameters struct {
	// The security policy/rule path if operation is 'insert_after' or 'insert_before'
	AnchorPath string `json:"anchor_path,omitempty"`
	// Operation
	Operation string `json:"operation,omitempty"`
}

// Tier0 or Tier1 interface statistics on specific Enforcement Point.
type PolicyInterfaceStatistics struct {
	// Per Node Statistics
	PerNodeStatistics []LogicalRouterPortStatisticsPerNode `json:"per_node_statistics,omitempty"`
	// The ID of the logical router port
	LogicalRouterPortId string `json:"logical_router_port_id"`
}

// Tier0 or Tier1 interface statistics on specific Enforcement Point.
type PolicyInterfaceStatisticsSummary struct {
	// The ID of the logical router port
	LogicalRouterPortId string `json:"logical_router_port_id"`
	// Policy path for the interface
	InterfacePolicyPath string `json:"interface_policy_path,omitempty"`
}

// Used to specify the display name and value of the IPv4Address.
type PolicyIpAddressInfo struct {
	// Next hop used in auto-plumbing of static route. If a value is not provided, static route will not be auto-plumbed.
	NextHop string `json:"next_hop,omitempty"`
	// Value of the IPv4Address.
	AddressValue string `json:"address_value"`
	// Display name used to help identify the IPv4Address.
	DisplayName string `json:"display_name,omitempty"`
}

// Label to reference group of policy entities of same type.
type PolicyLabel struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy entity paths referred by the label instance
	Refs []string `json:"refs,omitempty"`
	// Policy intent entity type from PolicyResourceType
	Type_ string `json:"type"`
}

// Paged Collection of Domains
type PolicyLabelListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Policy label list results
	Results []PolicyLabel `json:"results"`
}

// All the types of PolicyLbMonitorProfile extend from this abstract class. This is present for extensibility.
type PolicyLbMonitorProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount    int64  `json:"rise_count,omitempty"`
	ResourceType string `json:"resource_type"`
}

// Some applications maintain state and require all relevant connections to be sent to the same server as the application state is not synchronized among servers. Persistence is enabled on a PolicyLbVirtualServer by binding a persistence profile to it.
type PolicyLbPersistenceProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	ResourceType    string `json:"resource_type"`
}

// Defining access of a Group from a PolicyLbVirtualServer and binding to PolicyLbMonitorProfile.
type PolicyLbPoolAccess struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Port for LoadBalancer to send connections to the PolicyLbPoolAccess's Group. Pool_port could be optional, if it is not specified, LB will use PolicyLbVirtualServer port to connect to backend servers. If the PolicyLbMonitorProfile is configured in PolicyLbPoolAccess and active monitor IP protocol is TCP/UDP(which requires TCP or UDP port number), monitor_port should be specified if pool_port is unset.
	PoolPort int32 `json:"pool_port,omitempty"`
	// IP Port list for applications within the Group to allow for non-uniform port usage by applications
	IpPortList []IpAddressPortPair `json:"ip_port_list,omitempty"`
	// Depending on the topology, Source NAT (SNAT) may be required to ensure traffic from the server destined to the client is received by the load balancer. SNAT can be enabled per pool. If SNAT is not enabled for a pool, then load balancer uses the client IP and port (spoofing) while establishing connections to the servers. This is referred to as no-SNAT or TRANSPARENT mode.  SNAT is enabled by default and will use the load balancer interface IP and an ephemeral port as the source IP and port of the server side connection.
	SourceNat string `json:"source_nat,omitempty"`
	// Load balanding algorithm controls how the incoming connections are distributed among the members. - ROUND_ROBIN - requests to the application servers are distributed in a round-robin fashion, - LEAST_CONNECTION - next request is assigned to the server with the least number of active connections
	Algorithm string `json:"algorithm,omitempty"`
	// Path of the PolicyLbMonitorProfile to actively monitor the PolicyLbPoolAccess's Group
	LbMonitorProfile string `json:"lb_monitor_profile,omitempty"`
}

// Binding of a LbPoolAccess and Group to a PolicyLbVirtualServer used to route application traffic passing through load balancers. PolicyLbRule uses match conditions to match application traffic passing through a PolicyLbVirtualServer using HTTP or HTTPS. Can bind multiple PolicyLbVirtualServers to a Group. Each PolicyLbRule consists of two optional match conditions, each match contidion defines a criterion for application traffic.  If no match conditions are specified, then the PolicyLbRule will always match and it is used typically to define default rules. If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the PolicyLbRule to be considered a match.  A match indicates that the PolicyLbVirtualServer should route the request to the Group (parent of PolicyLbRule).
type PolicyLbRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This condition is used to match URIs(Uniform Resource Identifier) of HTTP request messages. The URI field can be specified as a regluar expression. If an HTTP request message is requesting an URI which matches specified regular expression, it matches the condition. The syntax of whole URI looks like this: scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment] This condition matches only the path part of entire URI. The path_match field is used as a regular expression to match URI path of HTTP requests. For example, to match any URI that has \"/image/\" or \"/images/\", uri field can be specified as: \"/image[s]?/\". The regular  expressions in load balancer rules use the features common to both  Java regular expressions and Perl Compatible Regular Expressions  (PCREs) with some restrictions. Reference http://www.pcre .org for  PCRE and the NSX-T Administrator's Guide for the restrictions.  Please note, when regular expressions are used in JSON (JavaScript  Object Notation) string, every backslash character (\\) needs to be  escaped by one additional backslash character.
	PathMatch string `json:"path_match,omitempty"`
	// This condition is used to match HTTP request messages by the specific HTTP header field, Host.  The Host request header specifies the domain name of the server. The supplied Host HTTP header match condition will be matched as a regular expression. The regular expressions in load balancer rules use the features common to both Java regular expressions and Perl Compatible Regular Expressions (PCREs) with some restrictions. Reference http://www.pcre .org for PCRE and the NSX-T Administrator's Guide for the restrictions. Please note, when regular expressions are used in JSON (JavaScript Object Notation) string, every backslash character (\\) needs to be escaped by one additional backslash character.
	HostMatch string `json:"host_match,omitempty"`
	// The path of PolicyLbVirtualServer to bind to this PolicyLbRule and its Group
	LbVirtualServer string `json:"lb_virtual_server,omitempty"`
	// This field is used to resolve conflicts between multiple PolicyLbRules associated with a single PolicyLbVirtualServer and will be applied numerically or low to high
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If more than one match condition is specified, then matching strategy determines if all conditions should match or any one condition should match for the LB Rule to be considered a match. - ALL indicates that both host_match and path_match must match for this PolicyLbRule to be considered a match - ANY indicates that either host_match or patch match may match for this PolicyLbRule to be considered a match
	MatchStrategy string `json:"match_strategy,omitempty"`
}

// All the types of PolicyLbVirtualServer extend from this abstract class. This is present for extensibility.
type PolicyLbVirtualServer struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath string `json:"router_path"`
	// Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile string `json:"lb_persistence_profile,omitempty"`
	TrafficSource        string `json:"traffic_source,omitempty"`
	// Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers.
	IpAddress string `json:"ip_address"`
	// Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range.
	Ports        []string `json:"ports"`
	ResourceType string   `json:"resource_type"`
}

// Paged Collection of security policies
type PolicyListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
}

// Multicast routing configuration.
type PolicyMulticastConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Replication multicast range. Required when enabled.
	ReplicationMulticastRange string `json:"replication_multicast_range,omitempty"`
	// Updates to IGMP profile applied on all Tier0 gateways consuming the configuration.
	IgmpProfilePath string `json:"igmp_profile_path,omitempty"`
	// Updates to PIM profile applied on all Tier0 gateways consuming the configuration.
	PimProfilePath string `json:"pim_profile_path,omitempty"`
	// Enable/disable Multicast Configuration.
	Enabled bool `json:"enabled,omitempty"`
}

// Multicast Forwarding.
type PolicyMulticastForwarding struct {
	// Policy path to Tier0 gateway.
	GatewayPath            string                       `json:"gateway_path"`
	McastForwardingPerEdge []MulticastForwardingPerEdge `json:"mcast_forwarding_per_edge,omitempty"`
}

type PolicyMulticastForwardingInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string                         `json:"file_name,omitempty"`
	Results  []MulticastForwardingCsvRecord `json:"results,omitempty"`
}

// Multicast Routes.
type PolicyMulticastRoutes struct {
	// Policy path to Tier0 gateway.
	GatewayPath        string                   `json:"gateway_path"`
	McastRoutesPerEdge []MulticastRoutesPerEdge `json:"mcast_routes_per_edge,omitempty"`
}

type PolicyMulticastRoutesInCsvFormat struct {
	// File name set by HTTP server if API  returns CSV result as a file.
	FileName string                    `json:"file_name,omitempty"`
	Results  []MulticastRouteCsvRecord `json:"results,omitempty"`
}

// Represents NAT section. This object is created by default when corresponding tier-0/tier-1 is created. Under tier-0/tier-1 there will be 4 different NATs(sections). (INTERNAL, USER, DEFAULT and NAT64).
type PolicyNat struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Represents a NAT section under tier-0/tier-1.
	NatType string `json:"nat_type,omitempty"`
}

// Represents a NAT rule between source and destination at T0/T1 router.
type PolicyNatRule struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For SNAT, DNAT, NAT64 and REFLEXIVE rules, this ia a mandatory field, which represents the translated network address. For NO_SNAT and NO_DNAT this should be empty.
	TranslatedNetwork string `json:"translated_network,omitempty"`
	// The flag, which suggests whether the logging of NAT rule is enabled or disabled. The default is False.
	Logging bool `json:"logging,omitempty"`
	// It represents the path of Service on which the NAT rule will be applied. If not provided or if it is blank then Policy manager will consider it as ANY.
	Service string `json:"service,omitempty"`
	// This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For SNAT, NO_SNAT, NAT64 and REFLEXIVE rules, this is a mandatory field and represents the source network of the packets leaving the network. For DNAT and NO_DNAT rules, optionally it can contain source network of incoming packets. NULL value for this field represents ANY network.
	SourceNetwork string `json:"source_network,omitempty"`
	// The flag, which suggests whether the NAT rule is enabled or disabled. The default is True.
	Enabled bool `json:"enabled,omitempty"`
	// Port number or port range
	TranslatedPorts string `json:"translated_ports,omitempty"`
	// Source NAT(SNAT) - translates a source IP address in an outbound packet so that the packet appears to originate from a different network. SNAT is only supported when the logical router is running in active-standby mode. Destination NAT(DNAT) - translates the destination IP address of inbound packets so that packets are delivered to a target address into another network. DNAT is only supported when the logical router is running in active-standby mode. Reflexive NAT(REFLEXIVE) - IP-Range and CIDR are supported to define the \"n\". The number of original networks should be exactly the same as that of translated networks. The address translation is deterministic. Reflexive is supported on both Active/Standby and Active/Active LR. NO_SNAT and NO_DNAT - These do not have support for translated_fields, only source_network and destination_network fields are supported. NAT64 - translates an external IPv6 address to a internal IPv4 address.
	Action string `json:"action"`
	// Represents the array of policy paths of ProviderInterface or NetworkInterface or labels of type ProviderInterface or NetworkInterface on which the NAT rule should get enforced. The interfaces must belong to the same router for which the NAT Rule is created.
	Scope []string `json:"scope,omitempty"`
	// It indicates how the firewall matches the address after NATing if firewall stage is not skipped.  MATCH_EXTERNAL_ADDRESS indicates the firewall will be applied to external address of a NAT rule. For SNAT, the external address is the translated source address after NAT is done. For DNAT, the external address is the original destination address before NAT is done. For REFLEXIVE, to egress traffic, the firewall will be applied to the translated source address after NAT is done; To ingress traffic, the firewall will be applied to the original destination address before NAT is done.  MATCH_INTERNAL_ADDRESS indicates the firewall will be applied to internal address of a NAT rule. For SNAT, the internal address is the original source address before NAT is done. For DNAT, the internal address is the translated destination address after NAT is done. For REFLEXIVE, to egress traffic, the firewall will be applied to the original source address before NAT is done; To ingress traffic, the firewall will be applied to the translated destination address after NAT is done.  BYPASS indicates the firewall stage will be skipped.  For NO_SNAT or NO_DNAT, it must be BYPASS or leave it unassigned
	FirewallMatch string `json:"firewall_match,omitempty"`
	// This supports single IP address or comma separated list of single IP addresses or CIDR. This does not support IP range or IP sets. For DNAT and NO_DNAT rules, this is a mandatory field, and represents the destination network for the incoming packets. For other type of rules, optionally it can contain destination network of outgoing packets. NULL value for this field represents ANY network.
	DestinationNetwork string `json:"destination_network,omitempty"`
	// The sequence_number decides the rule_priority of a NAT rule. Sequence_number and rule_priority have 1:1 mapping.For each NAT section, there will be reserved rule_priority numbers.The valid range of rule_priority number is from 0 to 2147483647(MAX_INT). 1. INTERNAL section     rule_priority reserved from 0 - 1023 (1024 rules)     valid sequence_number range  0 - 1023 2. USER section    rule_priority reserved from 1024 - 2147482623 (2147481600 rules)    valid sequence_number range  0 - 2147481599 3. DEFAULT section    rule_priority reserved from 2147482624 - 2147483647 (1024 rules)    valid sequence_number range  0 - 1023
	SequenceNumber int32 `json:"sequence_number,omitempty"`
}

// Gives the statistics count of a NAT rule.
type PolicyNatRuleCounters struct {
	// Gives the total number of packets.
	TotalPackets int64 `json:"total_packets,omitempty"`
	// Gives the total number of active sessions.
	ActiveSessions int64 `json:"active_sessions,omitempty"`
	// Gives the total number of bytes.
	TotalBytes int64 `json:"total_bytes,omitempty"`
}

// Paged Collection of NAT Rules
type PolicyNatRuleListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// NAT Rules list results
	Results []PolicyNatRule `json:"results"`
}

// Gives the Statistics of a NAT rule.
type PolicyNatRuleStatistics struct {
	// Gives the total number of packets.
	TotalPackets int64 `json:"total_packets,omitempty"`
	// Gives the total number of active sessions.
	ActiveSessions int64 `json:"active_sessions,omitempty"`
	// Gives the total number of bytes.
	TotalBytes int64 `json:"total_bytes,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The warning message about the NAT Rule Statistics.
	WarningMessage string `json:"warning_message,omitempty"`
}

// Gives the collection of NAT rule statistics per enforcement point.
type PolicyNatRuleStatisticsListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// NAT rules statistics per enforcement point
	Results []PolicyNatRuleStatisticsPerEnforcementPoint `json:"results"`
}

// Gives the statistics of a NAT rule per enforcement point.
type PolicyNatRuleStatisticsPerEnforcementPoint struct {
	// Gives NAT rule stats on an enforcement point.
	RuleStatistics []PolicyNatRuleStatistics `json:"rule_statistics,omitempty"`
	// Path of NAT Rule.
	RulePath string `json:"rule_path,omitempty"`
	// Policy Path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Gives the statistics of a NAT rule per logical router on specified enforcement point.
type PolicyNatRuleStatisticsPerLogicalRouter struct {
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Detailed Rule statistics per logical router.
	PerNodeStatistics []PolicyNatRuleStatisticsPerTransportNode `json:"per_node_statistics,omitempty"`
	Statistics        *PolicyNatRuleCounters                    `json:"statistics,omitempty"`
	// Path of the router.
	RouterPath string `json:"router_path,omitempty"`
	// Policy Path referencing the enforcement point from where the statistics are fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Gives the collection of NAT rule statistics per logical router on specified enforcement point.
type PolicyNatRuleStatisticsPerLogicalRouterListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// NAT rules statistics per logical router
	Results []PolicyNatRuleStatisticsPerLogicalRouter `json:"results"`
}

// Gives the Statistics of a NAT rule.
type PolicyNatRuleStatisticsPerTransportNode struct {
	// Gives the total number of packets.
	TotalPackets int64 `json:"total_packets,omitempty"`
	// Gives the total number of active sessions.
	ActiveSessions int64 `json:"active_sessions,omitempty"`
	// Gives the total number of bytes.
	TotalBytes int64 `json:"total_bytes,omitempty"`
	// Timestamp when the data was last updated.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Policy path of the Edge Node.
	TransportNodePath string `json:"transport_node_path,omitempty"`
}

type PolicyNonCompliantConfig struct {
	ReportedBy *PolicyResourceReference `json:"reported_by,omitempty"`
	// Resources/Services impacted by non compliant configuration
	AffectedResources []PolicyResourceReference `json:"affected_resources,omitempty"`
	// Code for non compliant configuration
	NonComplianceCode int64 `json:"non_compliance_code,omitempty"`
	// Detail description of non compliant configuration with suggestive action
	Description string `json:"description,omitempty"`
}

// PIM profile.
type PolicyPimProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Static IPv4 multicast address configuration.
	RpAddress string `json:"rp_address,omitempty"`
}

// Collection of Pim Profile.
type PolicyPimProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// PIM Profile list results.
	Results []PolicyPimProfile `json:"results"`
}

// Abstract base class for all the realized policy objects
type PolicyRealizedResource struct {
	// Absolute path of this object
	Path string `json:"path,omitempty"`
	// Path of its parent
	ParentPath string `json:"parent_path,omitempty"`
	// This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId string `json:"unique_id,omitempty"`
	// Path relative from its parent
	RelativePath string `json:"relative_path,omitempty"`
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
}

// Detailed information about errors from API call to an enforcement point
type PolicyRelatedApiError struct {
	// The module name where the error occurred
	ModuleName string `json:"module_name,omitempty"`
	// A description of the error
	ErrorMessage string `json:"error_message,omitempty"`
	// A numeric error code
	ErrorCode int64 `json:"error_code,omitempty"`
	// Further details about the error
	Details string `json:"details,omitempty"`
	// Additional data about the error
	ErrorData *interface{} `json:"error_data,omitempty"`
}

// Abstract base class for all the policy objects.
type PolicyResource struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Absolute path of this object
	Path string `json:"path,omitempty"`
	// Path of its parent
	ParentPath string `json:"parent_path,omitempty"`
	// This is a UUID generated by the GM/LM to uniquely identify entites in a federated environment. For entities that are stretched across multiple sites, the same ID will be used on all the stretched sites.
	UniqueId string `json:"unique_id,omitempty"`
	// Path relative from its parent
	RelativePath string `json:"relative_path,omitempty"`
}

// Policy resource reference.
type PolicyResourceReference struct {
	// Display name of the NSX resource.
	TargetDisplayName string `json:"target_display_name,omitempty"`
	// Will be set to false if the referenced NSX resource has been deleted.
	IsValid bool `json:"is_valid,omitempty"`
	// Identifier of the NSX resource.
	TargetId string `json:"target_id,omitempty"`
	// Type of the NSX resource.
	TargetType string `json:"target_type,omitempty"`
	// Absolute path of this object.
	Path string `json:"path,omitempty"`
}

// Policy resource reference for enforcement point
type PolicyResourceReferenceForEp struct {
	// Absolute path of this object.
	Path string `json:"path,omitempty"`
}

// Paginated collection of policy resource references for enforcement point
type PolicyResourceReferenceForEpListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of policy resource references for enforcement point
	Results []PolicyResourceReferenceForEp `json:"results"`
}

// Paged Collection of PolicyResourceReference
type PolicyResourceReferenceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Policy resource references list results
	Results []PolicyResourceReference `json:"results"`
}

// Alarm associated with the PolicyRuntimeInfoPerEP that exposes potential errors when retrieving runtime information from the enforcement point.
type PolicyRuntimeAlarm struct {
	// Alarm error id.
	ErrorId      string          `json:"error_id,omitempty"`
	ErrorDetails *PolicyApiError `json:"error_details,omitempty"`
	// Error message describing the issue.
	Message string `json:"message,omitempty"`
}

// Runtime Info Per Enforcement Point.
type PolicyRuntimeInfoPerEp struct {
	Alarm *PolicyRuntimeAlarm `json:"alarm,omitempty"`
	// Policy Path referencing the enforcement point where the info is fetched.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Service chain is a set of network Services. A Service chain is made up of ordered list of service profiles belonging to any same or different services.
type PolicyServiceChain struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Reverse path service profiles are applied to egress traffic and is optional. 2 different set of profiles can be defined for forward and reverse path. If not defined, the reverse of the forward path service profile is applied.
	ReversePathServiceProfiles []string `json:"reverse_path_service_profiles,omitempty"`
	// Path selection policy can be - ANY - Service Insertion is free to redirect to any service path regardless of any load balancing considerations or flow pinning. LOCAL - Preference to be given to local service insances. REMOTE - Preference to be given to the SVM co-located on the same host. ROUND_ROBIN - All active service paths are hit with equal probability.
	PathSelectionPolicy string `json:"path_selection_policy,omitempty"`
	// Path to service segment using which the traffic needs to be redirected.
	ServiceSegmentPath []string `json:"service_segment_path"`
	// Forward path service profiles are applied to ingress traffic.
	ForwardPathServiceProfiles []string `json:"forward_path_service_profiles"`
	// Failure policy for the service defines the action to be taken i.e to allow or to block the traffic during failure scenarios.
	FailurePolicy string `json:"failure_policy,omitempty"`
}

// Policy Service Chain List
type PolicyServiceChainListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// All PolicyServiceChain objects
	Results []PolicyServiceChain `json:"results"`
}

// Represents an instance of partner Service and its configuration.
type PolicyServiceInstance struct {
	// Unique name of Partner Service in the Marketplace
	PartnerServiceName string `json:"partner_service_name"`
	// Transport to be used while deploying Service-VM.
	TransportType string `json:"transport_type,omitempty"`
	// Deployment mode specifies how the partner appliance will be deployed i.e. in HA or standalone mode.
	DeploymentMode string `json:"deployment_mode,omitempty"`
	// Management IP Address of primary interface of the Service
	PrimaryInterfaceMgmtIp string `json:"primary_interface_mgmt_ip"`
	// Id of the standard or ditsributed port group for secondary management console. Please note that only 1 of the 2 values from 1. secondary_interface_network 2. secondary_portgroup_id are allowed to be passed. Both can't be passed in the same request.
	SecondaryPortgroupId string `json:"secondary_portgroup_id,omitempty"`
	// UUID of VCenter/Compute Manager as seen on NSX Manager, to which this service needs to be deployed.
	ContextId string `json:"context_id,omitempty"`
	// Id of the standard or ditsributed port group for primary management console. Please note that only 1 of the 2 values from 1. primary_interface_network 2. primary_portgroup_id are allowed to be passed. Both can't be passed in the same request.
	PrimaryPortgroupId string `json:"primary_portgroup_id,omitempty"`
	// Management IP Address of secondary interface of the Service
	SecondaryInterfaceMgmtIp string `json:"secondary_interface_mgmt_ip,omitempty"`
	// Id of the compute(ResourcePool) to which this service needs to be deployed.
	ComputeId string `json:"compute_id"`
	// Form factor for the deployment of partner service.
	DeploymentSpecName string `json:"deployment_spec_name"`
	// Template for the deployment of partnet service.
	DeploymentTemplateName string `json:"deployment_template_name"`
	// Gateway address for secondary management console. If the provided segment already has gateway, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have gateway, this field must be provided.
	SecondaryGatewayAddress string `json:"secondary_gateway_address,omitempty"`
	// Id of the storage(Datastore). VC moref of Datastore to which this service needs to be deployed.
	StorageId string `json:"storage_id"`
	// Subnet for secondary management console IP. If the provided segment already has subnet, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have subnet, this field must be provided.
	SecondarySubnetMask string `json:"secondary_subnet_mask,omitempty"`
	// List of attributes specific to a partner for which the service is created. There attributes are passed on to the partner appliance.
	Attributes []Attribute `json:"attributes"`
	// Subnet for primary management console IP. If the provided segment already has subnet, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have subnet, this field must be provided.
	PrimarySubnetMask string `json:"primary_subnet_mask,omitempty"`
	// Gateway address for primary management console. If the provided segment already has gateway, this field can be omitted. But if it is provided, it takes precedence always. However, if provided segment does not have gateway, this field must be provided.
	PrimaryGatewayAddress string `json:"primary_gateway_address,omitempty"`
	// Path of the segment to which primary interface of the Service VM needs to be connected
	PrimaryInterfaceNetwork string `json:"primary_interface_network,omitempty"`
	// Path of segment to which secondary interface of the Service VM needs to be connected
	SecondaryInterfaceNetwork string `json:"secondary_interface_network,omitempty"`
	// Failure policy for the Service VM. If this values is not provided, it will be defaulted to FAIL_CLOSE.
	FailurePolicy string `json:"failure_policy,omitempty"`
}

// Collection of only SI objects
type PolicyServiceInstanceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service instance list results
	Results []PolicyServiceInstance `json:"results"`
}

// Statistics for NICs for a PolicyServiceInstance
type PolicyServiceInstanceStatistics struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// PolicyServiceInsatnce path
	ServiceInstanceId string `json:"service_instance_id,omitempty"`
	// Statistics for the data NICs for all the runtimes associated with this service instance.
	InstanceRuntimeStatistics []InstanceRuntimeStatistic `json:"instance_runtime_statistics,omitempty"`
	// Enforcement point path, forward slashes must be escaped using %2F.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Service profile represents specialization of a vendor template. User may provide any of the vendor_template_name or vendor_template_key properties. But in case of multiple vendor templates with the same name, it is recommended to use the vendor_template_key. When both attributes are provided, name is ignored and only key is used to identify the template. If there are multiple templates with same name, and vendor_template_name is provided, realization will fail.
type PolicyServiceProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The vendor template key property of actual vendor template. This should be used when multiple templates with same name exist.
	VendorTemplateKey string `json:"vendor_template_key,omitempty"`
	// List of attributes specific to a partner for which the service is created. These attributes are passed on to the partner appliance and are opaque to NSX. If a vendor template exposes configurable parameters, then their values are specified here.
	Attributes []Attribute `json:"attributes,omitempty"`
	// The redirection action represents if the packet is exclusively redirected to the service, or if a copy is forwarded to the service. Redirection action is not applicable to guest introspection service.
	RedirectionAction string `json:"redirection_action,omitempty"`
	// Name of the vendor template for which this Service Profile is being created.
	VendorTemplateName string `json:"vendor_template_name,omitempty"`
}

// Policy Service Profile List
type PolicyServiceProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service Profile list results
	Results []PolicyServiceProfile `json:"results"`
}

// Policy Sub Attributes data holder
type PolicySubAttributes struct {
	// Datatype for sub attribute
	Datatype string `json:"datatype"`
	// Multiple sub attribute values can be specified as elements of array.
	Value []string `json:"value"`
	// Key for sub attribute
	Key string `json:"key"`
}

// Time interval on which firewall schedule will be applicable
type PolicyTimeIntervalValue struct {
	// Time in 24 hour and minutes in multiple of 30. Example, 9:00.
	StartInterval string `json:"start_interval"`
	// Time in 24 hour and minutes in multiple of 30. Example, 17:30.
	EndInterval string `json:"end_interval"`
}

type PolicyTraceflowObservationDropped struct {
	// The ID of the NAT rule that was applied to forward the traceflow packet
	NatRuleId int64 `json:"nat_rule_id,omitempty"`
	// The reason traceflow packet was dropped
	Reason string `json:"reason,omitempty"`
	// The id of the logical port at which the traceflow packet was dropped
	LportId string `json:"lport_id,omitempty"`
	// The name of the logical port at which the traceflow packet was dropped
	LportName string `json:"lport_name,omitempty"`
	// The id of the acl rule that was applied to drop the traceflow packet
	AclRuleId int64 `json:"acl_rule_id,omitempty"`
	// This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
	ArpFailReason string `json:"arp_fail_reason,omitempty"`
	// The path of the ACL rule that was applied to forward the traceflow packet
	AclRulePath string `json:"acl_rule_path,omitempty"`
	// The path of the NAT rule that was applied to forward the traceflow packet
	NatRulePath string `json:"nat_rule_path,omitempty"`
}

type PolicyTraceflowObservationDroppedLogical struct {
	// The index of service path that is a chain of services represents the point where the traceflow packet was dropped.
	ServicePathIndex int64 `json:"service_path_index,omitempty"`
	// The id of the component that dropped the traceflow packet.
	ComponentId string `json:"component_id,omitempty"`
	// The path of the ACL rule that was applied to forward the traceflow packet
	AclRulePath string `json:"acl_rule_path,omitempty"`
	// The path of the NAT rule that was applied to forward the traceflow packet
	NatRulePath string `json:"nat_rule_path,omitempty"`
}

type PolicyTraceflowObservationForwardedLogical struct {
	// The path index of the service insertion component
	ServicePathIndex int64 `json:"service_path_index,omitempty"`
	// The id of the component that forwarded the traceflow packet.
	ComponentId string `json:"component_id,omitempty"`
	// This field specified the VLAN id a traceflow packet matched in the whitelist in spoofguard.
	SpoofguardVlanId int64 `json:"spoofguard_vlan_id,omitempty"`
	// ARP_UNKNOWN_FROM_CP - Unknown ARP query result emitted by control plane ND_NS_UNKNOWN_FROM_CP - Unknown neighbor solicitation query result emitted by control plane UNKNOWN - Unknown resend type
	ResendType string `json:"resend_type,omitempty"`
	// The name of the logical port through which the traceflow packet was forwarded.
	LportName string `json:"lport_name,omitempty"`
	// The id of the acl rule that was applied to forward the traceflow packet
	AclRuleId int64 `json:"acl_rule_id,omitempty"`
	// The index of the service insertion component
	ServiceIndex int64 `json:"service_index,omitempty"`
	// VNI for the logical network on which the traceflow packet was forwarded.
	Vni int32 `json:"vni,omitempty"`
	// The name of the destination component to which the traceflow packet was forwarded.
	DstComponentName string `json:"dst_component_name,omitempty"`
	// The ID of the NAT rule that was applied to forward the traceflow packet
	NatRuleId int64 `json:"nat_rule_id,omitempty"`
	// The translated source IP address of VPN/NAT
	TranslatedSrcIp string `json:"translated_src_ip,omitempty"`
	// The translated destination IP address of VNP/NAT
	TranslatedDstIp string `json:"translated_dst_ip,omitempty"`
	// The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	SpoofguardMac string `json:"spoofguard_mac,omitempty"`
	// The type of the destination component to which the traceflow packet was forwarded.
	DstComponentType string `json:"dst_component_type,omitempty"`
	// The id of the logical port through which the traceflow packet was forwarded.
	LportId string `json:"lport_id,omitempty"`
	// The id of the destination component to which the traceflow packet was forwarded.
	DstComponentId string `json:"dst_component_id,omitempty"`
	// This field specified the prefix IP address a traceflow packet matched in the whitelist in spoofguard.
	SpoofguardIp string `json:"spoofguard_ip,omitempty"`
	// The ttl of the service insertion component
	ServiceTtl int64 `json:"service_ttl,omitempty"`
	// MAC address of nexthop for service insertion(SI) in service VM(SVM) where the traceflow packet was received.
	SvcNhMac string `json:"svc_nh_mac,omitempty"`
	// The path of the ACL rule that was applied to forward the traceflow packet
	AclRulePath string `json:"acl_rule_path,omitempty"`
	// The path of the NAT rule that was applied to forward the traceflow packet
	NatRulePath string `json:"nat_rule_path,omitempty"`
}

// Transport Zone.
type PolicyTransportZone struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to indicate if the transport zone is the default one. Only one transport zone can be the default one for a given transport zone type.
	IsDefault bool `json:"is_default,omitempty"`
	// Transport Zone Type.
	TzType string `json:"tz_type,omitempty"`
	// UUID of transport zone on NSX-T enforcement point.
	NsxId string `json:"nsx_id,omitempty"`
	// The names of switching uplink teaming policies that all transport nodes in this transport zone support. Uplinkin teaming policies are only valid for VLAN backed transport zones.
	UplinkTeamingPolicyNames []string `json:"uplink_teaming_policy_names,omitempty"`
}

// Paged Collection of Transport Zone
type PolicyTransportZoneListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Transport Zone list result.
	Results []PolicyTransportZone `json:"results"`
}

// The type contains information about the configuration of the feature for a specific node. It contains information like the whether the feature is enabled/disabled, the context profiles defining the category list to detect.
type PolicyUrlCategorizationConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The frequency in minutes at which the updates are downloaded from the URL categorization cloud service. The minimum allowed value is 5 minutes.
	UpdateFrequency int32 `json:"update_frequency,omitempty"`
	// The ids of the context profiles that provides the list of categories to be detected.
	ContextProfiles []string `json:"context_profiles,omitempty"`
	// Property which specifies the enabling/disabling of the feature.
	Enabled bool `json:"enabled"`
}

// Every URL is classified into one or more of 83 pre-defined categories. Examples of categories are 'Shopping', 'Financial Services', 'Travel', etc.
type PolicyUrlCategory struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The id of the category.
	CategoryId int32 `json:"category_id"`
	// The name of the category.
	CategoryName string `json:"category_name"`
}

// List of Policy URL categories.
type PolicyUrlCategoryListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Category list result
	Results []PolicyUrlCategory `json:"results"`
}

// The reputation severity of an URL.
type PolicyUrlReputationSeverity struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The maximum reputation for the severity.
	MaxReputation int32 `json:"max_reputation"`
	// The minimum reputation for the severity.
	MinReputation int32 `json:"min_reputation"`
	// The id of the reputation severity.
	ReputationSeverityId int32 `json:"reputation_severity_id"`
	// The name of the severity.
	Name string `json:"name"`
}

// List of URL reputation severities.
type PolicyUrlReputationSeverityListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Reputation Severity list
	Results []PolicyUrlReputationSeverity `json:"results"`
}

// The setting is used to add, update or remove pool members from pool. For static pool members, admin_state, display_name and weight can be updated. For dynamic pool members, only admin_state can be updated.
type PoolMemberSetting struct {
	// Member admin state
	AdminState string `json:"admin_state,omitempty"`
	// Pool member IP address
	IpAddress string `json:"ip_address"`
	// Pool member port number
	Port string `json:"port,omitempty"`
	// Only applicable to static pool members. If supplied for a pool defined by a grouping object, update API would fail.
	Weight int64 `json:"weight,omitempty"`
	// Only applicable to static pool members. If supplied for a pool defined by a grouping object, update API would fail.
	DisplayName string `json:"display_name,omitempty"`
}

// Detailed information about static address for the port.
type PortAddressBindingEntry struct {
	// IP Address for port binding
	IpAddress string `json:"ip_address,omitempty"`
	// VLAN ID for port binding
	VlanId int64 `json:"vlan_id,omitempty"`
	// Mac address for port binding
	MacAddress string `json:"mac_address,omitempty"`
}

// Detail information about port attachment
type PortAttachment struct {
	// Not valid when type field is INDEPENDENT, mainly used to identify traffic from different ports in container use case.
	TrafficTag int64 `json:"traffic_tag,omitempty"`
	// Indicate how IP will be allocated for the port
	AllocateAddresses string `json:"allocate_addresses,omitempty"`
	// Flag to indicate if hyperbus configuration is required.
	HyperbusMode string `json:"hyperbus_mode,omitempty"`
	// Set to PARENT when type field is CHILD. Read only field.
	ContextType string `json:"context_type,omitempty"`
	// If type is CHILD and the parent port is on the same segment as the child port, then this field should be VIF ID of the parent port. If type is CHILD and the parent port is on a different segment, then this field should be policy path of the parent port. If type is INDEPENDENT/STATIC, then this field should be transport node ID.
	ContextId string `json:"context_id,omitempty"`
	// Type of port attachment. STATIC is added to replace INDEPENDENT. INDEPENDENT type and PARENT type are deprecated.
	Type_ string `json:"type,omitempty"`
	// ID used to identify/look up a child attachment behind a parent attachment
	AppId string `json:"app_id,omitempty"`
	// VIF UUID on NSX Manager. If the attachement type is PARENT, this property is required.
	Id string `json:"id,omitempty"`
}

// This entity will be used to establish association between discovery profile and Port. Using this entity, user can specify intent for applying discovery profile to particular Port. Port here is Logical Port.
type PortDiscoveryProfileBindingMap struct {
	// PolicyPath of associated IP Discovery Profile
	IpDiscoveryProfilePath string `json:"ip_discovery_profile_path,omitempty"`
	// PolicyPath of associated Mac Discovery Profile
	MacDiscoveryProfilePath string `json:"mac_discovery_profile_path,omitempty"`
}

// Paged collection of Port Discovery Profile Binding Maps
type PortDiscoveryProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port Discovery Profile Binding Map list results
	Results []PortDiscoveryProfileBindingMap `json:"results"`
}

// Mirrors Data from source to destination
type PortMirroringInstance struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored.
	SnapLength int32 `json:"snap_length,omitempty"`
	// Port mirroring instance direction
	Direction string `json:"direction,omitempty"`
	// Data from source group will be copied to members of destination group.
	DestinationGroup string `json:"destination_group"`
}

// Paged collection of port mirroring instances
type PortMirroringInstanceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port Mirroring Instances list results
	Results []PortMirroringInstance `json:"results"`
}

// Mirrors Data from source to destination
type PortMirroringProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Port mirroring profile direction
	Direction string `json:"direction,omitempty"`
	// Allows user to select type of port mirroring session.
	ProfileType string `json:"profile_type,omitempty"`
	// If this property is set, the packet will be truncated to the provided length. If this property is unset, entire packet will be mirrored.
	SnapLength int32 `json:"snap_length,omitempty"`
	// User can provide Mirror Destination type e.g GRE, ERSPAN_TWO or ERSPAN_THREE.If profile type is REMOTE_L3_SPAN, encapsulation type is used else ignored.
	EncapsulationType string `json:"encapsulation_type,omitempty"`
	// Used by physical switch for the mirror traffic forwarding. Must be provided and only effective when encapsulation type is ERSPAN type II or type III.
	ErspanId int32 `json:"erspan_id,omitempty"`
	// User-configurable 32-bit key only for GRE
	GreKey int32 `json:"gre_key,omitempty"`
	// Data from source group will be copied to members of destination group. Only IPSET group and group with membership criteria VM is supported. IPSET group allows only three ip's.
	DestinationGroup string `json:"destination_group"`
}

// Paged collection of port mirroring profiles
type PortMirroringProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port Mirroring Profiles list results
	Results []PortMirroringProfile `json:"results"`
}

// This entity will be used to establish association between monitoring profile and Port. Using this entity, user can specify intent for applying monitoring profile to particular Port. Port here is Segment Port.
type PortMonitoringProfileBindingMap struct {
	// PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath string `json:"ipfix_l2_profile_path,omitempty"`
	// PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath string `json:"port_mirroring_profile_path,omitempty"`
}

// Paged collection of Port Monitoring Profile Binding Maps
type PortMonitoringProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port Monitoring Profile Binding Map list results
	Results []PortMonitoringProfileBindingMap `json:"results"`
}

// This entity will be used to establish association between qos profile and Port. Using this entity, you can  specify intent for applying qos profile to particular Port. Port here is Segment Port.
type PortQoSProfileBindingMap struct {
	// PolicyPath of associated  QoS Profile
	QosProfilePath string `json:"qos_profile_path,omitempty"`
}

// Paged collection of Port QoS Profile Binding Maps
type PortQoSProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port QoS Profile Binding Map list results
	Results []PortQoSProfileBindingMap `json:"results"`
}

// Contains the binding relationship between port and security profile.
type PortSecurityProfileBindingMap struct {
	// The policy path of the asscociated SpoofGuard profile
	SpoofguardProfilePath string `json:"spoofguard_profile_path,omitempty"`
	// The policy path of the asscociated Segment Security profile
	SegmentSecurityProfilePath string `json:"segment_security_profile_path,omitempty"`
}

// Paged collection of port security profile binding maps
type PortSecurityProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Port security profile binding map list results
	Results []PortSecurityProfileBindingMap `json:"results"`
}

// Network prefix entry
type PrefixEntry struct {
	// Action for the prefix list.
	Action string `json:"action,omitempty"`
	// Prefix length greater than or equal to.
	Ge int32 `json:"ge,omitempty"`
	// Prefix length less than or equal to.
	Le int32 `json:"le,omitempty"`
	// Network prefix in CIDR format. \"ANY\" matches all networks.
	Network string `json:"network"`
}

// A named list of prefixes for routing purposes.
type PrefixList struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Specify ordered list of network prefixes.
	Prefixes []PrefixEntry `json:"prefixes"`
}

// Paged collection of PrefixLists
type PrefixListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// PrefixList results
	Results []PrefixList `json:"results"`
}

// This entity will be used to establish association between profile and policy entities.
type ProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
}

// Represents a label-value pair.
type PropertyItem struct {
	// Represents field value of the property.
	Field string `json:"field"`
	// If true, separates this property in a widget.
	Separator bool `json:"separator,omitempty"`
	// Hyperlink of the specified UI page that provides details. This will be linked with value of the property.
	Navigation string `json:"navigation,omitempty"`
	// Render configuration to be applied, if any.
	RenderConfiguration []RenderConfiguration `json:"render_configuration,omitempty"`
	// Data type of the field.
	Type_ string `json:"type"`
	// Set to true if the field is a heading. Default is false.
	Heading bool `json:"heading,omitempty"`
	// If the condition is met then the property will be displayed. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
	Label     *Label `json:"label,omitempty"`
}

// A Limiter configuration entry that specifies type and metrics
type QoSBaseRateLimiter struct {
	Enabled bool `json:"enabled"`
	// Type rate limiter
	ResourceType string `json:"resource_type"`
}

// Dscp value is ignored in case of 'TRUSTED' DscpTrustMode.
type QoSDscp struct {
	// Internal Forwarding Priority
	Priority int32 `json:"priority,omitempty"`
	// When you select the Trusted mode the inner header DSCP value is applied to the outer IP header for IP/IPv6 traffic. For non IP/IPv6 traffic, the outer IP header takes the default value.Untrusted mode is supported on overlay-based and VLAN-based logical port.
	Mode string `json:"mode,omitempty"`
}

type QoSProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Array of Rate limiter configurations to applied on Segment or Port.
	ShaperConfigurations []QoSBaseRateLimiter `json:"shaper_configurations,omitempty"`
	// Class of service groups similar types of traffic in the network and each type of traffic is treated as a class with its own level of service priority. The lower priority traffic is slowed down or in some cases dropped to provide better throughput for higher priority traffic.
	ClassOfService int32    `json:"class_of_service,omitempty"`
	Dscp           *QoSDscp `json:"dscp,omitempty"`
}

// Base QoS Profile Binding Map
type QoSProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// Paged collection of QoS profiles
type QoSProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// QoS profiles list results
	Results []QoSProfile `json:"results"`
}

type RaConfig struct {
	// The maximum number of hops through which packets can pass before being discarded.
	HopLimit int64 `json:"hop_limit,omitempty"`
	// Router lifetime value in seconds. A value of 0 indicates the router is not a default router for the receiving end. Any other value in this field specifies the lifetime, in seconds, associated with this router as a default router.
	RouterLifetime int64 `json:"router_lifetime,omitempty"`
	// Interval between 2 Router advertisement in seconds.
	RaInterval int64 `json:"ra_interval,omitempty"`
	// The time interval in seconds, in which the prefix is advertised as preferred.
	PrefixPreferredTime int64 `json:"prefix_preferred_time,omitempty"`
	// The time interval in seconds, in which the prefix is advertised as valid.
	PrefixLifetime int64 `json:"prefix_lifetime,omitempty"`
}

type RaDnsConfig struct {
	// Lifetime of Domain names in milliseconds
	DomainNameLifetime int64 `json:"domain_name_lifetime,omitempty"`
	// DNS server.
	DnsServer []string `json:"dns_server,omitempty"`
	// Domain name in RA message.
	DomainName []string `json:"domain_name,omitempty"`
	// Lifetime of DNS server in milliseconds
	DnsServerLifetime int64 `json:"dns_server_lifetime,omitempty"`
}

// Reaction represents a programmable entity which encapsulates the events and the actions in response to the events, or simply \"If This Then That\".
type Reaction struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Events that provide contextual variables about what the reaction should react to. This field can be interpreted as the WHAT of the Reaction, or simply as \"If This\" Clause.
	Events []Event `json:"events"`
	// Actions that need to be taken when the events occur. These actions must appear in the order that they need to be taken in. This field can be interpreted as the HOW of the Reaction, or simply as \"Then That\".
	Actions []Action `json:"actions"`
}

// Paged Collection of Reactions.
type ReactionListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Reaction list results.
	Results []Reaction `json:"results"`
}

// Realized Enforcement Point
type RealizedEnforcementPoint struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus     string             `json:"runtime_status,omitempty"`
	RealizedFirewalls *RealizedFirewalls `json:"realized_firewalls,omitempty"`
	RealizedServices  *RealizedServices  `json:"realized_services,omitempty"`
	RealizedGroups    *RealizedGroups    `json:"realized_groups,omitempty"`
}

type RealizedEnforcementPointListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of Enforcement Point's
	Results []RealizedEnforcementPoint `json:"results,omitempty"`
}

// Realized firewall
type RealizedFirewall struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	ResourceType  string `json:"resource_type"`
}

// Realized Firewall Rule
type RealizedFirewallRule struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// Flag to disable rule. Disabled will only be persisted but never provisioned/realized.
	Disabled bool `json:"disabled,omitempty"`
	// List of sources. Null will be treated as any.
	Sources []ResourceReference `json:"sources,omitempty"`
	// Rule direction in case of stateless firewall rules. This will only considered if section level parameter is set to stateless. Default to IN_OUT if not specified.
	Direction string `json:"direction,omitempty"`
	// List of the services. Null will be treated as any.
	Services []ResourceReference `json:"services,omitempty"`
	// Action enforced on the packets which matches the firewall rule.
	Action string `json:"action,omitempty"`
	// List of the destinations. Null will be treated as any.
	Destinations []ResourceReference `json:"destinations,omitempty"`
}

// Realized Firewall section
type RealizedFirewallSection struct {
	ResourceType string `json:"resource_type"`
	// List of firewall rules in the section.
	Rules []RealizedFirewallRule `json:"rules,omitempty"`
	// Number of rules in this section.
	RuleCount int64 `json:"rule_count,omitempty"`
	// Type of the rules which a section can contain.
	SectionType string `json:"section_type,omitempty"`
}

type RealizedFirewallSectionListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of firewall sections
	Results []RealizedFirewallSection `json:"results,omitempty"`
}

// Realized firewalls
type RealizedFirewalls struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// list of realized firewalls
	RealizedFirewalls []RealizedFirewall `json:"realized_firewalls,omitempty"`
}

// Realized group
type RealizedGroup struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	ResourceType  string `json:"resource_type"`
}

// Realized groups
type RealizedGroups struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// list of realized groups
	RealizedGroups []RealizedGroup `json:"realized_groups,omitempty"`
}

// Realized Logical Port
type RealizedLogicalPort struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// The id of the logical port
	LogicalPortId string `json:"logical_port_id,omitempty"`
	// The Operational status of the logical port
	Status string `json:"status,omitempty"`
}

// Realized Logical Switch
type RealizedLogicalSwitch struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// Transport zone identifier
	TransportZoneId string `json:"transport_zone_id,omitempty"`
	// Id of the logical switch
	LogicalSwitchId string `json:"logical_switch_id,omitempty"`
}

// Realized Network and Security Group
type RealizedNsGroup struct {
	ResourceType string `json:"resource_type"`
	// Reference to the evaluated members of the NSGroup.
	Evaluations []RealizedNsGroupMemberEvaluation `json:"evaluations,omitempty"`
}

// Realized NSGroup member evaluation
type RealizedNsGroupMemberEvaluation struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// list of logical ports
	LogicalPorts []RealizedLogicalPort `json:"logical_ports,omitempty"`
	// list of virtual machines
	VirtualMachines []RealizedVirtualMachine `json:"virtual_machines,omitempty"`
	// list of logical switches
	LogicalSwitches []RealizedLogicalSwitch `json:"logical_switches,omitempty"`
	// Count of the members added to this NSGroup
	MemberCount int64 `json:"member_count,omitempty"`
}

// Realized NSService
type RealizedNsService struct {
	// Realized services
	ResourceType string `json:"resource_type"`
	// Realized nsservice type
	ServiceType string `json:"service_type,omitempty"`
}

// Realized Network and Security Group
type RealizedSecurityGroup struct {
	ResourceType string `json:"resource_type"`
	// Reference to the evaluted members of the Security Group.
	Evaluations []RealizedSecurityGroupMemberEvaluation `json:"evaluations,omitempty"`
}

type RealizedSecurityGroupListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of realized Security Groups
	Results []RealizedSecurityGroup `json:"results,omitempty"`
}

// Realized Security Group member evaluation
type RealizedSecurityGroupMemberEvaluation struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// list of virtual machines
	VirtualMachines []RealizedVirtualMachine `json:"virtual_machines,omitempty"`
	// Count of the members added to this Security Group
	MemberCount int64 `json:"member_count,omitempty"`
}

// Realized Service
type RealizedService struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// Realized services
	ResourceType string `json:"resource_type"`
}

// Realized services
type RealizedServices struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// List of realized services
	RealizedServices []RealizedService `json:"realized_services,omitempty"`
}

// Realized Virtual Machine
type RealizedVirtualMachine struct {
	// Realization id of this object
	RealizationSpecificIdentifier string `json:"realization_specific_identifier,omitempty"`
	// Desire state paths of this object
	IntentReference []string `json:"intent_reference,omitempty"`
	// Realization state of this object
	State string `json:"state"`
	// Realization API of this object on enforcement point
	RealizationApi string `json:"realization_api,omitempty"`
	// Alarm info detail
	Alarms []PolicyAlarmResource `json:"alarms,omitempty"`
	// It define the root cause for runtime error.
	RuntimeError string `json:"runtime_error,omitempty"`
	// Possible values could be UP, DOWN, UNKNOWN, DEGRADED This list is not exhaustive.
	RuntimeStatus string `json:"runtime_status,omitempty"`
	// Id of the host on which the vm exists.
	HostId string `json:"host_id,omitempty"`
	// Id of the vm unique within the host.
	LocalIdOnHost string `json:"local_id_on_host,omitempty"`
	// Current power state of this virtual machine in the system.
	PowerState string `json:"power_state,omitempty"`
	// List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']
	ComputeIds []string `json:"compute_ids,omitempty"`
}

type RealizedVirtualMachineListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of VMs
	Results []RealizedVirtualMachine `json:"results,omitempty"`
}

// Ordered list of rules long with the path of PolicyServiceInstance to which the traffic needs to be redirected. | Please note that the scope property must be provided for NS redirection | policy if redirect to is a service chain. For NS, when redirect to is not | to the service chain, and scope is specified on RedirectionPolicy, it | will be ignored. The scope will be determined from redirect to path | instead. For EW policy, scope must not be  supplied in the request. | Path to either Tier0 or Tier1 is allowed as the scope. Only 1 path | can be specified as a scope. | Also, note that, if stateful flag is not sent, it will be treated as true. If statelessness is intended, false must be sent explicitly as the value | for stateful field.
type RedirectionPolicy struct {
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// Redirection rules that are a part of this RedirectionPolicy. At max, there can be 1000 rules in a given RedirectPolicy.
	Rules []RedirectionRule `json:"rules,omitempty"`
	// This is the read only flag which will state the direction of this | redirection policy. True denotes that it is NORTH-SOUTH and false | value means it is an EAST-WEST redirection policy.
	NorthSouth bool `json:"north_south,omitempty"`
	// Paths to which traffic will be redirected to. As of now, only 1 is | supported. Paths allowed are | 1. Policy Service Instance | 2. Service Instance Endpoint | 3. Virtual Endpoint | 4. Policy Service Chain
	RedirectTo []string `json:"redirect_to,omitempty"`
}

// Paged Collection of Redirection Policies
type RedirectionPolicyListResult struct {
	// Redirection policy list results
	Results []RedirectionPolicy `json:"results"`
}

// It define redirection rule for service insertion
type RedirectionRule struct {
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol string `json:"ip_protocol,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string `json:"profiles,omitempty"`
	// This is a unique 4 byte positive number that is assigned by the system.  This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on.
	RuleId int64 `json:"rule_id,omitempty"`
	// A flag to indicate whether rule is a default rule.
	IsDefault bool `json:"is_default,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded bool `json:"destinations_excluded,omitempty"`
	// This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded bool `json:"sources_excluded,omitempty"`
	// The action to be applied to all the services
	Action string `json:"action,omitempty"`
}

// Paged Collection of RedirectionRules
type RedirectionRuleListResult struct {
	// RedirectionRule list results
	Results []RedirectionRule `json:"results"`
}

// Appliance registration access token
type RegistrationToken struct {
	// Access token
	Token string `json:"token,omitempty"`
	// User delegated by token
	User string `json:"user,omitempty"`
	// List results
	Roles []string `json:"roles"`
}

// Detailed information about a related API error
type RelatedApiError struct {
	// The module name where the error occurred
	ModuleName string `json:"module_name,omitempty"`
	// A description of the error
	ErrorMessage string `json:"error_message,omitempty"`
	// A numeric error code
	ErrorCode int64 `json:"error_code,omitempty"`
	// Further details about the error
	Details string `json:"details,omitempty"`
	// Additional data about the error
	ErrorData *interface{} `json:"error_data,omitempty"`
}

// Related attribute on the target resource for conditional constraints based on related attribute value. Example - destinationGroups/service/action is related attribute of   sourceGroups in communcation entry.
type RelatedAttribute struct {
	// Related attribute name on the target entity.
	Attribute string `json:"attribute"`
}

// Represents the leaf level type expression to express constraint as value of realted attribute to the target. Example - Constraint traget attribute 'X' (example in Constraint),   if destinationGroups contains 'vCeneter' then allow only values   \"HTTPS\", \"HTTP\" for attribute X.   {     \"target\":{       \"target_resource_type\":\"CommunicationEntry\",       \"attribute\":\"services\",       \"path_prefix\": \"/infra/domains/{{DOMAIN}}/edge-communication-maps/default/communication-entries/\"     },     \"constraint_expression\": {       \"resource_type\": \"RelatedAttributeConditionalExpression\",       \"related_attribute\":{         \"attribute\":\"destinationGroups\"       },       \"condition\" : {         \"operator\":\"INCLUDES\",         \"rhs_value\": [\"/infra/domains/mgw/groups/VCENTER\"],         \"value_constraint\": {           \"resource_type\": \"ValueConstraintExpression\",           \"operator\":\"INCLUDES\",           \"values\":[\"/infra/services/HTTP\", \"/infra/services/HTTPS\"]         }       }     }   }
type RelatedAttributeConditionalExpression struct {
	ResourceType     string                                `json:"resource_type"`
	RelatedAttribute *RelatedAttribute                     `json:"related_attribute"`
	Condition        *ConditionalValueConstraintExpression `json:"condition"`
}

// Remote file server
type RemoteFileServer struct {
	// Remote server directory to copy bundle files to
	DirectoryPath string                `json:"directory_path"`
	Protocol      *FileTransferProtocol `json:"protocol"`
	// Server port
	Port int64 `json:"port,omitempty"`
	// Remote server hostname or IP address
	Server string `json:"server"`
}

// Remote server
type RemoteServerFingerprint struct {
	// SSH fingerprint of server
	SshFingerprint string `json:"ssh_fingerprint"`
	// Server port
	Port int64 `json:"port,omitempty"`
	// Remote server hostname or IP address
	Server string `json:"server"`
}

// Remote server
type RemoteServerFingerprintRequest struct {
	// Server port
	Port int64 `json:"port,omitempty"`
	// Remote server hostname or IP address
	Server string `json:"server"`
}

// Render configuration to be applied to the widget.
type RenderConfiguration struct {
	// The color to use when rendering an entity. For example, set color as 'RED' to render a portion of donut in red.
	Color string `json:"color,omitempty"`
	// If the condition is met then the rendering specified for the condition will be applied. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
	// If specified, overrides the field value. This can be used to display a meaningful value in situations where field value is not available or not configured.
	DisplayValue string `json:"display_value,omitempty"`
	// Multi-line text to be shown on tooltip while hovering over the UI element if the condition is met.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
}

// Base class for resources
type Resource struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
}

// Resource Field Pointer representing the exact value within a policy object.
type ResourceFieldPointer struct {
	// Policy Path referencing a policy object. If not supplied, the field pointer will be applied to the event source.
	Path string `json:"path,omitempty"`
	// Field Pointer referencing the exact field within the policy object.
	FieldPointer string `json:"field_pointer"`
}

// It represents the resource information which could identify resource.
type ResourceInfo struct {
	// It will represent resource identifiers. For example, policy objects will be represented with paths and virtual machine will be represented with external ids.
	ResourceIds []string `json:"resource_ids"`
	// It will represent resource type on which tag bulk operation to be performed. Supported resource type is VirtualMachine.
	ResourceType string `json:"resource_type"`
}

// Collection of resource info objects
type ResourceInfoListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Resource info list results
	Results []PolicyFineTuningResourceInfo `json:"results"`
}

// A link to a related resource
type ResourceLink struct {
	// Optional action
	Action string `json:"action,omitempty"`
	// Link to resource
	Href string `json:"href,omitempty"`
	// Custom relation type (follows RFC 5988 where appropriate definitions exist)
	Rel string `json:"rel,omitempty"`
}

// Resource Operation is an Event Source that represents a resource that is being changed at very specific points of time, with regard to its interaction with dao layer.
type ResourceOperation struct {
	// Event Source resource type.
	ResourceType string `json:"resource_type"`
	// Regex path representing a regex expression on resources. This regex is used to identify the object(s) that is/are the source of the Event. For instance: specifying \"Lb* | /infra/tier-0s/vmc/ipsec-vpn-services/default\" as a source means that ANY resource starting with Lb or ANY resource with \"/infra/tier-0s/vmc/ipsec-vpn-services/default\" as path would be the source of the event in question.
	ResourcePointer string `json:"resource_pointer"`
	// Operation types.
	OperationTypes []string `json:"operation_types"`
}

// A weak reference to an NSX resource.
type ResourceReference struct {
	// Display name of the NSX resource.
	TargetDisplayName string `json:"target_display_name,omitempty"`
	// Will be set to false if the referenced NSX resource has been deleted.
	IsValid bool `json:"is_valid,omitempty"`
	// Identifier of the NSX resource.
	TargetId string `json:"target_id,omitempty"`
	// Type of the NSX resource.
	TargetType string `json:"target_type,omitempty"`
}

// It represents tag operation status for a resource and details of the failure if any.
type ResourceTagStatus struct {
	// Status of tag apply or remove operation
	TagStatus string `json:"tag_status"`
	// Details about the error if any
	Details string `json:"details,omitempty"`
	// Resource display name
	ResourceDisplayName string `json:"resource_display_name,omitempty"`
	// Resource id
	ResourceId string `json:"resource_id"`
}

// Tag operation status for particular resource type and resource ids.
type ResourceTypeTagStatus struct {
	// List of resources on which tag needs to be applied
	ResourceTagStatus []ResourceTagStatus `json:"resource_tag_status,omitempty"`
	// Resource type
	ResourceType string `json:"resource_type"`
}

// Configuration where backup files are stored for restore
type RestoreConfiguration struct {
	RemoteFileServer *RemoteFileServer `json:"remote_file_server"`
	// Passphrase used to encrypt backup files.
	Passphrase string `json:"passphrase,omitempty"`
}

// Restore step info
type RestoreStep struct {
	Status *PerStepRestoreStatus `json:"status,omitempty"`
	// Restore step number
	StepNumber int64 `json:"step_number,omitempty"`
	// Restore step description
	Description string `json:"description,omitempty"`
	// Restore step value
	Value string `json:"value,omitempty"`
}

// A base class for types that track revisions
type RevisionedResource struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
	Revision int32 `json:"_revision,omitempty"`
}

// Role
type Role struct {
	// Short identifier for the role. Must be all lower case with no spaces.
	Role string `json:"role"`
	// A short, human-friendly display name of the role.
	RoleDisplayName string `json:"role_display_name,omitempty"`
}

// User/Group's role binding
type RoleBinding struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Identity source type
	IdentitySourceType string `json:"identity_source_type,omitempty"`
	// User/Group's name
	Name string `json:"name,omitempty"`
	// Roles
	Roles []Role `json:"roles,omitempty"`
	// Type
	Type_ string `json:"type,omitempty"`
	// Property 'stale' can be considered to have these values - absent  - This type of rolebinding does not support stale property TRUE    - Rolebinding is stale in vIDM meaning the user is no longer present in vIDM FALSE   - Rolebinding is available in vIDM UNKNOWN - Rolebinding's state of staleness in unknown Once rolebindings become stale, they can be deleted using the API POST /aaa/role-bindings?action=delete_stale_bindings
	Stale string `json:"stale,omitempty"`
	// The ID of the external identity source that holds the referenced external entity. Currently, only external LDAP servers are allowed.
	IdentitySourceId string `json:"identity_source_id,omitempty"`
}

type RoleBindingListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List results
	Results []RoleBinding `json:"results"`
}

type RoleListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List results
	Results []Role `json:"results"`
}

// Role
type RoleWithFeatures struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Short identifier for the role. Must be all lower case with no spaces.
	Role string `json:"role,omitempty"`
	// Features
	Features []FeaturePermission `json:"features"`
}

type RoleWithFeaturesListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List results
	Results []RoleWithFeatures `json:"results"`
}

// Route advertisement rules and filtering
type RouteAdvertisementRule struct {
	// Action to advertise filtered routes to the connected Tier0 gateway. PERMIT: Enables the advertisment DENY: Disables the advertisement
	Action string `json:"action"`
	// Network CIDRs to be routed.
	Subnets []string `json:"subnets,omitempty"`
	// Prefix operator to filter subnets. GE prefix operator filters all the routes with prefix length greater than or equal to the subnets configured. EQ prefix operator filter all the routes with prefix length equal to the subnets configured.
	PrefixOperator string `json:"prefix_operator,omitempty"`
	// Display name should be unique.
	Name string `json:"name"`
	// Enable different types of route advertisements. When not specified, routes to IPSec VPN local-endpoint subnets (TIER1_IPSEC_LOCAL_ENDPOINT) are automatically advertised.
	RouteAdvertisementTypes []string `json:"route_advertisement_types,omitempty"`
}

// List of routes to be aggregated
type RouteAggregationEntry struct {
	// Send only summarized route. Summarization reduces number of routes advertised by representing multiple related routes with prefix property.
	SummaryOnly bool `json:"summary_only,omitempty"`
	// CIDR of aggregate address
	Prefix string `json:"prefix"`
}

// A Route Based VPN is more flexible, more powerful and recommended over policy based VPN. IP Tunnel port is created and all traffic routed via tunnel port is protected. Routes can be configured statically or can be learned through BGP. A route based VPN is must for establishing redundant VPN session to remote site.
type RouteBasedIpSecVpnSession struct {
	// IPSec Pre-shared key. Maximum length of this field is 128 characters.
	Psk string `json:"psk,omitempty"`
	// Policy path referencing Dead Peer Detection (DPD) profile. Default is set to system default profile.
	DpdProfilePath string `json:"dpd_profile_path,omitempty"`
	// Policy path referencing IKE profile to be used. Default is set according to system default profile.
	IkeProfilePath string `json:"ike_profile_path,omitempty"`
	// Enable/Disable IPSec VPN session.
	Enabled bool `json:"enabled,omitempty"`
	// Connection initiation mode used by local endpoint to establish ike connection with peer site. INITIATOR - In this mode local endpoint initiates tunnel setup and will also respond to incoming tunnel setup requests from peer gateway. RESPOND_ONLY - In this mode, local endpoint shall only respond to incoming tunnel setup requests. It shall not initiate the tunnel setup. ON_DEMAND - In this mode local endpoint will initiate tunnel creation once first packet matching the policy rule is received and will also respond to incoming initiation request.
	ConnectionInitiationMode string `json:"connection_initiation_mode,omitempty"`
	// Policy path referencing Local endpoint.
	LocalEndpointPath string `json:"local_endpoint_path"`
	// Policy path referencing Tunnel profile to be used. Default is set to system default profile.
	TunnelProfilePath string `json:"tunnel_profile_path,omitempty"`
	// Compliance suite.
	ComplianceSuite string                         `json:"compliance_suite,omitempty"`
	TcpMssClamping  *TcpMaximumSegmentSizeClamping `json:"tcp_mss_clamping,omitempty"`
	// Peer authentication mode. PSK - In this mode a secret key shared between local and peer sites is to be used for authentication. The secret key can be a string with a maximum length of 128 characters. CERTIFICATE - In this mode a certificate defined at the global level is to be used for authentication.
	AuthenticationMode string `json:"authentication_mode,omitempty"`
	// Peer ID to uniquely identify the peer site. The peer ID is the public IP address of the remote device terminating the VPN tunnel. When NAT is configured for the peer, enter the private IP address of the peer.
	PeerId string `json:"peer_id"`
	// Public IPV4 address of the remote device terminating the VPN connection.
	PeerAddress string `json:"peer_address"`
	// A Policy Based VPN requires to define protect rules that match   local and peer subnets. IPSec security associations is   negotiated for each pair of local and peer subnet. A Route Based VPN is more flexible, more powerful and recommended over   policy based VPN. IP Tunnel port is created and all traffic routed via   tunnel port is protected. Routes can be configured statically   or can be learned through BGP. A route based VPN is must for establishing   redundant VPN session to remote site.
	ResourceType string `json:"resource_type"`
	// If true the default firewall rule Action is set to DROP, otherwise set to ALLOW. This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting bool `json:"force_whitelisting,omitempty"`
	// IP Tunnel interfaces.
	TunnelInterfaces []IpSecVpnTunnelInterface `json:"tunnel_interfaces"`
}

// A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
type RouteBasedL3VpnSession struct {
	// - A Policy Based L3Vpn is a configuration in which protect rules to match local and remote subnet needs to be defined. Tunnel is established for each pair of local and remote subnet defined in protect rules. - A Route Based L3Vpn is more flexible, more powerful and recommended over policy based. IP Tunnel subnet is created and all traffic routed through tunnel subnet (commonly known as VTI) is sent over tunnel. Routes can be learned through BGP. A route based L3Vpn is required when using redundant L3Vpn.
	ResourceType string `json:"resource_type"`
	// This is a deprecated field. Any specified value is not saved and will be ignored.
	RoutingConfigPath string `json:"routing_config_path,omitempty"`
	// Virtual tunnel interface (VTI) port IP subnets to be used to configure route-based L3Vpn session. A max of one tunnel subnet is allowed.
	TunnelSubnets []TunnelSubnet `json:"tunnel_subnets"`
	// Indicates if logging should be enabled for the default whitelisting rule for the VTI interface.
	DefaultRuleLogging bool `json:"default_rule_logging,omitempty"`
	// The default firewall rule Action is set to DROP if true otherwise set to ALLOW.
	ForceWhitelisting bool `json:"force_whitelisting,omitempty"`
}

// BGP route details.
type RouteDetails struct {
	// BGP Multi Exit Discriminator attribute.
	Med int64 `json:"med,omitempty"`
	// Next hop IP address.
	NextHop string `json:"next_hop,omitempty"`
	// CIDR network address.
	Network string `json:"network,omitempty"`
	// BGP Weight attribute.
	Weight int64 `json:"weight,omitempty"`
	// BGP Local Preference attribute.
	LocalPref int64 `json:"local_pref,omitempty"`
	// BGP AS path attribute.
	AsPath string `json:"as_path,omitempty"`
}

// Route map entry
type RouteMapEntry struct {
	// Action for the route map entry
	Action string `json:"action"`
	// Community list match criteria for route map. Properties community_list_matches and prefix_list_matches are mutually exclusive and cannot be used in the same route map entry.
	CommunityListMatches []CommunityMatchCriteria `json:"community_list_matches,omitempty"`
	Set                  *RouteMapEntrySet        `json:"set,omitempty"`
	// Prefix list match criteria for route map. Properties community_list_matches and prefix_list_matches are mutually exclusive and cannot be used in the same route map entry.
	PrefixListMatches []string `json:"prefix_list_matches,omitempty"`
}

// Set criteria for route map entry
type RouteMapEntrySet struct {
	// For incoming and import route_maps on receiving both v6 global and v6 link-local address for the route, prefer to use the global address as the next hop. By default, it prefers the link-local next hop.
	PreferGlobalV6NextHop bool `json:"prefer_global_v6_next_hop,omitempty"`
	// Multi exit descriminator (MED) is a hint to BGP neighbors about the preferred path into an autonomous system (AS) that has multiple entry points. A lower MED value is preferred over a higher value.
	Med int32 `json:"med,omitempty"`
	// Local preference indicates the degree of preference for one BGP route over other BGP routes. The path with highest local preference is preferred.
	LocalPreference int64 `json:"local_preference,omitempty"`
	// Weight is used to select a route when multiple routes are available to the same network. Route with the highest weight is preferred.
	Weight int32 `json:"weight,omitempty"`
	// AS path prepend to influence route selection.
	AsPathPrepend string `json:"as_path_prepend,omitempty"`
	// Set BGP regular or large community for matching routes. A maximum of one value for each community type separated by space. Well-known community name, community value in aa:nn (2byte:2byte) format for regular community and community value in aa:bb:nn (4byte:4byte:4byte) format for large community are supported.
	Community string `json:"community,omitempty"`
}

// Next hop configuration for network
type RouterNexthop struct {
	// Interface path associated with current route. For example: specify a policy path referencing the IPSec VPN Session.
	Scope []string `json:"scope,omitempty"`
	// Next hop gateway IP address
	IpAddress string `json:"ip_address,omitempty"`
	// Cost associated with next hop route
	AdminDistance int32 `json:"admin_distance,omitempty"`
}

// BGP routes per transport node.
type RoutesPerTransportNode struct {
	// Array of BGP neighbor route details for this transport node.
	Routes []RouteDetails `json:"routes,omitempty"`
	// BGP neighbor source address.
	SourceAddress string `json:"source_address,omitempty"`
	// Transport node id
	TransportNodeId string `json:"transport_node_id,omitempty"`
}

// Routing table entry.
type RoutingEntry struct {
	// Logical router component(Service Router/Distributed Router) id
	LrComponentId string `json:"lr_component_id,omitempty"`
	// Next hop address.
	NextHop string `json:"next_hop,omitempty"`
	// Logical router component(Service Router/Distributed Router) type
	LrComponentType string `json:"lr_component_type,omitempty"`
	// Network CIDR.
	Network string `json:"network,omitempty"`
	// Network address CIDR.
	RouteType string `json:"route_type,omitempty"`
	// The policy path of the interface which is used as the next hop
	Interface_ string `json:"interface,omitempty"`
	// Admin distance.
	AdminDistance int32 `json:"admin_distance,omitempty"`
}

// Routing table.
type RoutingTable struct {
	// Entry count.
	Count int32 `json:"count,omitempty"`
	// Route entries.
	RouteEntries []RoutingEntry `json:"route_entries"`
	// Transport node ID.
	EdgeNode string `json:"edge_node,omitempty"`
}

type RoutingTableListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Paged Collection of Routes per transport node ID.
	Results []RoutingTable `json:"results,omitempty"`
}

// Root of the api result set for forming rows.
type RowListField struct {
	// Short name or alias of row list field, if any. If unspecified, the row list field can be referenced by its index in the array of row list fields as $<index> (for example, $0).
	Alias string `json:"alias,omitempty"`
	// JSON path to the root of the api result set for forming rows.
	Path string `json:"path"`
}

// A rule indicates the action to be performed for various types of traffic flowing between workload groups.
type Rule struct {
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Define direction of traffic.
	Direction string `json:"direction,omitempty"`
	// Type of IP packet that should be matched while enforcing the rule. The value is set to IPV4_IPV6 for Layer3 rule if not specified. For Layer2/Ether rule the value must be null.
	IpProtocol string `json:"ip_protocol,omitempty"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// Holds the list of layer 7 service profile paths. These profiles accept attributes and sub-attributes of various network services (e.g. L4 AppId, encryption algorithm, domain name, etc) as key value pairs.
	Profiles []string `json:"profiles,omitempty"`
	// This is a unique 4 byte positive number that is assigned by the system.  This rule id is passed all the way down to the data path. The first 1GB (1000 to 2^30) will be shared by GM and LM with zebra style striped number space. For E.g 1000 to (1Million -1) by LM, (1M - 2M-1) by GM and so on.
	RuleId int64 `json:"rule_id,omitempty"`
	// A flag to indicate whether rule is a default rule.
	IsDefault bool `json:"is_default,omitempty"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	SourceGroups []string `json:"source_groups,omitempty"`
	// We need paths as duplicate names may exist for groups under different domains. Along with paths we support IP Address of type IPv4 and IPv6. IP Address can be in one of the format(CIDR, IP Address, Range of IP Address). In order to specify all groups, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the group array. Error will be thrown if ANY is used in conjunction with other values.
	DestinationGroups []string `json:"destination_groups,omitempty"`
	// In order to specify all services, use the constant \"ANY\". This is case insensitive. If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services,omitempty"`
	// The list of policy paths where the rule is applied LR/Edge/T0/T1/LRP etc. Note that a given rule can be applied on multiple LRs/LRPs.
	Scope []string `json:"scope,omitempty"`
	// In order to specify raw services this can be used, along with services which contains path to services. This can be empty or null.
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the destination groups. If false, the rule applies to the destination groups
	DestinationsExcluded bool `json:"destinations_excluded,omitempty"`
	// This field is used to resolve conflicts between multiple Rules under Security or Gateway Policy for a Domain If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple rules with the same sequence number then their order is not deterministic. If a specific order of rules is desired, then one has to specify unique sequence numbers or use the POST request on the rule entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// If set to true, the rule gets applied on all the groups that are NOT part of the source groups. If false, the rule applies to the source groups
	SourcesExcluded bool `json:"sources_excluded,omitempty"`
	// The action to be applied to all the services
	Action string `json:"action,omitempty"`
}

// Paged Collection of Rules
type RuleListResult struct {
	// Rule list results
	Results []Rule `json:"results"`
}

type RuleStatistics struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Aggregated number of sessions processed by all the rules This is aggregated statistic which are computed with lower frequency compared to individual generic rule  statistics. It may have a computation delay up to 15 minutes in response to this API.
	TotalSessionCount int64 `json:"total_session_count,omitempty"`
	// This is calculated by sessions count divided by age of the rule.
	PopularityIndex int64 `json:"popularity_index,omitempty"`
	// Maximum value of sessions count of all rules of the type. This is aggregated statistic which are computed with lower frequency compared to generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.
	MaxSessionCount int64 `json:"max_session_count,omitempty"`
	// Aggregated number of bytes processed by the rule.
	ByteCount int64 `json:"byte_count,omitempty"`
	// Maximum value of popularity index of all rules of the type. This is aggregated statistic which are computed with lower frequency compared to individual generic rule statistics. It may have a computation delay up to 15 minutes in response to this API.
	MaxPopularityIndex int64 `json:"max_popularity_index,omitempty"`
	// Aggregated number of sessions processed by the rule.
	SessionCount int64 `json:"session_count,omitempty"`
	// Path of the rule.
	Rule string `json:"rule,omitempty"`
	// Aggregated number of packets processed by the rule.
	PacketCount int64 `json:"packet_count,omitempty"`
	// Realized id of the rule on NSX MP. Policy Manager can create more than one rule per policy rule, in which case this identifier helps to distinguish between the multple rules created.
	InternalRuleId string `json:"internal_rule_id,omitempty"`
	// Aggregated number of hits received by the rule.
	HitCount int64 `json:"hit_count,omitempty"`
	// Path of the LR on which the section is applied in case of Edge FW.
	LrPath string `json:"lr_path,omitempty"`
}

// Rule statistics for a specfic enforcement point.
type RuleStatisticsForEnforcementPoint struct {
	// Rule statistics for a single enforcement point
	EnforcementPoint string          `json:"enforcement_point,omitempty"`
	Statistics       *RuleStatistics `json:"statistics,omitempty"`
}

// Paged Collection of rule statistics
type RuleStatisticsListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// RuleStatistics list results
	Results []RuleStatisticsForEnforcementPoint `json:"results"`
}

type RuntimeInterfaceStatistics struct {
	MacLearning              *SiMacLearningCounters      `json:"mac_learning,omitempty"`
	DroppedBySecurityPackets *SiPacketsDroppedBySecurity `json:"dropped_by_security_packets,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// Index of the interface
	InterfaceIndex int64 `json:"interface_index,omitempty"`
}

// Search response
type SearchResponse struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of records matching the search query.
	Results []interface{} `json:"results,omitempty"`
}

type GroupBySearchResponse struct {
	Results []struct {
		Count             int    `json:"count"`
		GroupByFieldValue string `json:"group_by_field_value"`
	} `json:"results"`
	ResultCount int `json:"result_count"`
}

// Ordered list of Rules.
type SecurityPolicy struct {
	defaultStruct
	// - Distributed Firewall - Policy framework provides five pre-defined categories for classifying a security policy. They are \"Ethernet\",\"Emergency\", \"Infrastructure\" \"Environment\" and \"Application\". There is a pre-determined order in which the policy framework manages the priority of these security policies. Ethernet category is for supporting layer 2 firewall rules. The other four categories are applicable for layer 3 rules. Amongst them, the Emergency category has the highest priority followed by Infrastructure, Environment and then Application rules. Administrator can choose to categorize a security policy into the above categories or can choose to leave it empty. If empty it will have the least precedence w.r.t the above four categories. - Edge Firewall - Policy Framework for Edge Firewall provides six pre-defined categories \"Emergency\", \"SystemRules\", \"SharedPreRules\", \"LocalGatewayRules\", \"AutoServiceRules\" and \"Default\", in order of priority of rules. All categories are allowed for Gatetway Policies that belong to 'default' Domain. However, for user created domains, category is restricted to \"SharedPreRules\" or \"LocalGatewayRules\" only. Also, the users can add/modify/delete rules from only the \"SharedPreRules\" and \"LocalGatewayRules\" categories. If user doesn't specify the category then defaulted to \"Rules\". System generated category is used by NSX created rules, for example BFD rules. Autoplumbed category used by NSX verticals to autoplumb data path rules. Finally, \"Default\" category is the placeholder default rules with lowest in the order of priority.
	Category string `json:"category,omitempty"`
	// A flag to indicate whether policy is a default policy.
	IsDefault bool `json:"is_default,omitempty"`
	// Indicates whether a security policy should be locked. If the security policy is locked by a user, then no other user would be able to modify this security policy. Once the user releases the lock, other users can update this security policy.
	Locked bool `json:"locked,omitempty"`
	// ID of the user who last modified the lock for the secruity policy.
	LockModifiedBy string `json:"lock_modified_by,omitempty"`
	// SecurityPolicy locked/unlocked time in epoch milliseconds.
	LockModifiedTime int64 `json:"lock_modified_time,omitempty"`
	// The count of rules in the policy.
	RuleCount int32 `json:"rule_count,omitempty"`
	// Comments for security policy lock/unlock.
	Comments string `json:"comments,omitempty"`
	// This field is to indicate the internal sequence number of a policy with respect to the policies across categories.
	InternalSequenceNumber int32 `json:"internal_sequence_number,omitempty"`
	// Stateful or Stateless nature of security policy is enforced on all rules in this security policy. When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed. Layer3 security policies can be stateful or stateless. By default, they are stateful. Layer2 security policies can only be stateless.
	Stateful bool `json:"stateful,omitempty"`
	// Provides a mechanism to apply the rules in this policy for a specified time duration.
	SchedulerPath string `json:"scheduler_path,omitempty"`
	// Ensures that a 3 way TCP handshake is done before the data packets are sent. tcp_strict=true is supported only for stateful security policies.
	TcpStrict bool `json:"tcp_strict,omitempty"`
	// The list of group paths where the rules in this policy will get applied. This scope will take precedence over rule level scope. Supported only for security and redirection policies. In case of RedirectionPolicy, it is expected only when the policy is NS and redirecting to service chain.
	Scope []string `json:"scope,omitempty"`
	// This field is used to resolve conflicts between security policies across domains. In order to change the sequence number of a policy one can fire a POST request on the policy entity with a query parameter action=revise The sequence number field will reflect the value of the computed sequence number upon execution of the above mentioned POST request. For scenarios where the administrator is using a template to update several security policies, the only way to set the sequence number is to explicitly specify the sequence number for each security policy. If no sequence number is specified in the payload, a value of 0 is assigned by default. If there are multiple policies with the same sequence number then their order is not deterministic. If a specific order of policies is desired, then one has to specify unique sequence numbers or use the POST request on the policy entity with a query parameter action=revise to let the framework assign a sequence number
	SequenceNumber int32 `json:"sequence_number,omitempty"`
	// Rules that are a part of this SecurityPolicy
	Rules []Rule `json:"rules,omitempty"`
	// This field indicates the default connectivity policy for the security policy. Based on the connectivitiy strategy, a default rule for this security policy will be created. An appropriate action will be set on the rule based on the value of the connectivity strategy. If NONE is selected or no connectivity strategy is specified, then no default rule for the security policy gets created. The default rule that gets created will be a any-any rule and applied to entities specified in the scope of the security policy. Specifying the connectivity_strategy without specifying the scope is not allowed. The scope has to be a Group and one cannot specify IPAddress directly in the group that is used as scope. This default rule is only applicable for the Layer3 security policies. WHITELIST - Adds a default drop rule. Administrator can then use \"allow\" rules (aka whitelist) to allow traffic between groups BLACKLIST - Adds a default allow rule. Admin can then use \"drop\" rules (aka blacklist) to block traffic between groups WHITELIST_ENABLE_LOGGING - Whitelising with logging enabled BLACKLIST_ENABLE_LOGGING - Blacklisting with logging enabled NONE - No default rule is created.
	ConnectivityStrategy string `json:"connectivity_strategy,omitempty"`
	// Based on the value of the connectivity strategy, a default rule is created for the security policy. The rule id is internally assigned by the system for this default rule.
	DefaultRuleId int64 `json:"default_rule_id,omitempty"`
}

// Paged Collection of security policies
type SecurityPolicyListResult struct {
	// SecurityPolicy list results
	Results []SecurityPolicy `json:"results"`
}

// Aggregate statistics of all the rules in a security policy.
type SecurityPolicyStatistics struct {
	// Realized id of the section on NSX MP. Policy Manager can create more than one section per SecurityPolicy, in which case this identifier helps to distinguish between the multiple sections created.
	InternalSectionId string `json:"internal_section_id,omitempty"`
	// Total count for rule statistics
	ResultCount int64 `json:"result_count,omitempty"`
	// List of rule statistics.
	Results []RuleStatistics `json:"results,omitempty"`
	// Path of the LR on which the section is applied in case of Gateway Firewall.
	LrPath string `json:"lr_path,omitempty"`
}

// Aggregate statistics of all the rules in a security policy for a specific enforcement point.
type SecurityPolicyStatisticsForEnforcementPoint struct {
	// Enforcement point to fetch the statistics from.
	EnforcementPoint string                    `json:"enforcement_point,omitempty"`
	Statistics       *SecurityPolicyStatistics `json:"statistics,omitempty"`
}

// Paged Collection of Security Policy statistics
type SecurityPolicyStatisticsListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Security Policy statistics list results
	Results []SecurityPolicyStatisticsForEnforcementPoint `json:"results"`
}

// Base security profile binding map
type SecurityProfileBindingMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
}

// A Security Zone establishes the policies that govern the connectivity of application tiers. While applications run in a self-service mode, the security zone policies constrain the connectivity based on the security requirements of that zone. In Policy Applications, each application tier is associated with a security zone that should be pre-created by the VHC admin.
type SecurityZone struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// PolicyPath of the sites
	Sites []string `json:"sites,omitempty"`
}

// Binding object to bind Security Zone and Application Tier
type SecurityZoneBinding struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path of the security zone.
	SecurityZonePath string `json:"security_zone_path"`
}

// A SecurityZoneRule specifies the security policy that applies to the tiers associated with the security zones.
type SecurityZoneRule struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Flag to disable the rule. Default is enabled.
	Disabled bool `json:"disabled,omitempty"`
	// Source field indicates the source path of the Rule. It could be;  - Path of the current/other zone  - One/more tiers associated with the zone  - Shared Group  - ANY (It should be the ONLY element in the services array. Error will be thrown         if ANY is used in conjunction with other values.) Note that either Source or Destination has to be associated with the current Zone.
	Source []string `json:"source"`
	// User level field which will be printed in CLI and packet logs.
	Tag string `json:"tag,omitempty"`
	// ID of the Service that is defined in Infra space. e.g. HTTPS. In order to specify all services, use the constant \"ANY\". If \"ANY\" is used, it should be the ONLY element in the services array. Error will be thrown if ANY is used in conjunction with other values.
	Services []string `json:"services"`
	// Text for additional notes on changes.
	Notes string `json:"notes,omitempty"`
	// Destination field indicates the destination path of the Rule. It could be;  - Path of the current/other zone  - One/more tiers associated with the zone  - Shared Group  - ANY (It should be the ONLY element in the services array. Error will be thrown         if ANY is used in conjunction with other values.) Note that either Source or Destination has to be associated with the current Zone.
	Destination []string `json:"destination"`
	// Flag to enable packet logging. Default is disabled.
	Logged bool `json:"logged,omitempty"`
	// The action to be applied to all the services.
	Action string `json:"action"`
	// This field is used to resolve conflicts between multiple SecurityZoneRule under same securityZone
	SequenceNumber int32 `json:"sequence_number,omitempty"`
}

// Segment configuration to attach workloads.
type Segment struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Subnet configuration. Max 1 subnet
	Subnets []SegmentSubnet `json:"subnets,omitempty"`
	// Policy path to the connecting Tier-0 or Tier-1. Valid only for segments created under Infra.
	ConnectivityPath string `json:"connectivity_path,omitempty"`
	// This property could be used for vendor specific configuration in key value string pairs, the setting in extra_configs will be automatically inheritted by segment ports in the Segment.
	ExtraConfigs   []SegmentExtraConfig   `json:"extra_configs,omitempty"`
	AdvancedConfig *SegmentAdvancedConfig `json:"advanced_config,omitempty"`
	// Static address binding used for the Segment.
	AddressBindings  []PortAddressBindingEntry     `json:"address_bindings,omitempty"`
	FederationConfig *FederationConnectivityConfig `json:"federation_config,omitempty"`
	// Mac pool id that associated with a Segment.
	MacPoolId   string `json:"mac_pool_id,omitempty"`
	DisplayName string `json:"display_name"`
	// Policy path to metadata proxy configuration. Multiple distinct MD proxies can be configured.
	MetadataProxyPaths []string `json:"metadata_proxy_paths,omitempty"`
	// VLAN ids for a VLAN backed Segment. Can be a VLAN id or a range of VLAN ids specified with '-' in between.
	VlanIds []string `json:"vlan_ids,omitempty"`
	// DNS domain name
	DomainName string `json:"domain_name,omitempty"`
	// Used for overlay connectivity of segments. The overlay_id should be allocated from the pool as definied by enforcement-point. If not provided, it is auto-allocated from the default pool on the enforcement-point.
	OverlayId int32 `json:"overlay_id,omitempty"`
	// Policy path to DHCP server or relay configuration to use for all IPv4 & IPv6 subnets configured on this segment.
	DhcpConfigPath string `json:"dhcp_config_path,omitempty"`
	// This property is deprecated. The property will continue to work as expected for existing segments. The segments that are newly created with ls_id will be ignored. Sepcify pre-creted logical switch id for Segment.
	LsId        string       `json:"ls_id,omitempty"`
	ID          string       `json:"id,omitempty"`
	UniqueId    string       `json:"unique_id"`
	L2Extension *L2Extension `json:"l2_extension,omitempty"`
	// Represents Desired state of the Segment
	AdminState string `json:"admin_state,omitempty"`
	// Multiple distinct L2 bridge profiles can be configured.
	BridgeProfiles []BridgeProfileConfig `json:"bridge_profiles,omitempty"`
	// Segment type based on configuration.
	Type_ string `json:"type,omitempty"`
	// Policy path to the transport zone. Supported for VLAN backed segments as well as Overlay Segments. This field is required for VLAN backed Segments. Auto assigned if only one transport zone exists in the enforcement point. Default transport zone is auto assigned for overlay segments if none specified.
	TransportZonePath string `json:"transport_zone_path,omitempty"`
	// If this field is not set for overlay segment, then the default of MTEP will be used.
	ReplicationMode string `json:"replication_mode,omitempty"`
}

// Advanced configuration for Segment
type SegmentAdvancedConfig struct {
	// Connectivity configuration to manually connect (ON) or disconnect (OFF) a logical entity from network topology. Only valid for Tier1 Segment.
	Connectivity string `json:"connectivity,omitempty"`
	// An ordered list of routing policies to forward traffic to the next hop.
	LocalEgressRoutingPolicies []LocalEgressRoutingEntry `json:"local_egress_routing_policies,omitempty"`
	// Enable multicast for a segment. Only applicable for segments connected to Tier0 gateway.
	Multicast bool `json:"multicast,omitempty"`
	// The name of the switching uplink teaming policy for the Segment. This name corresponds to one of the switching uplink teaming policy names listed in TransportZone associated with the Segment. See transport_zone_path property above for more details. When this property is not specified, the segment will not have a teaming policy associated with it and the host switch's default teaming policy will be used by MP.
	UplinkTeamingPolicyName string `json:"uplink_teaming_policy_name,omitempty"`
	// Policy path to IP address pools.
	AddressPoolPaths []string `json:"address_pool_paths,omitempty"`
	// When set to true, all the ports created on this segment will behave in a hybrid fashion. The hybrid port indicates to NSX that the VM intends to operate in underlay mode, but retains the ability to forward egress traffic to the NSX overlay network. This property is only applicable for segment created with transport zone type OVERLAY_STANDARD. This property cannot be modified after segment is created.
	Hybrid bool `json:"hybrid,omitempty"`
	// This property is used to enable proximity routing with local egress. When set to true, logical router interface (downlink) connecting Segment to Tier0/Tier1 gateway is configured with prefix-length 32.
	LocalEgress bool `json:"local_egress,omitempty"`
}

// Segment state on specific Enforcement Point.
type SegmentConfigurationState struct {
	// Gives details of state of desired configuration. Additional enums with more details on progress/success/error states are sent for edge node. The success states are NODE_READY and TRANSPORT_NODE_READY, pending states are {VM_DEPLOYMENT_QUEUED, VM_DEPLOYMENT_IN_PROGRESS, REGISTRATION_PENDING} and other values indicate failures. \"in_sync\" state indicates that the desired configuration has been received by the host to which it applies, but is not yet in effect. When the configuration is actually in effect, the state will change to \"success\". Please note, failed state is deprecated.
	State string `json:"state,omitempty"`
	// Array of configuration state of various sub systems
	Details []ConfigurationStateElement `json:"details,omitempty"`
	// Error code
	FailureCode int64 `json:"failure_code,omitempty"`
	// Error message in case of failure
	FailureMessage string `json:"failure_message,omitempty"`
	// Segment path
	SegmentPath string `json:"segment_path,omitempty"`
}

// DHCP IPv4 and IPv6 configurations are extended from this abstract class.
type SegmentDhcpConfig struct {
	// IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment.
	ServerAddress string `json:"server_address,omitempty"`
	// IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property.
	DnsServers []string `json:"dns_servers,omitempty"`
	// DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config.
	LeaseTime    int64  `json:"lease_time,omitempty"`
	ResourceType string `json:"resource_type"`
}

// DHCP configuration of IPv4 subnet in a segment
type SegmentDhcpV4Config struct {
	// IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment.
	ServerAddress string `json:"server_address,omitempty"`
	// IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property.
	DnsServers []string `json:"dns_servers,omitempty"`
	// DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config.
	LeaseTime    int64          `json:"lease_time,omitempty"`
	ResourceType string         `json:"resource_type"`
	Options      *DhcpV4Options `json:"options,omitempty"`
}

// DHCP configuration of IPv6 subnet in a segment
type SegmentDhcpV6Config struct {
	// IP address of the DHCP server in CIDR format. The server_address is mandatory in case this segment has provided a dhcp_config_path and it represents a DHCP server config. If this SegmentDhcpConfig is a SegmentDhcpV4Config, the address must be an IPv4 address. If this is a SegmentDhcpV6Config, the address must be an IPv6 address. This address must not overlap the ip-ranges of the subnet, or the gateway address of the subnet, or the DHCP static-binding addresses of this segment.
	ServerAddress string `json:"server_address,omitempty"`
	// IP address of DNS servers for subnet. DNS server IP address must belong to the same address family as segment gateway_address property.
	DnsServers []string `json:"dns_servers,omitempty"`
	// DHCP lease time in seconds. When specified, this property overwrites lease time configured DHCP server config.
	LeaseTime    int64  `json:"lease_time,omitempty"`
	ResourceType string `json:"resource_type"`
	// Excluded addresses to define dynamic ip allocation ranges.
	ExcludedRanges []string `json:"excluded_ranges,omitempty"`
	// IPv6 address of SNTP servers for subnet.
	SntpServers []string `json:"sntp_servers,omitempty"`
	// The length of time that a valid address is preferred. When the preferred lifetime expires, the address becomes deprecated.
	PreferredTime int64 `json:"preferred_time,omitempty"`
	// Domain names for subnet.
	DomainNames []string       `json:"domain_names,omitempty"`
	Options     *DhcpV6Options `json:"options,omitempty"`
}

// This entity will be used to establish association between discovery profile and Segment. Using this entity, user can specify intent for applying discovery profile to particular segments.
type SegmentDiscoveryProfileBindingMap struct {
	// PolicyPath of associated IP Discovery Profile
	IpDiscoveryProfilePath string `json:"ip_discovery_profile_path,omitempty"`
	// PolicyPath of associated Mac Discovery Profile
	MacDiscoveryProfilePath string `json:"mac_discovery_profile_path,omitempty"`
}

// Paged collection of Segment Discovery Profile Binding Maps
type SegmentDiscoveryProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment Discovery Profile Binding Map list results
	Results []SegmentDiscoveryProfileBindingMap `json:"results"`
}

// Segment extra config is intended for supporting vendor specific configuration on the data path, it can be set as key value string pairs on either segment or segment port.
type SegmentExtraConfig struct {
	ConfigPair *KeyValuePair `json:"config_pair"`
}

// Paged collection of Segments
type SegmentListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment list results
	Results []Segment `json:"results"`
}

// This entity will be used to establish association between monitoring profile and Segment. Using this entity, you can specify intent for applying monitoring profile to particular segment.
type SegmentMonitoringProfileBindingMap struct {
	// PolicyPath of associated IPFIX L2 Profile
	IpfixL2ProfilePath string `json:"ipfix_l2_profile_path,omitempty"`
	// PolicyPath of associated Port Mirroring Profile
	PortMirroringProfilePath string `json:"port_mirroring_profile_path,omitempty"`
}

// Paged collection of Segment Monitoring Profile Binding Maps
type SegmentMonitoringProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment Monitoring Profile Binding Map list results
	Results []SegmentMonitoringProfileBindingMap `json:"results"`
}

// Policy port will create LogicalPort on LogicalSwitch corresponding to the Segment. Address bindings cannot be removed after realization.
type SegmentPort struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Set initial state when a new logical port is created. 'UNBLOCKED_VLAN' means new port will be unblocked on traffic in creation, also VLAN will be set with corresponding logical switch setting. This port setting can only be configured at port creation, and cannot be modified.
	InitState string `json:"init_state,omitempty"`
	// Represents desired state of the segment port
	AdminState string          `json:"admin_state,omitempty"`
	Attachment *PortAttachment `json:"attachment,omitempty"`
	// This property could be used for vendor specific configuration in key value string pairs. Segment port setting will override segment setting if the same key was set on both segment and segment port.
	ExtraConfigs []SegmentExtraConfig `json:"extra_configs,omitempty"`
	// IP Discovery module uses various mechanisms to discover address bindings being used on each segment port. If a user would like to ignore any specific discovered address bindings or prevent the discovery of a particular set of discovered bindings, then those address bindings can be provided here. Currently IP range in CIDR format is not supported.
	IgnoredAddressBindings []PortAddressBindingEntry `json:"ignored_address_bindings,omitempty"`
	// Static address binding used for the port.
	AddressBindings []PortAddressBindingEntry `json:"address_bindings,omitempty"`
	// This field will refer to the source site on which the segment port is discovered. This field is populated by GM, when it receives corresponding notification from LM.
	SourceSiteId string `json:"source_site_id,omitempty"`
}

// List SegmentPort objects
type SegmentPortListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Place holder for the list result
	Results []SegmentPort `json:"results"`
}

// Segment port statistics on specific Enforcement Point.
type SegmentPortStatistics struct {
	// The id of the logical port
	LogicalPortId string `json:"logical_port_id,omitempty"`
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
}

// This entity will be used to establish association between qos profile and Segment. Using this entity, you can specify intent for applying qos profile to particular segment.
type SegmentQoSProfileBindingMap struct {
	// PolicyPath of associated  QoS Profile
	QosProfilePath string `json:"qos_profile_path,omitempty"`
}

// Paged collection of Segment QoS Profile Binding Maps
type SegmentQoSProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment QoS Profile Binding Map list results
	Results []SegmentQoSProfileBindingMap `json:"results"`
}

// Security features extended by policy operations for securing logical segments.
type SegmentSecurityProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Indicates whether BPDU filter is enabled. BPDU filtering is enabled by default.
	BpduFilterEnable bool `json:"bpdu_filter_enable,omitempty"`
	// Enable or disable Router Advertisement Guard.
	RaGuardEnabled bool `json:"ra_guard_enabled,omitempty"`
	// Filters DHCP server and/or client IPv6 traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpClientBlockV6Enabled bool `json:"dhcp_client_block_v6_enabled,omitempty"`
	// A flag to block all traffic except IP/(G)ARP/BPDU.
	NonIpTrafficBlockEnabled bool `json:"non_ip_traffic_block_enabled,omitempty"`
	// Pre-defined list of allowed MAC addresses to be excluded from BPDU filtering. List of allowed MACs - 01:80:c2:00:00:00, 01:80:c2:00:00:01, 01:80:c2:00:00:02, 01:80:c2:00:00:03,                        01:80:c2:00:00:04, 01:80:c2:00:00:05, 01:80:c2:00:00:06, 01:80:c2:00:00:07,                        01:80:c2:00:00:08, 01:80:c2:00:00:09, 01:80:c2:00:00:0a, 01:80:c2:00:00:0b,                        01:80:c2:00:00:0c, 01:80:c2:00:00:0d, 01:80:c2:00:00:0e, 01:80:c2:00:00:0f,                        00:e0:2b:00:00:00, 00:e0:2b:00:00:04, 00:e0:2b:00:00:06, 01:00:0c:00:00:00,                        01:00:0c:cc:cc:cc, 01:00:0c:cc:cc:cd, 01:00:0c:cd:cd:cd, 01:00:0c:cc:cc:c0,                        01:00:0c:cc:cc:c1, 01:00:0c:cc:cc:c2, 01:00:0c:cc:cc:c3, 01:00:0c:cc:cc:c4,                        01:00:0c:cc:cc:c5, 01:00:0c:cc:cc:c6, 01:00:0c:cc:cc:c7
	BpduFilterAllow []string `json:"bpdu_filter_allow,omitempty"`
	// Filters DHCP server and/or client traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpServerBlockEnabled bool `json:"dhcp_server_block_enabled,omitempty"`
	// Enable or disable Rate Limits
	RateLimitsEnabled bool               `json:"rate_limits_enabled,omitempty"`
	RateLimits        *TrafficRateLimits `json:"rate_limits,omitempty"`
	// Filters DHCP server and/or client traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpClientBlockEnabled bool `json:"dhcp_client_block_enabled,omitempty"`
	// Filters DHCP server and/or client IPv6 traffic. DHCP server blocking is enabled and client blocking is disabled by default.
	DhcpServerBlockV6Enabled bool `json:"dhcp_server_block_v6_enabled,omitempty"`
}

// Contains the binding relationship between segment and security profile.
type SegmentSecurityProfileBindingMap struct {
	defaultStruct
	// The policy path of the asscociated SpoofGuard profile
	SpoofguardProfilePath string `json:"spoofguard_profile_path,omitempty"`
	// The policy path of the asscociated Segment Security profile
	SegmentSecurityProfilePath string `json:"segment_security_profile_path,omitempty"`
}

// Paged collection of segment security profile binding maps
type SegmentSecurityProfileBindingMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment security profile binding map list results
	Results []SegmentSecurityProfileBindingMap `json:"results"`
}

// Paged collection of segment security profiles
type SegmentSecurityProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Segment Security profile list results
	Results []SegmentSecurityProfile `json:"results"`
}

// Segment statistics on specific Enforcement Point.
type SegmentStatistics struct {
	// Timestamp when the data was last updated; unset if data source has never updated the data.
	LastUpdateTimestamp int64 `json:"last_update_timestamp,omitempty"`
	// The id of the logical Switch
	LogicalSwitchId string `json:"logical_switch_id,omitempty"`
}

// Subnet configuration for segment
type SegmentSubnet struct {
	DhcpConfig *SegmentDhcpConfig `json:"dhcp_config,omitempty"`
	// Gateway IP address in CIDR format for both IPv4 and IPv6.
	GatewayAddress string `json:"gateway_address,omitempty"`
	// DHCP address ranges are used for dynamic IP allocation. Supports address range and CIDR formats. First valid host address from the first value is assigned to DHCP server IP address. Existing values cannot be deleted or modified, but additional DHCP ranges can be added.
	DhcpRanges []string `json:"dhcp_ranges,omitempty"`
	// Network CIDR for this subnet calculated from gateway_addresses and prefix_len.
	Network string `json:"network,omitempty"`
}

// Resources to take action on
type SelectableResourceReference struct {
	// Display name of the NSX resource.
	TargetDisplayName string `json:"target_display_name,omitempty"`
	// Will be set to false if the referenced NSX resource has been deleted.
	IsValid bool `json:"is_valid,omitempty"`
	// Identifier of the NSX resource.
	TargetId string `json:"target_id,omitempty"`
	// Type of the NSX resource.
	TargetType string `json:"target_type,omitempty"`
	// Set to true if this resource has been selected to be acted upon
	Selected bool `json:"selected"`
}

// The server will populate this field when returing the resource. Ignored on PUT and POST.
type SelfResourceLink struct {
	// Optional action
	Action string `json:"action,omitempty"`
	// Link to resource
	Href string `json:"href,omitempty"`
	// Custom relation type (follows RFC 5988 where appropriate definitions exist)
	Rel string `json:"rel,omitempty"`
}

// Used while defining a CommunicationEntry. A service may have multiple service entries.
type Service struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// The flag, if true, indicates that service is created in the system by default. Such default services can't be modified/deleted.
	IsDefault bool `json:"is_default,omitempty"`
	// Type of service, EITHER or NON_ETHER
	ServiceType string `json:"service_type,omitempty"`
	// Service type
	ServiceEntries []ServiceEntry `json:"service_entries,omitempty"`
}

// Service capabilities that will be inherited by service VMs created using a service definition that contains this service capability.
type ServiceCapability struct {
	// Indicating whether service supports NSH liveness detection.
	NshLivenessSupportEnabled bool `json:"nsh_liveness_support_enabled,omitempty"`
	// Indicating whether service is configured to decrement SI field in NSH metadata.
	CanDecrementSi bool `json:"can_decrement_si,omitempty"`
}

// A ServiceInsertionServiceProfile can be part of multiple ServiceChains. ServiceChainMapping for a particular profile will contain a list of all the ServiceChains it's part of. Each Mapping will also contain some metadata to uniquely identify a profile from other profiles.
type ServiceChainMapping struct {
	// A unique id generated for every ServiceChain. This is not a uuid.
	ServiceChainId string `json:"service_chain_id,omitempty"`
	// Each ServiceChain has forward_path_service_profiles and reverse_path_service_profiles. This property will indicate which of them being used. FORWARD - forward_path_service_profiles REVERSE - reverse_path_service_profiles
	Direction string `json:"direction,omitempty"`
	// Service Index represents a numerical position of a ServiceInsertionServiceProfile in a ServiceChain. It will be in reverse order. Service Index can point to either forward_path_service_profiles or reverse_path_service_profiles indicated by direction property. Example - For a ServiceChain A-B-C, A will have index of 3, B will have index of 2 and C will have index of 1.
	ServiceIndex int64 `json:"service_index,omitempty"`
}

// Service Chain Mapping List
type ServiceChainMappingListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of the Service Chain Mappings. The list has to be homogenous.
	Results []ServiceChainMapping `json:"results,omitempty"`
}

// Registering a Service is the first step in the ServiceInsertion mechanism. A ServiceDefinition is used to create a service.
type ServiceDefinition struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType          string                 `json:"resource_type,omitempty"`
	ServiceDeploymentSpec *ServiceDeploymentSpec `json:"service_deployment_spec,omitempty"`
	ServiceCapability     *ServiceCapability     `json:"service_capability,omitempty"`
	// The capabilities provided by the services. Needs to be one or more of the following | NG_FW - Next Generation Firewall | IDS_IPS - Intrusion detection System / Intrusion Prevention System | NET_MON - Network Monitoring | HCX - Hybrid Cloud Exchange | BYOD - Bring Your Own Device | EPP - Endpoint Protection.(Third party AntiVirus partners using NXGI should use this functionality for the service)
	Functionalities []string `json:"functionalities"`
	// The point at which the service is deployed/attached for redirecting the traffic to the the partner appliance. Attachment Point is required if Service caters to any functionality other than EPP.
	AttachmentPoint []string `json:"attachment_point,omitempty"`
	// ID of the service manager to which this service is attached with. This field is not set during creation of service. This field will be set explicitly when Service Manager is created successfully using this service.
	ServiceManagerId string `json:"service_manager_id,omitempty"`
	// Id which is unique to a vendor or partner for which the service is created.
	VendorId string `json:"vendor_id"`
	// Failure policy for the service tells datapath, the action to take i.e to Allow or Block traffic during failure scenarios. For north-south ServiceInsertion, failure policy in the service instance takes precedence. For east-west ServiceInsertion, failure policy in the service chain takes precedence. BLOCK is not supported for Endpoint protection (EPP) functionality.
	OnFailurePolicy string `json:"on_failure_policy,omitempty"`
	// Transport Type of the service, which is the mechanism of redirecting the traffic to the the partner appliance. Transport type is required if Service caters to any functionality other than EPP.
	Transports []string `json:"transports,omitempty"`
	// This indicates the insertion point of the service i.e whether the service will be used to protect North-South or East-West traffic in the datacenter.
	Implementations []string `json:"implementations"`
}

// ServiceDeployment Spec consists of information required to deploy and configure the partner appliances. viz. Deployment template, deployment spec and NIC metatdata.
type ServiceDeploymentSpec struct {
	// Deployment Specs holds information required to deploy the Service-VMs. i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF can be deployed, Form factor to name a few.
	DeploymentSpecs []SvmDeploymentSpec `json:"deployment_specs,omitempty"`
	// NIC metadata associated with the deployment spec.
	NicMetadataList []NicMetadata `json:"nic_metadata_list,omitempty"`
	// Deployment Template holds the attributes specific to partner for which the service is created. These attributes are opaque to NSX Manager.
	DeploymentTemplate []DeploymentTemplate `json:"deployment_template"`
	// Partner needs to specify the Service VM version which will get deployed.
	SvmVersion string `json:"svm_version,omitempty"`
}

// A Service entry that describes traffic
type ServiceEntry struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool   `json:"marked_for_delete,omitempty"`
	ResourceType    string `json:"resource_type"`
}

// Paged Collection of Service entries
type ServiceEntryListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service entry list results
	Results []ServiceEntry `json:"results"`
}

// Service List
type ServiceInsertionServiceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List of the Service-Insertion Services. The list has to be homogenous.
	Results []ServiceDefinition `json:"results,omitempty"`
}

// A ServiceInstanceEndpoint belongs to one ByodPolicyServiceInstance and is attached to one ServiceInterface. A ServiceInstanceEndpoint represents a redirection target for a RedirectionPolicy.
type ServiceInstanceEndpoint struct {
	// IPs where either inbound or outbound traffic is to be redirected.
	TargetIps    []IpInfo `json:"target_ips"`
	ResourceType string   `json:"resource_type"`
	// Path of Service Interface to which this ServiceInstanceEndpoint is connected.
	ServiceInterfacePath string `json:"service_interface_path"`
}

// Paged Collection of ServiceInstanceEndpoint
type ServiceInstanceEndpointListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// ServiceInstanceEndpoint list results
	Results []ServiceInstanceEndpoint `json:"results"`
}

// Service interface configuration for internal connectivity.
type ServiceInterface struct {
	// Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet `json:"subnets"`
}

// Paged collection of Service Interfaces
type ServiceInterfaceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service Interface list results
	Results []ServiceInterface `json:"results"`
}

// Paged Collection of Services
type ServiceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service list results
	Results []Service `json:"results"`
}

// ServiceProfileGroups contains list of Groups referenced in Service Insertion Rules.To be considered, Service profile must be part of a Service chain and that Service chain must be used in a Rule.
type ServiceProfileGroups struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// List of Groups Used in ServiceInsertion Rules.
	Groups []GroupInfo `json:"groups,omitempty"`
}

// An anchor object representing the intent to consume a given 3rd party service.
type ServiceReference struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Unique name of Partner Service to be consumed for redirection.
	PartnerServiceName string `json:"partner_service_name"`
	// A Service's operational state can be enabled or disabled. Note that would work only for NetX type of services and would not work for Guest Introsp- ection type of Services. TRUE - The Service should be enabled FALSE - The Service should be disabled
	Enabled bool `json:"enabled,omitempty"`
}

// Service Reference List
type ServiceReferenceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service Reference list results
	Results []ServiceReference `json:"results"`
}

// Service Segment configuration to attach Service Insertion VM.
type ServiceSegment struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy path to transport zone. Only overlay transport zone is supported.
	TransportZonePath string `json:"transport_zone_path"`
	// Policy paths of logical routers or ports | to which this Service Segment can be connected.
	LrPaths []string `json:"lr_paths,omitempty"`
}

// Paged collection of Service Segment
type ServiceSegmentListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Service Segment list results
	Results []ServiceSegment `json:"results"`
}

// Paged Collection of session timer profile binding maps
type SessionTimerProfileBindingListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Session timer profile binding maps list results
	Results []SessionTimerProfileBindingMap `json:"results"`
}

// This entity will be used to establish association between Session Timer profile and Logical Routers.
type SessionTimerProfileBindingMap struct {
	// PolicyPath of associated Profile
	ProfilePath string `json:"profile_path"`
}

// Set Fields is an action to set fields of the source event.
type SetFields struct {
	// Reaction Action resource type.
	ResourceType string `json:"resource_type"`
	// Field Settings.
	FieldSettings []FieldSetting `json:"field_settings,omitempty"`
}

type SiAggregatedDataCounter struct {
	TxBytes   *SiDataCounter `json:"tx_bytes,omitempty"`
	RxPackets *SiDataCounter `json:"rx_packets,omitempty"`
	TxPackets *SiDataCounter `json:"tx_packets,omitempty"`
	RxBytes   *SiDataCounter `json:"rx_bytes,omitempty"`
}

type SiAggregatedDataCounterEx struct {
	TxBytes                  *SiDataCounter              `json:"tx_bytes,omitempty"`
	RxPackets                *SiDataCounter              `json:"rx_packets,omitempty"`
	TxPackets                *SiDataCounter              `json:"tx_packets,omitempty"`
	RxBytes                  *SiDataCounter              `json:"rx_bytes,omitempty"`
	MacLearning              *SiMacLearningCounters      `json:"mac_learning,omitempty"`
	DroppedBySecurityPackets *SiPacketsDroppedBySecurity `json:"dropped_by_security_packets,omitempty"`
}

type SiDataCounter struct {
	// The total packets or bytes
	Total int64 `json:"total"`
	// The multicast and broadcast packets or bytes
	MulticastBroadcast int64 `json:"multicast_broadcast,omitempty"`
	// The dropped packets or bytes
	Dropped int64 `json:"dropped,omitempty"`
}

type SiMacLearningCounters struct {
	// Number of MACs learned
	MacsLearned int64 `json:"macs_learned,omitempty"`
	// The number of packets with unknown source MAC address that are dropped without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_DROP.
	MacNotLearnedPacketsDropped int64 `json:"mac_not_learned_packets_dropped,omitempty"`
	// The number of packets with unknown source MAC address that are dispatched without learning the source MAC address. Applicable only when the MAC limit is reached and MAC Limit policy is MAC_LEARNING_LIMIT_POLICY_ALLOW.
	MacNotLearnedPacketsAllowed int64 `json:"mac_not_learned_packets_allowed,omitempty"`
}

type SiPacketTypeAndCounter struct {
	// The number of packets.
	Counter int64 `json:"counter"`
	// The type of the packets
	PacketType string `json:"packet_type"`
}

type SiPacketsDroppedBySecurity struct {
	// The packets dropped by \"Spoof Guard\"; supported packet types are IPv4, IPv6, ARP, ND, non-IP.
	SpoofGuardDropped []SiPacketTypeAndCounter `json:"spoof_guard_dropped,omitempty"`
	// The number of IPv4 packets dropped by \"DHCP server block\".
	DhcpServerDroppedIpv4 int64 `json:"dhcp_server_dropped_ipv4,omitempty"`
	// The number of IPv6 packets dropped by \"DHCP server block\".
	DhcpServerDroppedIpv6 int64 `json:"dhcp_server_dropped_ipv6,omitempty"`
	// The number of IPv4 packets dropped by \"DHCP client block\".
	DhcpClientDroppedIpv4 int64 `json:"dhcp_client_dropped_ipv4,omitempty"`
	// The number of packets dropped by \"BPDU filter\".
	BpduFilterDropped int64 `json:"bpdu_filter_dropped,omitempty"`
	// The number of IPv6 packets dropped by \"DHCP client block\".
	DhcpClientDroppedIpv6 int64 `json:"dhcp_client_dropped_ipv6,omitempty"`
}

// Site represents an NSX deployment having its own set of NSX clusters and transport nodes. It may correspond to a Data Center, VMC deployment, or NSX-Cloud deployment managed via CSM.
type Site struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete  bool                    `json:"marked_for_delete,omitempty"`
	FederationConfig *GmFederationSiteConfig `json:"federation_config,omitempty"`
	// Fail onboarding if maximum RTT exceeded.
	FailIfRttExceeded bool `json:"fail_if_rtt_exceeded,omitempty"`
	// 12-bit system generated site number
	SiteNumber int64 `json:"site_number,omitempty"`
	// If provided and fail_if_rtt_exceeded is true, onboarding of the site will fail if measured RTT is greater than this value.
	MaximumRtt int64 `json:"maximum_rtt,omitempty"`
	// Both the local site and the remote site must have edge clusters correctly configured and remote tunnel endpoint (RTEP) interfaces must be defined, or onboarding will fail.
	FailIfRtepMisconfigured bool `json:"fail_if_rtep_misconfigured,omitempty"`
	// To onboard a site, the connection information (username, password, and API thumbprint) for at least one NSX manager node in the remote site must be provided. Once the site has been successfully onboarded, the site_connection_info is discarded and authentication to the remote site occurs using an X.509 client certificate.
	SiteConnectionInfo []SiteNodeConnectionInfo `json:"site_connection_info,omitempty"`
}

// Index for cross site allocation for edge cluster and its members referred by gateway.
type SiteAllocationIndexForEdge struct {
	// Unqiue edge cluster node index across sites based on stretch of the Gateway. For example, if a Gateway is streched to sites S1 with one edge cluster of 3 nodes and site S2 with one edge cluster of 2 nodes, the in the Global Manager will allocate the index for 5 edge nodes and 2 cluster in the rage 0 to 7.
	Index int64 `json:"index,omitempty"`
	// Edge cluster or edge node path
	TargetResourcePath string `json:"target_resource_path,omitempty"`
}

// Site fedeation configuration.
type SiteFederationConfig struct {
	// Site path
	SitePath string `json:"site_path,omitempty"`
	// Unique site index allocated (from range 0-4095)
	SiteIndex int64 `json:"site_index,omitempty"`
	// Site UUID
	SiteId string `json:"site_id,omitempty"`
	// Remote tunnel endpoint IP addresses
	RtepIps []string `json:"rtep_ips,omitempty"`
}

// Information related to Sites applicable for given VHC.
type SiteInfo struct {
	// For the local manager this needs to be set to 'default'. This represents the path of the site which is managed by Global Manager.
	SitePath string `json:"site_path"`
	// The transport zone has to be set when creating VHC on Local manager. If not set for local manager, default transport zone will be used. For the Global Manager the transport zone path will be picked up from the site.
	TransportZonePaths []string `json:"transport_zone_paths,omitempty"`
	// The edge cluster on which the networking elements for the VHC will be created.
	EdgeClusterPaths []string `json:"edge_cluster_paths"`
}

// Paged Collection of Sites.
type SiteListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Site list result.
	Results []Site `json:"results"`
}

// Credential info to connect to a node in the federated remote site.
type SiteNodeConnectionInfo struct {
	// Username to connect to Site's Local Manager.
	Username string `json:"username,omitempty"`
	// Password to connect to Site's Local Manager.
	Password string `json:"password,omitempty"`
	// Please specify the fqdn of the Management Node of your site.
	Fqdn string `json:"fqdn"`
	// Thumbprint of Site's Local Manager in the form of a SHA-256 hash represented in lower case HEX.
	Thumbprint string `json:"thumbprint,omitempty"`
}

// Represents site offboarding status.
type SiteOffBoardingState struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Represents site offboarding status.
	Status string `json:"status,omitempty"`
	// Captures message associated with status. If FAILED, can contain folowing errors local site configuration is null internal server error with detail
	Message string `json:"message,omitempty"`
}

// Source that is logically deemed to be the \"object\" upon which the Event in question initially occurred upon. The Source is responsible for providing information of the occurred event. Some example sources include: - Resource. - API.
type Source struct {
	// Event Source resource type.
	ResourceType string `json:"resource_type"`
}

// Source Field Evaluation represents an evaluation on resource fields. A source field evaluation will be evaluated against an Event Source which is of type Resource Operation. For instance, the attribute constraint could be related to the necessity that one of the source fields equals one of the specified values.
type SourceFieldEvaluation struct {
	// Criterion Evaluation resource type.
	ResourceType string `json:"resource_type"`
	// Logical operator.
	Operator string `json:"operator"`
	// Expected values necessary to apply the specified operation on the source field value.
	Expected []string `json:"expected"`
	// Field in the form of a pointer, describing the location of the attribute within the source of the event.
	FieldPointer string `json:"field_pointer"`
}

// Represents the strech information for a federated entity available only on local manager.
type Span struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Policy resource type of the streached entity.
	SpanResourceType string `json:"span_resource_type,omitempty"`
	// Represents Policy resource path of streached entity.
	SpanResource string `json:"span_resource,omitempty"`
	// List of SpanSiteInfos representing the strech of the entity.
	Sites []SpanSiteInfo `json:"sites,omitempty"`
	// Represents Policy resource type streached entity's span leader.
	SpanLeader string `json:"span_leader,omitempty"`
}

// Represents the Site resource information for a Span entity including both the internal id as well as the site path.
type SpanSiteInfo struct {
	// Path of the Site resource
	SitePath string `json:"site_path,omitempty"`
	// Site UUID representing the Site resource
	SiteId string `json:"site_id,omitempty"`
}

// SpoofGuard is a tool that is designed to prevent virtual machines in your environment from sending traffic with IP addresses which are not authorized to send traffic from. A SpoofGuard policy profile once enabled blocks the traffic determined to be spoofed.
type SpoofGuardProfile struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If true, enable the SpoofGuard, which only allows VM sending traffic with the IPs in the whitelist.
	AddressBindingWhitelist bool `json:"address_binding_whitelist"`

	ID          string `json:"id"`
	UniqueID    string `json:"unique_id"`
	DisplayName string `json:"display_name"`
}

// Paged collection of SpoofGuard profiles
type SpoofGuardProfileListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// SpoofGuard profile list results
	Results []SpoofGuardProfile `json:"results"`
}

type SslTrustObjectData struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Key algorithm contained in this certificate
	KeyAlgo string `json:"key_algo,omitempty"`
	// private key data
	PrivateKey string `json:"private_key,omitempty"`
	// Password for private key encryption
	Passphrase string `json:"passphrase,omitempty"`
	// pem encoded certificate data
	PemEncoded string `json:"pem_encoded"`
}

// Idfw configuration for enable/disable idfw on standalone hosts.
type StandaloneHostIdfwConfiguration struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// If set to true, Idfw is enabled for standalone hosts
	IdfwEnabled bool `json:"idfw_enabled"`
}

// Displayed as a single number. It can be used to show the characteristics of entities such as Logical Switches, Firewall Rules, and so on. For example, number of logical switches and their admin states.
type StatItem struct {
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// If expression for total is specified, it evaluates it. Total can be omitted if not needed to be shown.
	Total string `json:"total,omitempty"`
	// Multi-line text to be shown on tooltip while hovering over the stat.
	Tooltip []Tooltip `json:"tooltip,omitempty"`
	// Expression for stat to be displayed.
	Value string `json:"value"`
}

// Contains Static ARP configuration for Segment.
type StaticArpConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// IP Address
	IpAddress string `json:"ip_address"`
	// MAC Address
	MacAddress string `json:"mac_address"`
}

// Static filters
type StaticFilter struct {
	// display name to be shown in the drop down for static filter.
	DisplayName string `json:"display_name,omitempty"`
	// Value of static filter inside dropdown filter.
	Value string `json:"value,omitempty"`
}

// Static Route Bidirectional Forwarding Detection Peer
type StaticRouteBfdPeer struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Bfd Profile is not supported for IPv6 networks.
	BfdProfilePath string `json:"bfd_profile_path,omitempty"`
	// Only IPv4 addresses are supported. Only a single BFD config per peer address is allowed.
	PeerAddress string `json:"peer_address"`
	// Array of Tier0 external interface IP addresses. BFD peering is established from all these source addresses to the neighbor specified in peer_address. Only IPv4 addresses are supported.
	SourceAddresses []string `json:"source_addresses,omitempty"`
	// Flag to enable BFD peer.
	Enabled bool `json:"enabled,omitempty"`
	// Represents the array of policy paths of locale services where this BFD peer should get relalized on. The locale service service and this BFD peer must belong to the same router. Default scope is empty.
	Scope []string `json:"scope,omitempty"`
}

// Paged collection of StaticRouteBfdPeer.
type StaticRouteBfdPeerListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// StaticRouteBfdPeer list results.
	Results []StaticRouteBfdPeer `json:"results"`
}

// Static routes configuration on Tier-0 or Tier-1.
type StaticRoutes struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Specify next hop routes for network.
	NextHops []RouterNexthop `json:"next_hops"`
	// Specify network address in CIDR format.
	Network string `json:"network"`
	// When false or by default northbound routes are configure only on primary site and not on secondary. When true, static route will be pushed to secondary even if its locale operation mode is secondary.
	EnabledOnSecondary bool `json:"enabled_on_secondary,omitempty"`
}

// Paged collection of Static Routes
type StaticRoutesListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Static Routes list results
	Results []StaticRoutes `json:"results"`
}

// Represents configuration of a statistic for an entity. Example, number of logical switches and their admin states.
type StatsConfiguration struct {
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Hyperlink of the specified UI page that provides details.
	Navigation string    `json:"navigation,omitempty"`
	Stat       *StatItem `json:"stat,omitempty"`
	// Sections
	Sections []DonutSection `json:"sections,omitempty"`
	// A sub-type of StatsConfiguration. If sub-type is not specified the parent type is rendered. The COMPACT sub_type, conserves the space for the widget. The statistic is placed on the right side on top of the status bar and the title of the widget is placed on the left side on the top of the status bar. The COMPACT style aligns itself horizontally as per the width of the container. If multiple widgets are placed insided the container then the widgets are placed one below the other to conserve the space.
	SubType string `json:"sub_type,omitempty"`
	Label   *Label `json:"label,omitempty"`
}

// Deployment Specs holds information required to deploy the Service-VMs.i.e. OVF url where the partner Service-VM OVF is hosted. The host type on which the OVF(Open Virtualization Format) can be deployed, Form factor to name a few.
type SvmDeploymentSpec struct {
	// Location of the partner VM OVF to be deployed.
	OvfUrl string `json:"ovf_url"`
	// Deployment Spec name for ease of use, since multiple DeploymentSpec can be specified.
	Name string `json:"name,omitempty"`
	// Minimum host version supported by this ovf. If a host in the deployment cluster is having version less than this, then service deployment will not happen on that host.
	MinHostVersion string `json:"min_host_version,omitempty"`
	// Supported ServiceInsertion Form Factor for the OVF deployment. The default FormFactor is Medium.
	ServiceFormFactor string `json:"service_form_factor,omitempty"`
	// Host Type on which the specified OVF can be deployed.
	HostType string `json:"host_type"`
	// Partner needs to specify the Service VM version which will get deployed.
	SvmVersion string `json:"svm_version,omitempty"`
}

// Arbitrary key-value pairs that may be attached to an entity
type Tag struct {
	// Tag searches may optionally be restricted by scope
	Scope string `json:"scope,omitempty"`
	// Identifier meaningful to user with maximum length of 256 characters
	Tag string `json:"tag,omitempty"`
}

// Tag and resource information on which tag to be applied or removed.
type TagBulkOperation struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// List of resources on which tag needs to be applied
	ApplyTo []ResourceInfo `json:"apply_to,omitempty"`
	Tag     *Tag           `json:"tag"`
	// List of resources from which tag needs to be removed
	RemoveFrom []ResourceInfo `json:"remove_from,omitempty"`
}

// Status of tag bulk operation
type TagBulkOperationStatus struct {
	// Overall status
	Status string `json:"status"`
	// Intent path corresponding to tag operation
	Path string `json:"path"`
	// Tag apply operation status per resource type.
	ApplyTo []ResourceTypeTagStatus `json:"apply_to,omitempty"`
	Tag     *Tag                    `json:"tag"`
	// Tag remove operation status per resource type
	RemoveFrom []ResourceTypeTagStatus `json:"remove_from,omitempty"`
}

// Information about arbitrary key-value pairs that may be attached to an entity
type TagInfo struct {
	// Tag searches may optionally be restricted by scope
	Scope string `json:"scope,omitempty"`
	// Identifier meaningful to user with maximum length of 256 characters
	Tag string `json:"tag,omitempty"`
	// Number of objects with assigned with matching scope and tag values
	TaggedObjectsCount int32 `json:"tagged_objects_count,omitempty"`
}

// Paged Collection of Tags
type TagInfoListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tag info list results
	Results []TagInfo `json:"results"`
}

// Task query results
type TaskListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Task property results
	Results []TaskProperties `json:"results"`
}

// Task properties
type TaskProperties struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// Current status of the task
	Status string `json:"status,omitempty"`
	// True if response for asynchronous request is available
	AsyncResponseAvailable bool `json:"async_response_available,omitempty"`
	// Description of the task
	Description string `json:"description,omitempty"`
	// The start time of the task in epoch milliseconds
	StartTime int64 `json:"start_time,omitempty"`
	// True if this task can be canceled
	Cancelable bool `json:"cancelable,omitempty"`
	// HTTP request method
	RequestMethod string `json:"request_method,omitempty"`
	// Name of the user who created this task
	User string `json:"user,omitempty"`
	// Task progress if known, from 0 to 100
	Progress int64 `json:"progress,omitempty"`
	// A message describing the disposition of the task
	Message string `json:"message,omitempty"`
	// URI of the method invocation that spawned this task
	RequestUri string `json:"request_uri,omitempty"`
	// Identifier for this task
	Id string `json:"id,omitempty"`
	// The end time of the task in epoch milliseconds
	EndTime int64 `json:"end_time,omitempty"`
}

type TcpHeader struct {
	// TCP flags (9bits)
	TcpFlags int64 `json:"tcp_flags,omitempty"`
	// Source port of tcp header
	SrcPort int64 `json:"src_port,omitempty"`
	// Destination port of tcp header
	DstPort int64 `json:"dst_port,omitempty"`
}

// TCP MSS Clamping Direction and Value.
type TcpMaximumSegmentSizeClamping struct {
	// MSS defines the maximum amount of data that a host is willing to accept in a single TCP segment. This field is set in TCP header during connection establishment. To avoid packet fragmentation, you can set this field depending on uplink MTU and VPN overhead. This is an optional field and in case it is left unconfigured, best possible MSS value will be calculated based on effective mtu of uplink interface. Supported MSS range is 216 to 8960.
	MaxSegmentSize int64 `json:"max_segment_size,omitempty"`
	// Specifies the traffic direction for which to apply MSS Clamping.
	Direction string `json:"direction,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over TCP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified  number of consecutive successful healthchecks (rise_count) will bring  the member back to UP state. After a healthcheck is initiated, if it  does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type TcpPolicyLbMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount    int64  `json:"rise_count,omitempty"`
	ResourceType string `json:"resource_type"`
}

// Virtual server acts as a facade to an application, receives all client connections over TCP and distributes them among the backend servers.
type TcpPolicyLbVirtualServer struct {
	// If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath string `json:"router_path"`
	// Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile string `json:"lb_persistence_profile,omitempty"`
	TrafficSource        string `json:"traffic_source,omitempty"`
	// Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers.
	IpAddress string `json:"ip_address"`
	// Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range.
	Ports        []string `json:"ports"`
	ResourceType string   `json:"resource_type"`
}

// Tier-0 configuration for external connectivity.
type Tier0 struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete  bool                     `json:"marked_for_delete,omitempty"`
	FederationConfig *FederationGatewayConfig `json:"federation_config,omitempty"`
	// Indicates if logging should be enabled for the default whitelisting rule. This filed is deprecated and recommended to change Rule logging filed. Note that this filed is not synchornied with default logging field.
	DefaultRuleLogging bool `json:"default_rule_logging,omitempty"`
	// Determines the behavior when a Tier-0 instance in ACTIVE-STANDBY high-availability mode restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. This property is not used when the ha_mode property is set to ACTIVE_ACTIVE. Only applicable when edge cluster is configured in Tier0 locale-service.
	FailoverMode string          `json:"failover_mode,omitempty"`
	VrfConfig    *Tier0VrfConfig `json:"vrf_config,omitempty"`
	// Disable or enable gateway fiewall.
	DisableFirewall bool `json:"disable_firewall,omitempty"`
	// Specify subnets that are used to assign addresses to logical links connecting service routers and distributed routers. Only IPv4 addresses are supported. When not specified, subnet 169.254.0.0/24 is assigned by default in ACTIVE_ACTIVE HA mode or 169.254.0.0/28 in ACTIVE_STANDBY mode.
	InternalTransitSubnets []string `json:"internal_transit_subnets,omitempty"`
	// Specify transit subnets that are used to assign addresses to logical links connecting tier-0 and tier-1s. Both IPv4 and IPv6 addresses are supported. When not specified, subnet 100.64.0.0/16 is configured by default.
	TransitSubnets []string `json:"transit_subnets,omitempty"`
	// Specify high-availability mode for Tier-0. Default is ACTIVE_ACTIVE. When ha_mode is changed from ACTIVE_ACTIVE to ACTIVE_STANDBY, inter SR iBGP (in BGP) is disabled. Changing ha_mode from ACTIVE_STANDBY to ACTIVE_ACTIVE will enable inter SR iBGP (in BGP) and previously configured preferred edge nodes (in Tier0 locale-service) are removed.
	HaMode string `json:"ha_mode,omitempty"`
	// This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting bool                    `json:"force_whitelisting,omitempty"`
	IntersiteConfig   *IntersiteGatewayConfig `json:"intersite_config,omitempty"`
	// If you are using EVPN service, then route distinguisher administrator address should be defined if you need auto generation of route distinguisher on your VRF configuration.
	RdAdminField string `json:"rd_admin_field,omitempty"`
	// IPv6 NDRA and DAD profiles configuration on Tier0. Either or both NDRA and/or DAD profiles can be configured.
	Ipv6ProfilePaths []string `json:"ipv6_profile_paths,omitempty"`
	// DHCP configuration for Segments connected to Tier-0. DHCP service is configured in relay mode.
	DhcpConfigPaths []string `json:"dhcp_config_paths,omitempty"`
}

// Binding of Tier-0 to the enforcement point.
type Tier0DeploymentMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path of enforcement point on which Tier-0 shall be deployed.
	EnforcementPoint string `json:"enforcement_point"`
}

// Paged collection of Tier-0 Deployment Map.
type Tier0DeploymentMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier-0 Deployment Maps.
	Results []Tier0DeploymentMap `json:"results"`
}

// Tier0 gateway state
type Tier0GatewayState struct {
	// IPv6 DAD status for interfaces configured on Tier0
	Ipv6Status  []IPv6Status         `json:"ipv6_status,omitempty"`
	Tier0State  *LogicalRouterState  `json:"tier0_state,omitempty"`
	Tier0Status *LogicalRouterStatus `json:"tier0_status,omitempty"`
	// String Path of the enforcement point. When not specified, routes from all enforcement-points are returned.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Tier0 HA VIP Config
type Tier0HaVipConfig struct {
	// Policy paths to Tier0 external interfaces which are to be paired to provide redundancy. Floating IP will be owned by one of these interfaces depending upon which edge node is Active.
	ExternalInterfacePaths []string `json:"external_interface_paths"`
	// Array of IP address subnets which will be used as floating IP addresses.
	VipSubnets []InterfaceSubnet `json:"vip_subnets"`
	// Flag to enable this HA VIP config.
	Enabled bool `json:"enabled,omitempty"`
}

// Tier-0 interface configuration for external connectivity.
type Tier0Interface struct {
	// Specify IP address and network prefix for interface.
	Subnets   []InterfaceSubnet        `json:"subnets"`
	Multicast *Tier0InterfacePimConfig `json:"multicast,omitempty"`
	// Specify logical switch to which tier-0 interface is connected for external access. This property is deprecated, use segment_path instead. Both properties cannot be used together.
	LsId string `json:"ls_id,omitempty"`
	// Configuration IPv6 NDRA profile. Only one NDRA profile can be configured.
	Ipv6ProfilePaths []string `json:"ipv6_profile_paths,omitempty"`
	// Specify association of interface with edge cluster member. This property is deprecated, use edge_path instead. When both properties are specifed, only edge_path property is used.
	EdgeClusterMemberIndex int32 `json:"edge_cluster_member_index,omitempty"`
	// Unicast Reverse Path Forwarding mode
	UrpfMode string `json:"urpf_mode,omitempty"`
	// Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit.
	Mtu int32 `json:"mtu,omitempty"`
	// Interface type
	Type_ string `json:"type,omitempty"`
	// Vlan id.
	AccessVlanId int64 `json:"access_vlan_id,omitempty"`
	// Policy path to edge node to handle external connectivity. Required when interface type is EXTERNAL.
	EdgePath string `json:"edge_path,omitempty"`
	// Specify Segment to which this interface is connected to. Either segment_path or ls_id property is required.
	SegmentPath string `json:"segment_path,omitempty"`
}

// Paged collection of Tier-0 Interfaces
type Tier0InterfaceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier-0 Interface list results
	Results []Tier0Interface `json:"results"`
}

// Multicast PIM configuration.
type Tier0InterfacePimConfig struct {
	// enable/disable PIM configuration.
	Enabled bool `json:"enabled,omitempty"`
}

// Paged collection of Tier-0s
type Tier0ListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier-0 list results
	Results []Tier0 `json:"results"`
}

// RouteMap for redistributing routes to BGP and other routing protocols
type Tier0RouteMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Ordered list of route map entries.
	Entries []RouteMapEntry `json:"entries"`
}

// Paged collection of RouteMaps
type Tier0RouteMapListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier0RouteMap results
	Results []Tier0RouteMap `json:"results"`
}

// Route Redistribution config
type Tier0RouteRedistributionConfig struct {
	// List of redistribution rules.
	RedistributionRules []Tier0RouteRedistributionRule `json:"redistribution_rules,omitempty"`
	// Flag to enable route redistribution for BGP.
	BgpEnabled bool `json:"bgp_enabled,omitempty"`
}

// Single route redistribution rule
type Tier0RouteRedistributionRule struct {
	// Route map to be associated with the redistribution rule
	RouteMapPath string `json:"route_map_path,omitempty"`
	// Rule name
	Name string `json:"name,omitempty"`
	// List of redistribution types
	RouteRedistributionTypes []string `json:"route_redistribution_types"`
}

// Tier-0 vrf configuration.
type Tier0VrfConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Route targets.
	RouteTargets []VrfRouteTargets `json:"route_targets,omitempty"`
	// L3 VNI associated with the VRF for overlay traffic. VNI must be unique and belong to configured VNI pool.
	EvpnTransitVni int32 `json:"evpn_transit_vni,omitempty"`
	// Default tier0 path. Cannot be modified after realization.
	Tier0Path string `json:"tier0_path"`
	// Route distinguisher. ASN:<number> or IPAddress:<number>.
	RouteDistinguisher string `json:"route_distinguisher,omitempty"`
}

// Tier-1 instance configuration.
type Tier1 struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete  bool                     `json:"marked_for_delete,omitempty"`
	FederationConfig *FederationGatewayConfig `json:"federation_config,omitempty"`
	// Indicates if logging should be enabled for the default whitelisting rule. This filed is deprecated and recommended to change Rule logging filed. Note that this filed is not synchornied with default logging field.
	DefaultRuleLogging bool `json:"default_rule_logging,omitempty"`
	// Route advertisement rules and filtering
	RouteAdvertisementRules []RouteAdvertisementRule `json:"route_advertisement_rules,omitempty"`
	// Supports edge node allocation at different sizes for routing and load balancer service to meet performance and scalability requirements.   ROUTING: Allocate edge node to provide routing services.   LB_SMALL, LB_MEDIUM, LB_LARGE, LB_XLARGE: Specify size of load balancer service that will be configured on TIER1 gateway.
	PoolAllocation string `json:"pool_allocation,omitempty"`
	// Specify Tier-1 connectivity to Tier-0 instance.
	Tier0Path string `json:"tier0_path,omitempty"`
	// Flag to enable standby service router relocation. Standby relocation is not enabled until edge cluster is configured for Tier1.
	EnableStandbyRelocation bool `json:"enable_standby_relocation,omitempty"`
	// Disable or enable gateway fiewall.
	DisableFirewall bool `json:"disable_firewall,omitempty"`
	// Determines the behavior when a Tier-1 instance restarts after a failure. If set to PREEMPTIVE, the preferred node will take over, even if it causes another failure. If set to NON_PREEMPTIVE, then the instance that restarted will remain secondary. Only applicable when edge cluster is configured in Tier1 locale-service.
	FailoverMode string `json:"failover_mode,omitempty"`
	// This filed is deprecated and recommended to change Rule action filed. Note that this filed is not synchornied with default rule field.
	ForceWhitelisting bool                    `json:"force_whitelisting,omitempty"`
	IntersiteConfig   *IntersiteGatewayConfig `json:"intersite_config,omitempty"`
	// DHCP configuration for Segments connected to Tier-1. DHCP service is enabled in relay mode.
	DhcpConfigPaths []string `json:"dhcp_config_paths,omitempty"`
	// Configuration IPv6 NDRA and DAD profiles. Either or both NDRA and/or DAD profiles can be configured.
	Ipv6ProfilePaths []string                 `json:"ipv6_profile_paths,omitempty"`
	QosProfile       *GatewayQosProfileConfig `json:"qos_profile,omitempty"`
	// Tier1 connectivity type for reference. Property value is not validated with Tier1 configuration.   ROUTED: Tier1 is connected to Tier0 gateway and routing is enabled.   ISOLATED: Tier1 is not connected to any Tier0 gateway.   NATTED: Tier1 is in ROUTED type with NAT configured locally.
	Type_ string `json:"type,omitempty"`
	// Enable different types of route advertisements. When not specified, routes to IPSec VPN local-endpoint subnets (TIER1_IPSEC_LOCAL_ENDPOINT) are automatically advertised.
	RouteAdvertisementTypes []string `json:"route_advertisement_types,omitempty"`
}

// Binding of Tier-1 to the enforcement point.
type Tier1DeploymentMap struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Path of enforcement point on which Tier-1 shall be deployed.
	EnforcementPoint string `json:"enforcement_point"`
}

// Tier1 gateway state
type Tier1GatewayState struct {
	Tier1Status *LogicalRouterStatus `json:"tier1_status,omitempty"`
	// IPv6 DAD status for interfaces configured on Tier1
	Ipv6Status []IPv6Status        `json:"ipv6_status,omitempty"`
	Tier1State *LogicalRouterState `json:"tier1_state,omitempty"`
	// String Path of the enforcement point. When not specified, routes from all enforcement-points are returned.
	EnforcementPointPath string `json:"enforcement_point_path,omitempty"`
}

// Tier-1 interface configuration for attaching services.
type Tier1Interface struct {
	// Specify IP address and network prefix for interface.
	Subnets []InterfaceSubnet `json:"subnets"`
	// Unicast Reverse Path Forwarding mode
	UrpfMode string `json:"urpf_mode,omitempty"`
	// Maximum transmission unit (MTU) specifies the size of the largest packet that a network protocol can transmit.
	Mtu int32 `json:"mtu,omitempty"`
	// Configrue IPv6 NDRA profile. Only one NDRA profile can be configured.
	Ipv6ProfilePaths []string `json:"ipv6_profile_paths,omitempty"`
	// Policy path of Segment to which interface is connected to.
	SegmentPath string `json:"segment_path"`
}

// Paged collection of Tier-1 Interfaces
type Tier1InterfaceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier-1 Interface list results
	Results []Tier1Interface `json:"results"`
}

// Paged collection of Tier-1 instances
type Tier1ListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Tier-1 list results
	Results []Tier1 `json:"results"`
}

type TlsCertificate struct {
	defaultStruct
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// list of X509Certificates.
	Details []X509Certificate `json:"details,omitempty"`
	// pem encoded certificate data.
	PemEncoded string `json:"pem_encoded"`
}

// Certificate queries result
type TlsCertificateList struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// TlsCertificate list.
	Results []TlsCertificate `json:"results,omitempty"`
}

type TlsCrl struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool     `json:"marked_for_delete,omitempty"`
	Details         *X509Crl `json:"details,omitempty"`
	// Pem encoded crl data.
	PemEncoded string `json:"pem_encoded"`
}

// Paged Collection of TlsCrl
type TlsCrlListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// TlsCrl list results
	Results []TlsCrl `json:"results"`
}

// Returns the certificate and thumbprint of a remote TLS listener, if the listener is running and accepting requests. If the certificate cannot be retrieved, the result property describes the problem.
type TlsListenerCertificate struct {
	// Result of get certificate operation.
	Result      string           `json:"result,omitempty"`
	Certificate *X509Certificate `json:"certificate,omitempty"`
	// The SHA-256 thumbprint of the TLS listener.
	Thumbprint string `json:"thumbprint,omitempty"`
}

type TlsTrustData struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Key algorithm contained in this certificate.
	KeyAlgo string `json:"key_algo,omitempty"`
	// private key data
	PrivateKey string `json:"private_key,omitempty"`
	// Password for private key encryption.
	Passphrase string `json:"passphrase,omitempty"`
	// pem encoded certificate data.
	PemEncoded string `json:"pem_encoded"`
}

// Tooltip to be shown while hovering over the dashboard UI element.
type Tooltip struct {
	// Text to be shown on tooltip while hovering over UI element. The text would be wrapped if it exceeds 80 chars.
	Text string `json:"text"`
	// If true, displays tooltip text in bold
	Heading bool `json:"heading,omitempty"`
	// If the condition is met then the tooltip will be applied. If no condition is provided, then the tooltip will be applied unconditionally. Examples of expression syntax are provided under 'example_request' section of 'CreateWidgetConfiguration' API.
	Condition string `json:"condition,omitempty"`
}

type Traceflow struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// The id of the traceflow round
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Represents the traceflow operation state
	OperationState  string                        `json:"operation_state,omitempty"`
	LogicalCounters *TraceflowObservationCounters `json:"logical_counters,omitempty"`
	// Maximum time (in ms) the management plane will be waiting for this traceflow round.
	Timeout int64 `json:"timeout,omitempty"`
	// A flag, when set true, indicates some observations were deleted from the result set.
	ResultOverflowed bool `json:"result_overflowed,omitempty"`
	// id of the source logical port used for injecting the traceflow packet
	LportId  string                        `json:"lport_id,omitempty"`
	Counters *TraceflowObservationCounters `json:"counters,omitempty"`
	// The status of the traceflow RPC request. SUCCESS - The traceflow request is sent successfully. TIMEOUT - The traceflow request gets timeout. SOURCE_PORT_NOT_FOUND - The source port of the request cannot be found. DATA_PATH_NOT_READY - The datapath component cannot be ready to receive request. CONNECTION_ERROR - There is connection error on datapath component. UNKNOWN - The status of traceflow request cannot be determined.
	RequestStatus string `json:"request_status,omitempty"`
	// Traceflow result analysis notes
	Analysis []string `json:"analysis,omitempty"`
}

// Traceflow configuration
type TraceflowConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Maximum time in seconds the management plane will wait for observation result to be sent by opsAgent.
	Timeout int64 `json:"timeout,omitempty"`
	// This field indicates if intent is transient and will be cleaned up by the system if set to true
	IsTransient bool        `json:"is_transient,omitempty"`
	Packet      *PacketData `json:"packet"`
	// Segment Port Path or UUID
	SegmentPortPath string `json:"segment_port_path"`
}

// Paged Collection of TraceflowConfigs
type TraceflowConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// TraceflowConfig list results
	Results []TraceflowConfig `json:"results"`
}

type TraceflowObservation struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
}

type TraceflowObservationCounters struct {
	// Total number of forwarded observations for this traceflow round.
	ForwardedCount int64 `json:"forwarded_count,omitempty"`
	// Total number of dropped observations for this round.
	DroppedCount int64 `json:"dropped_count,omitempty"`
	// Total number of delivered observations for this traceflow round.
	DeliveredCount int64 `json:"delivered_count,omitempty"`
	// Total number of received observations for this traceflow round.
	ReceivedCount int64 `json:"received_count,omitempty"`
}

type TraceflowObservationDelivered struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// This field specifies the resolution type of ARP ARP_SUPPRESSION_PORT_CACHE - ARP request is suppressed by port DB ARP_SUPPRESSION_TABLE - ARP request is suppressed by ARP table ARP_SUPPRESSION_CP_QUERY - ARP request is suppressed by info derived from CP ARP_VM - No suppression and the ARP request is resolved.
	ResolutionType string `json:"resolution_type,omitempty"`
	// The name of the logical port into which the traceflow packet was delivered
	LportName string `json:"lport_name,omitempty"`
	// The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	TargetMac string `json:"target_mac,omitempty"`
	// VLAN on bridged network
	VlanId int64 `json:"vlan_id,omitempty"`
	// The id of the logical port into which the traceflow packet was delivered
	LportId string `json:"lport_id,omitempty"`
}

type TraceflowObservationDropped struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// The ID of the NAT rule that was applied to forward the traceflow packet
	NatRuleId int64 `json:"nat_rule_id,omitempty"`
	// The reason traceflow packet was dropped
	Reason string `json:"reason,omitempty"`
	// The id of the logical port at which the traceflow packet was dropped
	LportId string `json:"lport_id,omitempty"`
	// The name of the logical port at which the traceflow packet was dropped
	LportName string `json:"lport_name,omitempty"`
	// The id of the acl rule that was applied to drop the traceflow packet
	AclRuleId int64 `json:"acl_rule_id,omitempty"`
	// This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
	ArpFailReason string `json:"arp_fail_reason,omitempty"`
}

type TraceflowObservationDroppedLogical struct {
	// The ID of the NAT rule that was applied to forward the traceflow packet
	NatRuleId int64 `json:"nat_rule_id,omitempty"`
	// The reason traceflow packet was dropped
	Reason string `json:"reason,omitempty"`
	// The id of the logical port at which the traceflow packet was dropped
	LportId string `json:"lport_id,omitempty"`
	// The name of the logical port at which the traceflow packet was dropped
	LportName string `json:"lport_name,omitempty"`
	// The id of the acl rule that was applied to drop the traceflow packet
	AclRuleId int64 `json:"acl_rule_id,omitempty"`
	// This field specifies the ARP fails reason ARP_TIMEOUT - ARP failure due to query control plane timeout ARP_CPFAIL - ARP failure due post ARP query message to control plane failure ARP_FROMCP - ARP failure due to deleting ARP entry from control plane ARP_PORTDESTROY - ARP failure due to port destruction ARP_TABLEDESTROY - ARP failure due to ARP table destruction ARP_NETDESTROY - ARP failure due to overlay network destruction
	ArpFailReason string `json:"arp_fail_reason,omitempty"`
	// The index of service path that is a chain of services represents the point where the traceflow packet was dropped.
	ServicePathIndex int64 `json:"service_path_index,omitempty"`
	// The id of the component that dropped the traceflow packet.
	ComponentId string `json:"component_id,omitempty"`
}

type TraceflowObservationForwarded struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// The name of the uplink the traceflow packet is forwarded on
	UplinkName string `json:"uplink_name,omitempty"`
	// The virtual tunnel endpoint label
	VtepLabel int64 `json:"vtep_label,omitempty"`
	// IP address of the destination end of the tunnel
	RemoteIpAddress string `json:"remote_ip_address,omitempty"`
	// The 64bit tunnel context carried on the wire
	Context int64 `json:"context,omitempty"`
	// IP address of the source end of the tunnel
	LocalIpAddress string `json:"local_ip_address,omitempty"`
	// This field will not be always available. Use remote_ip_address when this field is not set.
	DstTransportNodeId string `json:"dst_transport_node_id,omitempty"`
	// The name of the transport node to which the traceflow packet is forwarded
	DstTransportNodeName string `json:"dst_transport_node_name,omitempty"`
}

type TraceflowObservationForwardedLogical struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// The path index of the service insertion component
	ServicePathIndex int64 `json:"service_path_index,omitempty"`
	// The id of the component that forwarded the traceflow packet.
	ComponentId string `json:"component_id,omitempty"`
	// This field specified the VLAN id a traceflow packet matched in the whitelist in spoofguard.
	SpoofguardVlanId int64 `json:"spoofguard_vlan_id,omitempty"`
	// ARP_UNKNOWN_FROM_CP - Unknown ARP query result emitted by control plane ND_NS_UNKNOWN_FROM_CP - Unknown neighbor solicitation query result emitted by control plane UNKNOWN - Unknown resend type
	ResendType string `json:"resend_type,omitempty"`
	// The name of the logical port through which the traceflow packet was forwarded.
	LportName string `json:"lport_name,omitempty"`
	// The id of the acl rule that was applied to forward the traceflow packet
	AclRuleId int64 `json:"acl_rule_id,omitempty"`
	// The index of the service insertion component
	ServiceIndex int64 `json:"service_index,omitempty"`
	// VNI for the logical network on which the traceflow packet was forwarded.
	Vni int32 `json:"vni,omitempty"`
	// The name of the destination component to which the traceflow packet was forwarded.
	DstComponentName string `json:"dst_component_name,omitempty"`
	// The ID of the NAT rule that was applied to forward the traceflow packet
	NatRuleId int64 `json:"nat_rule_id,omitempty"`
	// The translated source IP address of VPN/NAT
	TranslatedSrcIp string `json:"translated_src_ip,omitempty"`
	// The translated destination IP address of VNP/NAT
	TranslatedDstIp string `json:"translated_dst_ip,omitempty"`
	// The source MAC address of form: \"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$\". For example: 00:00:00:00:00:00.
	SpoofguardMac string `json:"spoofguard_mac,omitempty"`
	// The type of the destination component to which the traceflow packet was forwarded.
	DstComponentType string `json:"dst_component_type,omitempty"`
	// The id of the logical port through which the traceflow packet was forwarded.
	LportId string `json:"lport_id,omitempty"`
	// The id of the destination component to which the traceflow packet was forwarded.
	DstComponentId string `json:"dst_component_id,omitempty"`
	// This field specified the prefix IP address a traceflow packet matched in the whitelist in spoofguard.
	SpoofguardIp string `json:"spoofguard_ip,omitempty"`
	// The ttl of the service insertion component
	ServiceTtl int64 `json:"service_ttl,omitempty"`
	// MAC address of nexthop for service insertion(SI) in service VM(SVM) where the traceflow packet was received.
	SvcNhMac string `json:"svc_nh_mac,omitempty"`
}

type TraceflowObservationListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// TraceflowObservation list results
	Results []TraceflowObservation `json:"results,omitempty"`
}

type TraceflowObservationReceived struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// The virtual tunnel endpoint label
	VtepLabel int64 `json:"vtep_label,omitempty"`
	// The name of the uplink the traceflow packet is received on
	UplinkName string `json:"uplink_name,omitempty"`
	// IP address of the destination end of the tunnel
	LocalIpAddress string `json:"local_ip_address,omitempty"`
	// IP address of the source end of the tunnel
	RemoteIpAddress string `json:"remote_ip_address,omitempty"`
}

type TraceflowObservationReceivedLogical struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// MAC address of SAN volume controller for service insertion(SI) in service VM(SVM) where the traceflow packet was received.
	SvcMac string `json:"svc_mac,omitempty"`
	// The id of the source component from which the traceflow packet was received.
	SrcComponentId string `json:"src_component_id,omitempty"`
	// The id of the component that received the traceflow packet.
	ComponentId string `json:"component_id,omitempty"`
	// The id of the logical port at which the traceflow packet was received
	LportId string `json:"lport_id,omitempty"`
	// The type of the source component from which the traceflow packet was received.
	SrcComponentType string `json:"src_component_type,omitempty"`
	// The name of the logical port at which the traceflow packet was received
	LportName string `json:"lport_name,omitempty"`
	// The name of source component from which the traceflow packet was received.
	SrcComponentName string `json:"src_component_name,omitempty"`
	// VNI for the logical network on which the traceflow packet was received.
	Vni int32 `json:"vni,omitempty"`
}

type TraceflowObservationRelayedLogical struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// This field specified the message type of the relay service REQUEST - The relay service will relay a request message to the destination server REPLY - The relay service will relay a reply message to the client
	MessageType string `json:"message_type,omitempty"`
	// This field specified the IP address of the destination which the packet will be relayed.
	DstServerAddress string `json:"dst_server_address,omitempty"`
	// This field specified the logical component that relay service located.
	LogicalCompUuid string `json:"logical_comp_uuid,omitempty"`
	// This field specified the IP address of the relay service.
	RelayServerAddress string `json:"relay_server_address,omitempty"`
}

type TraceflowObservationReplicationLogical struct {
	// Timestamp when the observation was created by the transport node (microseconds epoch)
	TimestampMicro int64 `json:"timestamp_micro,omitempty"`
	// The sub type of the component that issued the observation.
	ComponentSubType string `json:"component_sub_type,omitempty"`
	ResourceType     string `json:"resource_type"`
	// The type of the component that issued the observation.
	ComponentType string `json:"component_type,omitempty"`
	// name of the transport node that observed a traceflow packet
	TransportNodeName string `json:"transport_node_name,omitempty"`
	// Timestamp when the observation was created by the transport node (milliseconds epoch)
	Timestamp int64 `json:"timestamp,omitempty"`
	// id of the transport node that observed a traceflow packet
	TransportNodeId string `json:"transport_node_id,omitempty"`
	// the hop count for observations on the transport node that a traceflow packet is injected in will be 0. The hop count is incremented each time a subsequent transport node receives the traceflow packet. The sequence number of 999 indicates that the hop count could not be determined for the containing observation.
	SequenceNo int64 `json:"sequence_no,omitempty"`
	// type of the transport node that observed a traceflow packet
	TransportNodeType string `json:"transport_node_type,omitempty"`
	// The name of the component that issued the observation.
	ComponentName string `json:"component_name,omitempty"`
	// The label of VTEP
	VtepLabel int64 `json:"vtep_label,omitempty"`
	// This field specifies the type of replication message TX_VTEP - Transmit replication to all VTEPs TX_MTEP - Transmit replication to all MTEPs RX - Receive replication
	ReplicationType string `json:"replication_type,omitempty"`
	// Local IP address of the component that replicates the packet.
	LocalIpAddress string `json:"local_ip_address,omitempty"`
	// The name of uplink
	UplinkName string `json:"uplink_name,omitempty"`
}

// Enables traffic limit for incoming/outgoing broadcast and multicast packets. Use 0 to disable rate limiting for a specific traffic type
type TrafficRateLimits struct {
	// Incoming multicast traffic limit in packets per second
	RxMulticast int32 `json:"rx_multicast,omitempty"`
	// Outgoing multicast traffic limit in packets per second
	TxMulticast int32 `json:"tx_multicast,omitempty"`
	// Outgoing broadcast traffic limit in packets per second
	TxBroadcast int32 `json:"tx_broadcast,omitempty"`
	// Incoming broadcast traffic limit in packets per second
	RxBroadcast int32 `json:"rx_broadcast,omitempty"`
}

// Detailed Realized Status of an Intent on a span of Transport Nodes.
type TransportNodeSpanEnforcedStatus struct {
	// Enforced Realized Status Per Scope Resource Type.
	ResourceType string `json:"resource_type"`
	// List of Detailed Realized Status per Transport Node.
	EnforcedStatusPerTransportNode []EnforcedStatusPerTransportNode `json:"enforced_status_per_transport_node,omitempty"`
}

type TransportProtocolHeader struct {
	UdpHeader             *UdpHeader             `json:"udp_header,omitempty"`
	DhcpHeader            *DhcpHeader            `json:"dhcp_header,omitempty"`
	TcpHeader             *TcpHeader             `json:"tcp_header,omitempty"`
	IcmpEchoRequestHeader *IcmpEchoRequestHeader `json:"icmp_echo_request_header,omitempty"`
	Dhcpv6Header          *Dhcpv6Header          `json:"dhcpv6_header,omitempty"`
	NdpHeader             *NdpHeader             `json:"ndp_header,omitempty"`
	DnsHeader             *DnsHeader             `json:"dns_header,omitempty"`
}

type TunnelInterfaceIpSubnet struct {
	// IPv4 Addresses
	IpAddresses []string `json:"ip_addresses"`
	// Subnet Prefix Length
	PrefixLength int64 `json:"prefix_length"`
}

type TunnelSubnet struct {
	// Subnet ip addresses
	IpAddresses []string `json:"ip_addresses"`
	// Subnet Prefix Length
	PrefixLength int64 `json:"prefix_length"`
}

type UdpHeader struct {
	// Source port of udp header
	SrcPort int64 `json:"src_port,omitempty"`
	// Destination port of udp header
	DstPort int64 `json:"dst_port,omitempty"`
}

// Active healthchecks are disabled by default and can be enabled for a server pool by binding a health monitor to the Group through the PolicyLbRule object. This represents active health monitoring over UDP. Active healthchecks are initiated periodically, at a configurable interval, to each member of the Group. Only if a healthcheck fails consecutively for a specified number of times (fall_count) to a member will the member status be marked DOWN. Once a member is DOWN, a specified number of consecutive successful healthchecks (rise_count) will bring the member back to UP state. After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
type UdpPolicyLbMonitorProfile struct {
	// Typically, monitors perform healthchecks to Group members using the member IP address and pool_port. However, in some cases, customers prefer to run healthchecks against a different port than the pool member port which handles actual application traffic. In such cases, the port to run healthchecks against can be specified in the monitor_port value.
	MonitorPort int32 `json:"monitor_port,omitempty"`
	// Timeout specified in seconds.  After a healthcheck is initiated, if it does not complete within a certain period, then also the healthcheck is considered to be unsuccessful. Completing a healthcheck within timeout means establishing a connection (TCP or SSL), if applicable, sending the request and receiving the response, all within the configured timeout.
	Timeout int64 `json:"timeout,omitempty"`
	// Only if a healthcheck fails consecutively for a specified number of times, given with fall_count, to a member will the member status be marked DOWN.
	FallCount int64 `json:"fall_count,omitempty"`
	// Active healthchecks are initiated periodically, at a configurable interval (in seconds), to each member of the Group.
	Interval int64 `json:"interval,omitempty"`
	// Once a member is DOWN, a specified number of consecutive successful healthchecks specified by rise_count will bring the member back to UP state.
	RiseCount    int64  `json:"rise_count,omitempty"`
	ResourceType string `json:"resource_type"`
	// Expected data, can be anywhere in the response and it has to be a string, regular expressions are not supported. UDP healthcheck is considered failed if there is no server response within the timeout period.
	Receive string `json:"receive"`
	// The data to be sent to the monitored server.
	Send string `json:"send"`
}

// Virtual server acts as a facade to an application, receives all client connections over UDP and distributes them among the backend servers.
type UdpPolicyLbVirtualServer struct {
	// If access log is enabled, all HTTP requests sent to an L7 virtual server are logged to the access log file. Both successful requests (backend server returns 2xx) and unsuccessful requests (backend server returns 4xx or 5xx) are logged to access log, if enabled.
	AccessLogEnabled bool `json:"access_log_enabled,omitempty"`
	// Path to router type object that PolicyLbVirtualServer connects to. The only supported router object is Network.
	RouterPath string `json:"router_path"`
	// Path to optional object that enables persistence on a virtual server allowing related client connections to be sent to the same backend server. Persistence is disabled by default.
	LbPersistenceProfile string `json:"lb_persistence_profile,omitempty"`
	TrafficSource        string `json:"traffic_source,omitempty"`
	// Configures the IP address of the PolicyLbVirtualServer where it receives all client connections and distributes them among the backend servers.
	IpAddress string `json:"ip_address"`
	// Ports contains a list of at least one port or port range such as \"80\", \"1234-1236\". Each port element in the list should be a single port or a single port range.
	Ports        []string `json:"ports"`
	ResourceType string   `json:"resource_type"`
}

// Unary Operation.
type UnaryOperation struct {
	// Logical Operator describing the operation to apply to the operand.
	Operator string                `json:"operator"`
	Operand  *ResourceFieldPointer `json:"operand"`
}

// Operation based Injection Value.
type UnaryOperationBasedInjectionValue struct {
	// Injection Value resource type.
	ResourceType string                `json:"resource_type"`
	Operation    *UnaryOperation       `json:"operation,omitempty"`
	InitialValue *ResourceFieldPointer `json:"initial_value"`
}

// Short name or alias of a url. It is used to represent the url.
type UrlAlias struct {
	// Url to fetch data from.
	Url string `json:"url"`
	// Short name or alias of url, if any. If not specified, the url can be referenced by its index in the array of urls of the datasource instance as $<index> (for example, $0).
	Alias string `json:"alias,omitempty"`
	// Search query to be applied, if any. If query string is not provided, it will be ignored.
	Query string `json:"query,omitempty"`
}

// Authenticated User Info
type UserInfo struct {
	// User Name
	UserName string `json:"user_name,omitempty"`
	// Permissions
	Roles []NsxRole `json:"roles,omitempty"`
}

// User login session information
type UserSession struct {
	// Logout time if applicable.  An active user session has no logout time.
	LogoutTime int64 `json:"logout_time,omitempty"`
	// Login time.
	LoginTime int64 `json:"login_time"`
	// AD user name.
	UserName string `json:"user_name"`
	// AD Domain of user.
	DomainName string `json:"domain_name"`
	// User session ID. This also indicates whether this is VDI / RDSH.
	UserSessionId int32 `json:"user_session_id"`
}

// Represents the leaf level value constraint to constrain specified attribute value to the set of values to be allowed/not-allowed. Example - sourceGroups allowed to have only with list of groups.   {     \"operator\":\"INCLUDES\",     \"values\":[\"/infra/services/HTTP\", \"/infra/services/HTTPS\"]   }
type ValueConstraintExpression struct {
	ResourceType string `json:"resource_type"`
	// Operation to check for value list for resource attribute of constraint.
	Operator string `json:"operator"`
	// List of values.
	Values []string `json:"values"`
}

type VersionList struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// List of component versions
	AcceptableVersions []string `json:"acceptable_versions"`
}

// Virtual Hybrid Cloud is a construct that provides network isolation for all its contents out of the box. It can be considered to be an equivalent of a tenant in the networking world, where the compute and networking elements within are isolated from other VHCs. The VHC will also be used to provide hybridity across on-prem datacenters and the cloud, thus providing a means of building private clouds with elements both on-prem and in the cloud.
type Vhc struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Information related to sites applicable for given VHC.
	SiteInfos []SiteInfo `json:"site_infos"`
	// This is set of IP addresses that will be used for Public Application tiers.
	PublicIpAddresses []string `json:"public_ip_addresses"`
	// This is set of IP addresses that will be used for Shared and Private Application tiers.
	PrivateIpAddresses []string `json:"private_ip_addresses"`
	// Type of Services to be made available for the applications defined under VHC.
	Capabilities []string `json:"capabilities,omitempty"`
	// The tier 0 has to be pre-created before VHC is created. The tier 0 typically provides connectivity to external world. List of sites for VHC has to be subset of sites where the tier 0 spans.
	Tier0s []string `json:"tier_0s"`
}

// DNS configuration for the VHC.
type VhcDnsConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// DNS servers to which the DNS request needs to be forwarded.
	DnsUpstreamServers []string `json:"dns_upstream_servers"`
}

// Vidm Info
type VidmInfo struct {
	// User's Full Name Or User Group's Display Name
	DisplayName string `json:"display_name,omitempty"`
	// Type
	Type_ string `json:"type,omitempty"`
	// Username Or Groupname
	Name string `json:"name,omitempty"`
}

type VidmInfoListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// List results
	Results []VidmInfo `json:"results"`
}

// Describes the configuration of a view to be displayed on the dashboard.
type View struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Title of the widget.
	DisplayName string `json:"display_name"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`
	// Comma separated list of roles to which the shared view is visible. Allows user to specify the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles.
	IncludeRoles string `json:"include_roles,omitempty"`
	// Comma separated list of roles to which the shared view is not visible. Allows user to prevent the visibility of a shared view to the specified roles. User defined roles can also be specified in the list. The roles can be obtained via GET /api/v1/aaa/roles. Please visit API documentation for details about roles. If include_roles is specified then exclude_roles cannot be specified.
	ExcludeRoles string `json:"exclude_roles,omitempty"`
	// Determines placement of view relative to other views. The lower the weight, the higher it is in the placement order.
	Weight int32 `json:"weight,omitempty"`
	// Array of widgets that are part of the view.
	Widgets []WidgetItem `json:"widgets"`
	// Defaults to false. Set to true to publish the view to other users. The widgets of a shared view are visible to other users.
	Shared bool `json:"shared,omitempty"`
}

// Represents a list of views.
type ViewList struct {
	// Array of views
	Views []View `json:"views,omitempty"`
}

// A VirtualEndpoint represents an IP (or nexthop) which is outside SDDC. It represents a redirection target for RedirectionPolicy.
type VirtualEndpoint struct {
	// IPs where either inbound or outbound traffic is to be redirected.
	TargetIps    []IpInfo `json:"target_ips"`
	ResourceType string   `json:"resource_type"`
	// One VirtualEndpoint will be created per service name.
	ServiceNames []string `json:"service_names"`
}

// Collection of vitual endpoints under a Tier0
type VirtualEndpointListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// All virtual endpoints under a Tier0
	Results []VirtualEndpoint `json:"results"`
}

type VirtualMachine struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags   []Tag              `json:"tags,omitempty"`
	Source *ResourceReference `json:"source,omitempty"`
	// Id of the vm unique within the host.
	LocalIdOnHost string `json:"local_id_on_host"`
	// Virtual Machine type; Edge, Service VM or other.
	Type_     string     `json:"type,omitempty"`
	GuestInfo *GuestInfo `json:"guest_info,omitempty"`
	// Current power state of this virtual machine in the system.
	PowerState string `json:"power_state"`
	// List of external compute ids of the virtual machine in the format 'id-type-key:value' , list of external compute ids ['uuid:xxxx-xxxx-xxxx-xxxx', 'moIdOnHost:moref-11', 'instanceUuid:xxxx-xxxx-xxxx-xxxx']
	ComputeIds []string `json:"compute_ids"`
	// Id of the host in which this virtual machine exists.
	HostId string `json:"host_id,omitempty"`
	// Current external id of this virtual machine in the system.
	ExternalId string `json:"external_id"`
}

// Virtual Machine Details
type VirtualMachineDetails struct {
	Self *SelfResourceLink `json:"_self,omitempty"`
	// The server will populate this field when returing the resource. Ignored on PUT and POST.
	Links []ResourceLink `json:"_links,omitempty"`
	// Schema for this resource
	Schema string `json:"_schema,omitempty"`
	// List of active (still logged in) user login/session data (no limit).
	ActiveSessions []UserSession `json:"active_sessions,omitempty"`
	// Optional list of up to 5 most recent archived (previously logged in) user login/session data.
	ArchivedSessions []UserSession `json:"archived_sessions,omitempty"`
}

type VirtualMachineListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// VirtualMachine list results
	Results []VirtualMachine `json:"results"`
}

// List of tags applied to the virtual machine. Based on the enforcement point, the virtual_machine_id will be different. It could be an external id for NSX T or a moid for NSX V
type VirtualMachineTagsUpdate struct {
	// The identifier that is used in the enforcement point that uniquely identifies the virtual machine. In case of NSXT it would be the value of the external_id of the virtual machine.
	VirtualMachineId string `json:"virtual_machine_id"`
	// List of tags to be applied on the virtual machine
	Tags []Tag `json:"tags"`
}

type VirtualNetworkInterface struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// MAC address of the virtual network interface.
	MacAddress string `json:"mac_address"`
	// Owner virtual machine type; Edge, Service VM or other.
	OwnerVmType string `json:"owner_vm_type,omitempty"`
	// Device key of the virtual network interface.
	DeviceKey string `json:"device_key"`
	// Id of the host on which the vm exists.
	HostId string `json:"host_id"`
	// Id of the vm to which this virtual network interface belongs.
	OwnerVmId string `json:"owner_vm_id"`
	// Id of the vm unique within the host.
	VmLocalIdOnHost string `json:"vm_local_id_on_host"`
	// External Id of the virtual network inferface.
	ExternalId string `json:"external_id"`
	// LPort Attachment Id of the virtual network interface.
	LportAttachmentId string `json:"lport_attachment_id,omitempty"`
	// IP Addresses of the the virtual network interface, from various sources.
	IpAddressInfo []IpAddressInfo `json:"ip_address_info,omitempty"`
	// Device name of the virtual network interface.
	DeviceName string `json:"device_name,omitempty"`
}

type VirtualNetworkInterfaceListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// VirtualNetworkInterface list results
	Results []VirtualNetworkInterface `json:"results"`
}

// Virtual portgroup on a virtual switch
type VirtualPortgroup struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// External id of the virtual portgroup
	ExternalId string `json:"external_id,omitempty"`
	// Portgroup type like DistributedVirtualPortgroup
	OriginType string `json:"origin_type,omitempty"`
	// Id of the portgroup, eg. a mo-ref from VC.
	CmLocalId string `json:"cm_local_id,omitempty"`
}

// Virtual switch on a compute manager
type VirtualSwitch struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the virtual switch in compute manager
	CmLocalId string `json:"cm_local_id,omitempty"`
	// External id of the virtual switch
	ExternalId string `json:"external_id,omitempty"`
	// Switch type like VmwareDistributedVirtualSwitch
	OriginType string `json:"origin_type,omitempty"`
	// ID of the compute manager where this virtual switch is discovered.
	OriginId string `json:"origin_id,omitempty"`
}

type VmToolsInfo struct {
	// Timestamp of last modification
	LastSyncTime int64 `json:"_last_sync_time,omitempty"`
	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// The type of this resource.
	ResourceType string `json:"resource_type"`
	// Opaque identifiers meaningful to the API user
	Tags   []Tag              `json:"tags,omitempty"`
	Source *ResourceReference `json:"source,omitempty"`
	// Type of VM - Edge, Service or other.
	VmType string `json:"vm_type,omitempty"`
	// Version of network agent on the VM of a third party partner solution.
	NetworkAgentVersion string `json:"network_agent_version,omitempty"`
	// Id of the VM which is assigned locally by the host. It is the VM-moref on ESXi hosts, in other environments it is VM UUID.
	HostLocalId string `json:"host_local_id,omitempty"`
	// Current external id of this virtual machine in the system.
	ExternalId string `json:"external_id,omitempty"`
	// Version of VMTools installed on the VM.
	ToolsVersion string `json:"tools_version,omitempty"`
	// Version of file agent on the VM of a third party partner solution.
	FileAgentVersion string `json:"file_agent_version,omitempty"`
}

// Vni Pool Configuration.
type VniPoolConfig struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Start value of VNI Pool range
	Start int32 `json:"start"`
	// End value of VNI Pool range
	End int32 `json:"end"`
}

// Collection of Vni Pool Configuration.
type VniPoolConfigListResult struct {
	// Opaque cursor to be used for getting next page of records (supplied by current result page)
	Cursor string `json:"cursor,omitempty"`
	// If true, results are sorted in ascending order
	SortAscending bool `json:"sort_ascending,omitempty"`
	// Field by which records are sorted
	SortBy string `json:"sort_by,omitempty"`
	// Count of results found (across all pages), set only on first page
	ResultCount int64 `json:"result_count,omitempty"`
	// Vni Pool Config list results
	Results []VniPoolConfig `json:"results"`
}

// Vrf Route Targets for import/export.
type VrfRouteTargets struct {
	// subtree for this type within policy tree containing nested elements.
	Children []ChildPolicyConfigResource `json:"children,omitempty"`
	// Global intent objects cannot be modified by the user. However, certain global intent objects can be overridden locally by use of this property. In such cases, the overridden local values take precedence over the globally defined values for the properties.
	Overridden bool `json:"overridden,omitempty"`
	// Intent objects are not directly deleted from the system when a delete is invoked on them. They are marked for deletion and only when all the realized entities for that intent object gets deleted, the intent object is deleted. Objects that are marked for deletion are not returned in GET call. One can use the search API to get these objects.
	MarkedForDelete bool `json:"marked_for_delete,omitempty"`
	// Address family.
	AddressFamily string `json:"address_family,omitempty"`
	// Import route targets. ASN:<number> or IPAddress:<number>.
	ImportRouteTargets []string `json:"import_route_targets,omitempty"`
	// Export route targets. ASN:<number> or IPAddress:<number>.
	ExportRouteTargets []string `json:"export_route_targets,omitempty"`
}

// Schedule to specify day of the week and time to take automated backup
type WeeklyBackupSchedule struct {
	// Schedule type
	ResourceType string `json:"resource_type"`
	// Days of week when backup is taken. 0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday ...
	DaysOfWeek []int64 `json:"days_of_week"`
	// Time of day when backup is taken
	MinuteOfDay int64 `json:"minute_of_day"`
	// Time of day when backup is taken
	HourOfDay int64 `json:"hour_of_day"`
}

// Describes the configuration of a widget to be displayed on the dashboard. WidgetConfiguration is a base type that provides attributes of a widget in-general.
type WidgetConfiguration struct {
	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`
	// Title of the widget. If display_name is omitted, the widget will be shown without a title.
	DisplayName string `json:"display_name,omitempty"`
	// Description of this resource
	Description string `json:"description,omitempty"`
	// Opaque identifiers meaningful to the API user
	Tags []Tag `json:"tags,omitempty"`
	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`
	// Protection status is one of the following: PROTECTED - the client who retrieved the entity is not allowed             to modify it. NOT_PROTECTED - the client who retrieved the entity is allowed                 to modify it REQUIRE_OVERRIDE - the client who retrieved the entity is a super                    user and can modify it, but only when providing                    the request header X-Allow-Overwrite=true. UNKNOWN - the _protection field could not be determined for this           entity.
	Protection string `json:"_protection,omitempty"`
	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`
	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`
	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`
	// Unique identifier of this resource
	Id string `json:"id,omitempty"`
	// Supported visualization types are LabelValueConfiguration, DonutConfiguration, GridConfiguration, StatsConfiguration, MultiWidgetConfiguration, GraphConfiguration, ContainerConfiguration, CustomWidgetConfiguration and DropdownFilterWidgetConfiguration.
	ResourceType string `json:"resource_type"`
	// Default filter values to be passed to datasources. This will be used when the report is requested without filter values.
	DefaultFilterValue []DefaultFilterValue `json:"default_filter_value,omitempty"`
	// The 'datasources' represent the sources from which data will be fetched. Currently, only NSX-API is supported as a 'default' datasource. An example of specifying 'default' datasource along with the urls to fetch data from is given at 'example_request' section of 'CreateWidgetConfiguration' API.
	Datasources []Datasource `json:"datasources,omitempty"`
	// Specify relavite weight in WidgetItem for placement in a view. Please see WidgetItem for details.
	Weight int32   `json:"weight,omitempty"`
	Footer *Footer `json:"footer,omitempty"`
	// Flag to indicate that widget will continue to work without filter value. If this flag is set to false then default_filter_value is manadatory.
	FilterValueRequired bool `json:"filter_value_required,omitempty"`
	// Represents the horizontal span of the widget / container.
	Span int32 `json:"span,omitempty"`
	// Icons to be applied at dashboard for widgets and UI elements.
	Icons []Icon `json:"icons,omitempty"`
	// Set to true if this widget should be used as a drilldown.
	IsDrilldown bool `json:"is_drilldown,omitempty"`
	// Id of filter widget for subscription, if any. Id should be a valid id of an existing filter widget. Filter widget should be from the same view. Datasource URLs should have placeholder values equal to filter alias to accept the filter value on filter change.
	Filter string `json:"filter,omitempty"`
	// Id of drilldown widget, if any. Id should be a valid id of an existing widget. A widget is considered as drilldown widget when it is associated with any other widget and provides more detailed information about any data item from the parent widget.
	DrilldownId string `json:"drilldown_id,omitempty"`
	// Please use the property 'shared' of View instead of this. The widgets of a shared view are visible to other users.
	Shared bool    `json:"shared,omitempty"`
	Legend *Legend `json:"legend,omitempty"`
}

// Represents a list of widget configurations.
type WidgetConfigurationList struct {
	// Array of widget configurations
	Widgetconfigurations []WidgetConfiguration `json:"widgetconfigurations,omitempty"`
}

// Represents a reference to a widget that is held by a container or a multi-widget or a View.
type WidgetItem struct {
	// Aligns widget either left or right.
	Alignment string `json:"alignment,omitempty"`
	// If true, separates this widget in a container.
	Separator bool `json:"separator,omitempty"`
	// Id of the widget configuration that is held by a multi-widget or a container or a view.
	WidgetId string `json:"widget_id"`
	// Determines placement of widget or container relative to other widgets and containers. The lower the weight, the higher it is in the placement order.
	Weight int32  `json:"weight,omitempty"`
	Label  *Label `json:"label,omitempty"`
}

type X509Certificate struct {
	// The order of the middle term(s) of the reduction polynomial in elliptic curve (EC) | characteristic 2 finite field.| Contents of this array are copied to protect against subsequent modification in ECDSA.
	EcdsaEcFieldF2mks []int64 `json:"ecdsa_ec_field_f2mks,omitempty"`
	// Certificate version (default v1).
	Version string `json:"version,omitempty"`
	// True if this is a CA certificate.
	IsCa bool `json:"is_ca,omitempty"`
	// The algorithm used by the Certificate Authority to sign the certificate.
	SignatureAlgorithm string `json:"signature_algorithm,omitempty"`
	// The first coefficient of this elliptic curve in ECDSA.
	EcdsaPublicKeyA string `json:"ecdsa_public_key_a,omitempty"`
	// An RSA public key is made up of the modulus and the public exponent. Exponent is a power number.
	RsaPublicKeyExponent string `json:"rsa_public_key_exponent,omitempty"`
	// The first coefficient of this elliptic curve in elliptic curve (EC) | characteristic 2 finite field for ECDSA.
	EcdsaEcFieldF2mm int64 `json:"ecdsa_ec_field_f2mm,omitempty"`
	// The certificate issuer's common name.
	IssuerCn string `json:"issuer_cn,omitempty"`
	// The certificate owner's common name.
	SubjectCn string `json:"subject_cn,omitempty"`
	// The order of generator G in ECDSA.
	EcdsaPublicKeyOrder string `json:"ecdsa_public_key_order,omitempty"`
	// The value whose i-th bit corresponds to the i-th coefficient of the reduction polynomial | in elliptic curve (EC) characteristic 2 finite field for ECDSA.
	EcdsaEcFieldF2mrp string `json:"ecdsa_ec_field_f2mrp,omitempty"`
	// Size measured in bits of the public/private keys used in a cryptographic algorithm.
	PublicKeyLength int64 `json:"public_key_length,omitempty"`
	// The time in epoch milliseconds at which the certificate becomes valid.
	NotBefore int64 `json:"not_before,omitempty"`
	// The specified prime for the elliptic curve prime finite field in ECDSA.
	EcdsaEcFieldF2pp string `json:"ecdsa_ec_field_f2pp,omitempty"`
	// The certificate issuers complete distinguished name.
	Issuer string `json:"issuer,omitempty"`
	// The second coefficient of this elliptic curve in ECDSA.
	EcdsaPublicKeyB string `json:"ecdsa_public_key_b,omitempty"`
	// An RSA public key is made up of the modulus and the public exponent. Modulus is wrap around number.
	RsaPublicKeyModulus string `json:"rsa_public_key_modulus,omitempty"`
	// One of the DSA cryptogaphic algorithm's strength parameters.
	DsaPublicKeyY string `json:"dsa_public_key_y,omitempty"`
	// The co-factor in ECDSA.
	EcdsaPublicKeyCofactor int64 `json:"ecdsa_public_key_cofactor,omitempty"`
	// The time in epoch milliseconds at which the certificate becomes invalid.
	NotAfter int64 `json:"not_after,omitempty"`
	// One of the DSA cryptogaphic algorithm's strength parameters, sub-prime.
	DsaPublicKeyQ string `json:"dsa_public_key_q,omitempty"`
	// One of the DSA cryptogaphic algorithm's strength parameters, prime.
	DsaPublicKeyP string `json:"dsa_public_key_p,omitempty"`
	// Y co-ordinate of G (the generator which is also known as the base point) in ECDSA.
	EcdsaPublicKeyGeneratorY string `json:"ecdsa_public_key_generator_y,omitempty"`
	// X co-ordinate of G (the generator which is also known as the base point) in ECDSA.
	EcdsaPublicKeyGeneratorX string `json:"ecdsa_public_key_generator_x,omitempty"`
	// Cryptographic algorithm used by the public key for data encryption.
	PublicKeyAlgo string `json:"public_key_algo,omitempty"`
	// True if this certificate is valid.
	IsValid bool `json:"is_valid,omitempty"`
	// The bytes used during curve generation for later validation in ECDSA.| Contents of this array are copied to protect against subsequent modification.
	EcdsaPublicKeySeed []string `json:"ecdsa_public_key_seed,omitempty"`
	// The signature value(the raw signature bits) used for signing and validate the cert.
	Signature string `json:"signature,omitempty"`
	// Certificate's serial number.
	SerialNumber string `json:"serial_number,omitempty"`
	// One of the DSA cryptogaphic algorithm's strength parameters, base.
	DsaPublicKeyG string `json:"dsa_public_key_g,omitempty"`
	// The certificate owners complete distinguished name.
	Subject string `json:"subject,omitempty"`
	// Represents an elliptic curve (EC) finite field in ECDSA.
	EcdsaEcField string `json:"ecdsa_ec_field,omitempty"`
	// The Curve name for the ECDSA certificate.
	EcdsaCurveName string `json:"ecdsa_curve_name,omitempty"`
}

// A CRL is a time-stamped list identifying revoked certificates.
type X509Crl struct {
	// Next update time for the CRL.
	NextUpdate string `json:"next_update,omitempty"`
	// CRL's version number either 1 or 2.
	Version string `json:"version,omitempty"`
	// List of X509CrlEntry.
	CrlEntries []X509CrlEntry `json:"crl_entries,omitempty"`
	// Issuer's distinguished name. (DN)
	Issuer string `json:"issuer,omitempty"`
}

// Each revoked certificate is identified in a CRL by its certificate serial number.
type X509CrlEntry struct {
	// Revocation date.
	RevocationDate string `json:"revocation_date,omitempty"`
	// The revoked certificate's serial number.
	SerialNumber string `json:"serial_number,omitempty"`
}
